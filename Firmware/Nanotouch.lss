
Nanotouch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00005b98  00005c2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005b98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000012e  00800114  00800114  00005c40  2**0
                  ALLOC
  3 .stab         000007ec  00000000  00000000  00005c40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000013b  00000000  00000000  0000642c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000270  00000000  00000000  00006567  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004b4  00000000  00000000  000067d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003aa1  00000000  00000000  00006c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012fb  00000000  00000000  0000a72c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001f6b  00000000  00000000  0000ba27  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003e0  00000000  00000000  0000d994  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001103  00000000  00000000  0000dd74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000020aa  00000000  00000000  0000ee77  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000420  00000000  00000000  00010f21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
    DATAPORTLO = d;
    CS0;
    WR0;
    WR1;
    CS1;
}
       0:	0c 94 2f 1e 	jmp	0x3c5e	; 0x3c5e <__ctors_end>

  return RES_OK;
}


byte mmc::writeSectors(const byte *buffer, uint32_t sector, byte count) {
       4:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
}


// A vague helper. Prevents the need to expose the FAT info block.
//
void microfat2::getFileInformation(directory_entry_t* directory_entry, unsigned long& sector, unsigned long& size)
       8:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
  #endif
}

File::File() : _mark(512),_progmem(0),_sector(-1),_origin(0),_fileLength(-1)
{
}
       c:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
    return 0x80000000/uv;   // Long divide to provide 16:16 result
}

//  a is +- 256 representing a 8:8 numver
//  dduv is always positive 16:16 number may be very large, might resonably be trimmed
long MUL8(short a, long dduv)
      10:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      14:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      18:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      1c:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      20:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      24:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      28:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      2c:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      30:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      34:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      38:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      3c:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      40:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      44:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      48:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      4c:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      50:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      54:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      58:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      5c:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      60:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      64:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      68:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      6c:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      70:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      74:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      78:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      7c:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      80:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      84:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      88:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      8c:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      90:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      94:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      98:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      9c:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      a0:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      a4:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>
      a8:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__bad_interrupt>

000000ac <_SSD1332>:
      ac:	81 9f 82 3f 83 ff 87 0f a0 70 a4 a8 3f a9 03 af     ...?.....p..?...
      bc:	b8 00 01 02 03 05 07 09 0c 0f 12 15 18 1c 20 24     .............. $
      cc:	28 2c 31 35 3a 3f 44 49 4f 54 5a 60 66 6c 72 79     (,15:?DIOTZ`flry
      dc:	7f                                                  .

000000dd <_tunnel>:
      dd:	5f 11 61 12 62 12 64 12 66 13 67 13 69 13 6b 13     _.a.b.d.f.g.i.k.
      ed:	6d 14 6f 14 71 14 74 15 76 15 78 15 7a 16 7d 16     m.o.q.t.v.x.z.}.
      fd:	80 16 82 17 85 17 88 18 8b 18 8e 18 91 19 94 19     ................
     10d:	97 1a 9a 1a 9e 1a a1 1b a5 1b a9 1c ad 1c b1 1c     ................
     11d:	b5 1d b9 1d be 1d c2 1e c6 1e cb 1e d0 1f d5 1f     ................
     12d:	d9 1f de 1f e3 20 e8 20 ed 20 f3 20 f8 20 fd 20     ..... . . . . . 
     13d:	5d 12 5e 12 60 12 61 12 63 13 65 13 67 13 69 14     ].^.`.a.c.e.g.i.
     14d:	6b 14 6d 14 6f 15 71 15 73 15 75 16 78 16 7a 16     k.m.o.q.s.u.x.z.
     15d:	7d 17 80 17 82 18 85 18 88 18 8b 19 8e 19 91 1a     }...............
     16d:	95 1a 98 1b 9b 1b 9f 1b a3 1c a7 1c ab 1d af 1d     ................
     17d:	b3 1d b7 1e bc 1e c0 1f c5 1f c9 1f ce 20 d3 20     ............. . 
     18d:	d8 20 dd 20 e2 21 e8 21 ed 21 f2 21 f7 21 fd 21     . . .!.!.!.!.!.!
     19d:	5a 12 5c 12 5d 12 5f 13 61 13 62 13 64 14 66 14     Z.\.]._.a.b.d.f.
     1ad:	68 14 6a 15 6c 15 6e 15 70 16 73 16 75 16 78 17     h.j.l.n.p.s.u.x.
     1bd:	7a 17 7d 18 80 18 82 18 85 19 88 19 8b 1a 8f 1a     z.}.............
     1cd:	92 1b 95 1b 99 1c 9d 1c a0 1c a4 1d a8 1d ac 1e     ................
     1dd:	b1 1e b5 1f ba 1f be 1f c3 20 c8 20 cd 21 d2 21     ......... . .!.!
     1ed:	d7 21 dc 21 e1 22 e7 22 ec 22 f2 22 f7 22 fd 22     .!.!."."."."."."
     1fd:	58 12 59 12 5b 13 5c 13 5e 13 60 14 62 14 63 14     X.Y.[.\.^.`.b.c.
     20d:	65 15 67 15 69 15 6c 16 6e 16 70 16 72 17 75 17     e.g.i.l.n.p.r.u.
     21d:	77 18 7a 18 7d 18 80 19 82 19 85 1a 89 1a 8c 1b     w.z.}...........
     22d:	8f 1b 93 1c 96 1c 9a 1d 9e 1d a2 1e a6 1e aa 1f     ................
     23d:	ae 1f b3 20 b7 20 bc 20 c1 21 c6 21 cb 22 d0 22     ... . . .!.!."."
     24d:	d6 22 db 23 e0 23 e6 23 ec 23 f1 23 f7 23 fd 23     .".#.#.#.#.#.#.#
     25d:	55 12 57 12 58 13 5a 13 5b 13 5d 14 5f 14 61 14     U.W.X.Z.[.]._.a.
     26d:	63 15 65 15 67 16 69 16 6b 16 6d 17 70 17 72 18     c.e.g.i.k.m.p.r.
     27d:	74 18 77 18 7a 19 7d 19 80 1a 83 1a 86 1b 89 1b     t.w.z.}.........
     28d:	8c 1c 90 1c 93 1d 97 1d 9b 1e 9f 1e a3 1f a7 1f     ................
     29d:	ac 20 b0 20 b5 21 ba 21 bf 22 c4 22 c9 23 cf 23     . . .!.!.".".#.#
     2ad:	d4 23 da 24 df 24 e5 24 eb 24 f1 25 f7 25 fd 25     .#.$.$.$.$.%.%.%
     2bd:	52 12 54 13 55 13 57 13 59 14 5a 14 5c 14 5e 15     R.T.U.W.Y.Z.\.^.
     2cd:	60 15 62 15 64 16 66 16 68 17 6a 17 6d 17 6f 18     `.b.d.f.h.j.m.o.
     2dd:	71 18 74 19 77 19 7a 1a 7c 1a 80 1b 83 1b 86 1c     q.t.w.z.|.......
     2ed:	89 1c 8d 1d 90 1e 94 1e 98 1f 9c 1f a0 20 a5 20     ............. . 
     2fd:	a9 21 ae 21 b3 22 b8 22 bd 23 c2 23 c7 24 cd 24     .!.!.".".#.#.$.$
     30d:	d3 25 d8 25 de 25 e4 26 ea 26 f0 26 f6 26 fc 26     .%.%.%.&.&.&.&.&
     31d:	50 12 51 13 53 13 54 13 56 14 58 14 59 15 5b 15     P.Q.S.T.V.X.Y.[.
     32d:	5d 15 5f 16 61 16 63 16 65 17 67 17 6a 18 6c 18     ]._.a.c.e.g.j.l.
     33d:	6e 19 71 19 74 1a 76 1a 79 1b 7c 1b 80 1c 83 1c     n.q.t.v.y.|.....
     34d:	86 1d 8a 1e 8d 1e 91 1f 95 1f 99 20 9d 21 a2 21     ........... .!.!
     35d:	a6 22 ab 22 b0 23 b5 24 ba 24 c0 25 c5 25 cb 26     .".".#.$.$.%.%.&
     36d:	d1 26 d7 26 dd 27 e3 27 e9 27 f0 27 f6 28 fc 28     .&.&.'.'.'.'.(.(
     37d:	4d 13 4f 13 50 13 52 14 53 14 55 14 56 15 58 15     M.O.P.R.S.U.V.X.
     38d:	5a 16 5c 16 5e 16 60 17 62 17 64 18 66 18 69 19     Z.\.^.`.b.d.f.i.
     39d:	6b 19 6e 1a 70 1a 73 1b 76 1b 79 1c 7c 1c 80 1d     k.n.p.s.v.y.|...
     3ad:	83 1e 86 1e 8a 1f 8e 20 92 20 96 21 9a 22 9f 22     ....... . .!."."
     3bd:	a4 23 a8 23 ad 24 b3 25 b8 25 be 26 c3 26 c9 27     .#.#.$.%.%.&.&.'
     3cd:	cf 27 d5 28 dc 28 e2 29 e8 29 ef 29 f6 29 fc 29     .'.(.(.).).).).)
     3dd:	4a 13 4c 13 4d 13 4f 14 50 14 52 15 53 15 55 15     J.L.M.O.P.R.S.U.
     3ed:	57 16 59 16 5b 17 5d 17 5f 18 61 18 63 19 66 19     W.Y.[.]._.a.c.f.
     3fd:	68 1a 6a 1a 6d 1b 70 1b 73 1c 76 1c 79 1d 7c 1e     h.j.m.p.s.v.y.|.
     40d:	80 1e 83 1f 87 20 8b 20 8f 21 93 22 97 22 9c 23     ..... . .!.".".#
     41d:	a0 24 a5 25 ab 25 b0 26 b5 27 bb 27 c1 28 c7 28     .$.%.%.&.'.'.(.(
     42d:	cd 29 d4 29 da 2a e1 2a e7 2b ee 2b f5 2b fc 2b     .).).*.*.+.+.+.+
     43d:	48 13 49 13 4a 14 4c 14 4d 14 4f 15 50 15 52 16     H.I.J.L.M.O.P.R.
     44d:	54 16 56 16 58 17 5a 17 5c 18 5e 18 60 19 62 19     T.V.X.Z.\.^.`.b.
     45d:	65 1a 67 1b 6a 1b 6c 1c 6f 1c 72 1d 75 1e 79 1e     e.g.j.l.o.r.u.y.
     46d:	7c 1f 80 20 83 20 87 21 8b 22 8f 23 94 23 98 24     |.. . .!.".#.#.$
     47d:	9d 25 a2 26 a7 27 ad 27 b2 28 b8 29 be 29 c5 2a     .%.&.'.'.(.).).*
     48d:	cb 2b d2 2b d8 2c df 2c e6 2c ed 2d f5 2d fc 2d     .+.+.,.,.,.-.-.-
     49d:	45 13 46 13 47 14 49 14 4a 15 4c 15 4d 15 4f 16     E.F.G.I.J.L.M.O.
     4ad:	51 16 53 17 54 17 56 18 58 18 5a 19 5c 19 5f 1a     Q.S.T.V.X.Z.\._.
     4bd:	61 1a 64 1b 66 1c 69 1c 6c 1d 6f 1e 72 1e 75 1f     a.d.f.i.l.o.r.u.
     4cd:	78 20 7c 20 80 21 83 22 87 23 8c 24 90 24 95 25     x | .!.".#.$.$.%
     4dd:	9a 26 9f 27 a4 28 aa 29 af 29 b5 2a bc 2b c2 2c     .&.'.(.).).*.+.,
     4ed:	c9 2c d0 2d d7 2e de 2e e5 2f ed 2f f4 2f fc 2f     .,.-....././././
     4fd:	42 13 43 14 44 14 46 14 47 15 49 15 4a 16 4c 16     B.C.D.F.G.I.J.L.
     50d:	4e 17 4f 17 51 17 53 18 55 18 57 19 59 1a 5b 1a     N.O.Q.S.U.W.Y.[.
     51d:	5e 1b 60 1b 62 1c 65 1d 68 1d 6b 1e 6e 1f 71 20     ^.`.b.e.h.k.n.q 
     52d:	74 20 78 21 7c 22 80 23 84 24 88 25 8c 25 91 26     t x!|".#.$.%.%.&
     53d:	96 27 9b 28 a1 29 a6 2a ac 2b b2 2c b9 2d bf 2e     .'.(.).*.+.,.-..
     54d:	c6 2e cd 2f d5 30 dc 30 e4 31 ec 31 f4 31 fc 31     .../.0.0.1.1.1.1
     55d:	3f 13 40 14 41 14 43 15 44 15 46 15 47 16 49 16     ?.@.A.C.D.F.G.I.
     56d:	4a 17 4c 17 4e 18 4f 18 51 19 53 19 55 1a 58 1b     J.L.N.O.Q.S.U.X.
     57d:	5a 1b 5c 1c 5f 1c 61 1d 64 1e 67 1f 6a 1f 6d 20     Z.\._.a.d.g.j.m 
     58d:	70 21 74 22 78 23 7b 24 80 25 84 26 88 27 8d 28     p!t"x#{$.%.&.'.(
     59d:	92 29 97 2a 9d 2b a3 2c a9 2d af 2e b6 2f bd 30     .).*.+.,.-.../.0
     5ad:	c4 31 cb 31 d3 32 db 33 e3 33 eb 34 f3 34 fb 34     .1.1.2.3.3.4.4.4
     5bd:	3c 14 3d 14 3e 14 40 15 41 15 42 16 44 16 45 16     <.=.>.@.A.B.D.E.
     5cd:	47 17 49 17 4a 18 4c 19 4e 19 50 1a 52 1a 54 1b     G.I.J.L.N.P.R.T.
     5dd:	56 1c 58 1c 5b 1d 5d 1e 60 1e 63 1f 66 20 69 21     V.X.[.].`.c.f i!
     5ed:	6c 22 70 23 73 24 77 25 7b 26 80 27 84 28 89 29     l"p#s$w%{&.'.(.)
     5fd:	8e 2a 93 2b 99 2c 9f 2d a5 2f ab 30 b2 31 b9 32     .*.+.,.-./.0.1.2
     60d:	c1 33 c8 34 d0 35 d9 35 e1 36 ea 36 f2 37 fb 37     .3.4.5.5.6.6.7.7
     61d:	39 14 3a 14 3b 15 3d 15 3e 15 3f 16 41 16 42 17     9.:.;.=.>.?.A.B.
     62d:	43 17 45 18 47 18 48 19 4a 19 4c 1a 4e 1b 50 1b     C.E.G.H.J.L.N.P.
     63d:	52 1c 54 1d 57 1d 59 1e 5c 1f 5f 20 62 21 65 22     R.T.W.Y.\._ b!e"
     64d:	68 22 6b 23 6f 24 73 25 77 27 7b 28 80 29 84 2a     h"k#o$s%w'{(.).*
     65d:	89 2b 8f 2d 94 2e 9a 2f a1 30 a7 32 ae 33 b6 34     .+.-.../.0.2.3.4
     66d:	be 35 c6 36 ce 37 d6 38 df 39 e8 39 f2 3a fb 3a     .5.6.7.8.9.9.:.:
     67d:	36 14 37 14 38 15 39 15 3b 16 3c 16 3d 16 3f 17     6.7.8.9.;.<.=.?.
     68d:	40 17 41 18 43 18 45 19 46 1a 48 1a 4a 1b 4c 1c     @.A.C.E.F.H.J.L.
     69d:	4e 1c 50 1d 53 1e 55 1f 58 1f 5a 20 5d 21 60 22     N.P.S.U.X.Z ]!`"
     6ad:	63 23 67 24 6a 25 6e 26 72 28 76 29 7b 2a 80 2b     c#g$j%n&r(v){*.+
     6bd:	85 2d 8a 2e 90 30 96 31 9c 32 a3 34 aa 35 b2 37     .-...0.1.2.4.5.7
     6cd:	ba 38 c2 39 cb 3a d4 3b dd 3c e7 3d f1 3d fb 3e     .8.9.:.;.<.=.=.>
     6dd:	33 14 34 14 35 15 36 15 37 16 38 16 3a 17 3b 17     3.4.5.6.7.8.:.;.
     6ed:	3c 18 3e 18 3f 19 41 19 43 1a 44 1b 46 1b 48 1c     <.>.?.A.C.D.F.H.
     6fd:	4a 1d 4c 1d 4e 1e 51 1f 53 20 56 21 59 22 5b 23     J.L.N.Q.S V!Y"[#
     70d:	5f 24 62 25 65 26 69 27 6d 29 71 2a 76 2b 7a 2d     _$b%e&i'm)q*v+z-
     71d:	80 2e 85 30 8b 31 91 33 97 35 9e 36 a6 38 ae 39     ...0.1.3.5.6.8.9
     72d:	b6 3b bf 3c c8 3e d1 3f db 40 e5 41 f0 41 fa 42     .;.<.>.?.@.A.A.B
     73d:	30 14 31 15 32 15 33 15 34 16 35 16 36 17 38 17     0.1.2.3.4.5.6.8.
     74d:	39 18 3a 18 3c 19 3d 1a 3f 1a 40 1b 42 1c 44 1c     9.:.<.=.?.@.B.D.
     75d:	46 1d 48 1e 4a 1f 4c 20 4f 20 51 21 54 22 57 23     F.H.J.L O Q!T"W#
     76d:	5a 25 5d 26 60 27 64 28 68 2a 6c 2b 70 2d 75 2e     Z%]&`'d(h*l+p-u.
     77d:	7a 30 80 31 85 33 8c 35 92 37 99 39 a1 3b a9 3c     z0.1.3.5.7.9.;.<
     78d:	b2 3e bb 40 c4 42 ce 43 d9 44 e4 45 ef 46 fa 46     .>.@.B.C.D.E.F.F
     79d:	2d 14 2e 15 2f 15 30 16 31 16 32 16 33 17 34 17     -.../.0.1.2.3.4.
     7ad:	35 18 36 19 38 19 39 1a 3b 1a 3c 1b 3e 1c 40 1d     5.6.8.9.;.<.>.@.
     7bd:	41 1d 43 1e 45 1f 48 20 4a 21 4c 22 4f 23 52 24     A.C.E.H J!L"O#R$
     7cd:	54 25 58 27 5b 28 5e 29 62 2b 66 2c 6b 2e 6f 30     T%X'[(^)b+f,k.o0
     7dd:	74 31 7a 33 80 35 86 37 8d 39 94 3b 9c 3e a4 40     t1z3.5.7.9.;.>.@
     7ed:	ad 42 b6 44 c0 46 cb 47 d6 49 e2 4a ed 4b f9 4b     .B.D.F.G.I.J.K.K
     7fd:	29 14 2a 15 2b 15 2c 16 2d 16 2e 17 2f 17 30 18     ).*.+.,.-.../.0.
     80d:	31 18 33 19 34 19 35 1a 37 1b 38 1b 3a 1c 3b 1d     1.3.4.5.7.8.:.;.
     81d:	3d 1e 3f 1f 41 1f 43 20 45 21 47 22 4a 24 4c 25     =.?.A.C E!G"J$L%
     82d:	4f 26 52 27 55 29 59 2a 5c 2c 60 2d 65 2f 69 31     O&R'U)Y*\,`-e/i1
     83d:	6e 33 73 35 79 37 80 39 86 3c 8e 3e 96 41 9e 43     n3s5y7.9.<.>.A.C
     84d:	a7 46 b1 48 bc 4a c7 4d d3 4e df 50 ec 51 f9 51     .F.H.J.M.N.P.Q.Q
     85d:	26 14 27 15 28 15 29 16 2a 16 2b 17 2c 17 2d 18     &.'.(.).*.+.,.-.
     86d:	2e 18 2f 19 30 1a 31 1a 33 1b 34 1c 35 1c 37 1d     ../.0.1.3.4.5.7.
     87d:	39 1e 3a 1f 3c 20 3e 21 40 22 42 23 45 24 47 25     9.:.< >!@"B#E$G%
     88d:	4a 27 4d 28 50 29 53 2b 56 2d 5a 2f 5e 30 63 32     J'M(P)S+V-Z/^0c2
     89d:	68 35 6d 37 72 39 79 3c 80 3e 87 41 8f 44 98 47     h5m7r9y<.>.A.D.G
     8ad:	a1 4a ac 4d b7 50 c3 52 cf 55 dd 57 ea 58 f8 58     .J.M.P.R.U.W.X.X
     8bd:	23 15 24 15 24 15 25 16 26 16 27 17 28 17 29 18     #.$.$.%.&.'.(.).
     8cd:	2a 19 2b 19 2c 1a 2d 1a 2e 1b 30 1c 31 1d 32 1d     *.+.,.-...0.1.2.
     8dd:	34 1e 36 1f 37 20 39 21 3b 22 3d 23 3f 25 41 26     4.6.7 9!;"=#?%A&
     8ed:	44 27 47 29 4a 2a 4d 2c 50 2e 54 30 58 32 5c 34     D'G)J*M,P.T0X2\4
     8fd:	61 36 66 39 6b 3b 71 3e 78 41 80 44 88 48 91 4b     a6f9k;q>xA.D.H.K
     90d:	9a 4f a5 52 b1 56 be 59 cb 5c d9 5e e8 60 f8 61     .O.R.V.Y.\.^.`.a
     91d:	20 15 20 15 21 16 22 16 23 16 23 17 24 18 25 18      . .!.".#.#.$.%.
     92d:	26 19 27 19 28 1a 29 1b 2a 1b 2b 1c 2d 1d 2e 1e     &.'.(.).*.+.-...
     93d:	2f 1f 31 20 32 21 34 22 36 23 38 24 3a 25 3c 26     /.1 2!4"6#8$:%<&
     94d:	3e 28 41 29 43 2b 46 2d 49 2f 4d 31 51 33 55 35     >(A)C+F-I/M1Q3U5
     95d:	59 38 5e 3b 63 3e 69 41 70 44 77 48 80 4c 89 50     Y8^;c>iApDwH.L.P
     96d:	93 54 9e 58 aa 5d b7 61 c6 65 d6 68 e6 6a f7 6b     .T.X.].a.e.h.j.k
     97d:	1c 15 1d 15 1e 16 1e 16 1f 17 20 17 20 18 21 18     .......... . .!.
     98d:	22 19 23 19 24 1a 25 1b 26 1c 27 1c 28 1d 29 1e     ".#.$.%.&.'.(.).
     99d:	2a 1f 2c 20 2d 21 2f 22 30 23 32 24 34 26 36 27     *., -!/"0#2$4&6'
     9ad:	38 28 3a 2a 3d 2c 40 2e 42 30 46 32 49 34 4d 37     8(:*=,@.B0F2I4M7
     9bd:	51 39 56 3c 5b 40 61 43 67 47 6e 4b 76 50 80 55     Q9V<[@aCgGnKvP.U
     9cd:	8a 5a 95 5f a2 65 b0 6a c0 6f d1 73 e3 76 f6 78     .Z._.e.j.o.s.v.x
     9dd:	19 15 1a 15 1a 16 1b 16 1b 17 1c 17 1d 18 1d 18     ................
     9ed:	1e 19 1f 1a 20 1a 21 1b 21 1c 22 1d 23 1d 24 1e     .... .!.!.".#.$.
     9fd:	26 1f 27 20 28 21 29 22 2b 23 2c 25 2e 26 30 27     &.' (!)"+#,%.&0'
     a0d:	32 29 34 2b 36 2c 39 2e 3b 31 3e 33 41 35 45 38     2)4+6,9.;1>3A5E8
     a1d:	49 3b 4d 3e 52 42 58 46 5e 4a 65 4f 6c 54 75 5a     I;M>RBXF^JeOlTuZ
     a2d:	80 60 8b 67 98 6e a7 75 b8 7b cb 81 df 85 f5 88     .`.g.n.u.{......
     a3d:	16 15 16 15 17 16 17 16 18 17 18 17 19 18 19 18     ................
     a4d:	1a 19 1b 1a 1b 1a 1c 1b 1d 1c 1e 1d 1f 1e 20 1e     .............. .
     a5d:	21 1f 22 20 23 21 24 23 25 24 27 25 28 26 2a 28     !." #!$#%$'%(&*(
     a6d:	2b 29 2d 2b 2f 2d 32 2f 34 31 37 34 39 36 3d 39     +)-+/-2/417496=9
     a7d:	40 3c 44 40 49 44 4e 48 53 4d 5a 52 61 58 6a 5f     @<D@IDNHSMZRaXj_
     a8d:	74 67 80 6f 8d 78 9d 81 af 8a c4 93 db 99 f3 9d     tg.o.x..........
     a9d:	12 15 13 15 13 16 14 16 14 17 14 17 15 18 15 19     ................
     aad:	16 19 17 1a 17 1b 18 1b 19 1c 19 1d 1a 1e 1b 1f     ................
     abd:	1c 20 1d 21 1e 22 1f 23 20 24 21 25 22 27 23 28     . .!.".# $!%"'#(
     acd:	25 2a 27 2c 28 2e 2a 30 2c 32 2f 35 31 37 34 3a     %*',(.*0,2/5174:
     add:	37 3e 3b 42 3f 46 43 4a 48 50 4e 56 55 5d 5d 65     7>;B?FCJHPNVU]]e
     aed:	67 6e 72 78 80 83 90 90 a3 9d ba a9 d4 b3 f1 b9     gnrx............
     afd:	0f 15 0f 15 10 16 10 16 10 17 11 17 11 18 12 19     ................
     b0d:	12 19 12 1a 13 1b 13 1b 14 1c 15 1d 15 1e 16 1f     ................
     b1d:	17 20 17 21 18 22 19 23 1a 24 1b 26 1c 27 1d 29     . .!.".#.$.&.'.)
     b2d:	1e 2a 20 2c 21 2e 23 30 24 33 26 35 29 38 2b 3b     .* ,!.#0$3&5)8+;
     b3d:	2e 3f 31 43 34 47 38 4d 3c 52 41 59 48 61 4f 6a     .?1C4G8M<RAYHaOj
     b4d:	58 75 62 81 6f 90 80 a0 94 b3 ad c6 cb d7 ed e2     Xub.o...........
     b5d:	0b 15 0c 15 0c 16 0c 16 0d 17 0d 18 0d 18 0e 19     ................
     b6d:	0e 19 0e 1a 0f 1b 0f 1b 10 1c 10 1d 10 1e 11 1f     ................
     b7d:	12 20 12 21 13 22 13 23 14 24 15 26 16 27 17 29     . .!.".#.$.&.'.)
     b8d:	18 2b 19 2c 1a 2f 1b 31 1c 33 1e 36 20 39 22 3c     .+.,./.1.3.6 9"<
     b9d:	24 40 26 44 29 49 2c 4e 30 55 34 5c 39 65 3f 6f     $@&D)I,N0U4\9e?o
     bad:	47 7b 50 8a 5c 9d 6b b3 80 ce 9a ee be ff e8 ff     G{P.\.k.........
     bbd:	08 15 08 15 08 16 09 16 09 17 09 18 09 18 0a 19     ................
     bcd:	0a 19 0a 1a 0a 1b 0b 1b 0b 1c 0b 1d 0c 1e 0c 1f     ................
     bdd:	0c 20 0d 21 0d 22 0e 23 0e 25 0f 26 0f 27 10 29     . .!.".#.%.&.'.)
     bed:	11 2b 12 2d 12 2f 13 31 14 34 15 36 17 39 18 3d     .+.-./.1.4.6.9.=
     bfd:	1a 41 1b 45 1d 4a 20 50 22 57 26 5e 29 68 2e 73     .A.E.J P"W&^)h.s
     c0d:	34 81 3b 93 45 a9 52 c6 65 ee 80 ff a7 ff df ff     4.;.E.R.e.......
     c1d:	05 15 05 16 05 16 05 16 05 17 05 18 05 18 06 19     ................
     c2d:	06 19 06 1a 06 1b 06 1c 06 1c 07 1d 07 1e 07 1f     ................
     c3d:	07 20 08 21 08 22 08 23 08 25 09 26 09 28 09 29     . .!.".#.%.&.(.)
     c4d:	0a 2b 0a 2d 0b 2f 0b 31 0c 34 0d 37 0d 3a 0e 3d     .+.-./.1.4.7.:.=
     c5d:	0f 41 10 46 12 4b 13 51 15 58 17 60 19 6a 1c 76     .A.F.K.Q.X.`.j.v
     c6d:	20 85 24 99 2b b3 34 d7 41 ff 58 ff 80 ff cb ff      .$.+.4.A.X.....
     c7d:	01 15 01 16 01 16 01 17 01 17 01 18 01 18 02 19     ................
     c8d:	02 19 02 1a 02 1b 02 1c 02 1c 02 1d 02 1e 02 1f     ................
     c9d:	02 20 02 21 02 22 02 23 02 25 03 26 03 28 03 29     . .!.".#.%.&.(.)
     cad:	03 2b 03 2d 03 2f 03 31 04 34 04 37 04 3a 04 3e     .+.-./.1.4.7.:.>
     cbd:	05 42 05 46 06 4b 06 51 07 58 07 61 08 6b 09 78     .B.F.K.Q.X.a.k.x
     ccd:	0a 88 0c 9d 0e b9 12 e2 17 ff 20 ff 34 ff 80 ff     .......... .4...

00000cdd <_pal>:
     cdd:	00 00 50 00 a0 00 f0 00 01 20 51 20 a1 20 f1 20     ..P...... Q . . 
     ced:	02 40 52 40 a2 40 f2 40 03 60 53 60 a3 60 f3 60     .@R@.@.@.`S`.`.`
     cfd:	04 80 54 80 a4 80 f4 80 05 a0 55 a0 a5 a0 f5 a0     ..T.......U.....
     d0d:	06 c0 56 c0 a6 c0 f6 c0 07 e0 57 e0 a7 e0 f7 e0     ..V.......W.....
     d1d:	00 04 50 04 a0 04 f0 04 01 24 51 24 a1 24 f1 24     ..P......$Q$.$.$
     d2d:	02 44 52 44 a2 44 f2 44 03 64 53 64 a3 64 f3 64     .DRD.D.D.dSd.d.d
     d3d:	04 84 54 84 a4 84 f4 84 05 a4 55 a4 a5 a4 f5 a4     ..T.......U.....
     d4d:	06 c4 56 c4 a6 c4 f6 c4 07 e4 57 e4 a7 e4 f7 e4     ..V.......W.....
     d5d:	00 09 50 09 a0 09 f0 09 01 29 51 29 a1 29 f1 29     ..P......)Q).).)
     d6d:	02 49 52 49 a2 49 f2 49 03 69 53 69 a3 69 f3 69     .IRI.I.I.iSi.i.i
     d7d:	04 89 54 89 a4 89 f4 89 05 a9 55 a9 a5 a9 f5 a9     ..T.......U.....
     d8d:	06 c9 56 c9 a6 c9 f6 c9 07 e9 57 e9 a7 e9 f7 e9     ..V.......W.....
     d9d:	00 0d 50 0d a0 0d f0 0d 01 2d 51 2d a1 2d f1 2d     ..P......-Q-.-.-
     dad:	02 4d 52 4d a2 4d f2 4d 03 6d 53 6d a3 6d f3 6d     .MRM.M.M.mSm.m.m
     dbd:	04 8d 54 8d a4 8d f4 8d 05 ad 55 ad a5 ad f5 ad     ..T.......U.....
     dcd:	06 cd 56 cd a6 cd f6 cd 07 ed 57 ed a7 ed f7 ed     ..V.......W.....
     ddd:	00 12 50 12 a0 12 f0 12 01 32 51 32 a1 32 f1 32     ..P......2Q2.2.2
     ded:	02 52 52 52 a2 52 f2 52 03 72 53 72 a3 72 f3 72     .RRR.R.R.rSr.r.r
     dfd:	04 92 54 92 a4 92 f4 92 05 b2 55 b2 a5 b2 f5 b2     ..T.......U.....
     e0d:	06 d2 56 d2 a6 d2 f6 d2 07 f2 57 f2 a7 f2 f7 f2     ..V.......W.....
     e1d:	00 16 50 16 a0 16 f0 16 01 36 51 36 a1 36 f1 36     ..P......6Q6.6.6
     e2d:	02 56 52 56 a2 56 f2 56 03 76 53 76 a3 76 f3 76     .VRV.V.V.vSv.v.v
     e3d:	04 96 54 96 a4 96 f4 96 05 b6 55 b6 a5 b6 f5 b6     ..T.......U.....
     e4d:	06 d6 56 d6 a6 d6 f6 d6 07 f6 57 f6 a7 f6 f7 f6     ..V.......W.....
     e5d:	00 1b 50 1b a0 1b f0 1b 01 3b 51 3b a1 3b f1 3b     ..P......;Q;.;.;
     e6d:	02 5b 52 5b a2 5b f2 5b 03 7b 53 7b a3 7b f3 7b     .[R[.[.[.{S{.{.{
     e7d:	04 9b 54 9b a4 9b f4 9b 05 bb 55 bb a5 bb f5 bb     ..T.......U.....
     e8d:	06 db 56 db a6 db f6 db 07 fb 57 fb a7 fb f7 fb     ..V.......W.....
     e9d:	00 1f 50 1f a0 1f f0 1f 01 3f 51 3f a1 3f f1 3f     ..P......?Q?.?.?
     ead:	02 5f 52 5f a2 5f f2 5f 03 7f 53 7f a3 7f f3 7f     ._R_._._..S.....
     ebd:	04 9f 54 9f a4 9f f4 9f 05 bf 55 bf a5 bf f5 bf     ..T.......U.....
     ecd:	06 df 56 df a6 df f6 df 07 ff 57 ff a7 ff f7 ff     ..V.......W.....

00000edd <Cell16x16>:
     edd:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
     eed:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
     efd:	e0 e0 ff ff ff ff ff ff ff ff ff ff ff ff e0 e0     ................
     f0d:	e0 e0 ff ff ff ff ff ff ff ff ff ff ff ff e0 e0     ................
     f1d:	e0 e0 ff ff ff ff ff ff ff ff ff ff ff ff e0 e0     ................
     f2d:	e0 e0 ff ff ff ff ff ff ff ff ff ff ff ff e0 e0     ................
     f3d:	e0 e0 ff ff ff ff ff ff ff ff ff ff ff ff e0 e0     ................
     f4d:	e0 e0 ff ff ff ff ff ff ff ff ff ff ff ff e0 e0     ................
     f5d:	e0 e0 ff ff ff ff ff ff ff ff ff ff ff ff e0 e0     ................
     f6d:	e0 e0 ff ff ff ff ff ff ff ff ff ff ff ff e0 e0     ................
     f7d:	e0 e0 ff ff ff ff ff ff ff ff ff ff ff ff e0 e0     ................
     f8d:	e0 e0 ff ff ff ff ff ff ff ff ff ff ff ff e0 e0     ................
     f9d:	e0 e0 ff ff ff ff ff ff ff ff ff ff ff ff e0 e0     ................
     fad:	e0 e0 ff ff ff ff ff ff ff ff ff ff ff ff e0 e0     ................
     fbd:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
     fcd:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0     ................
     fdd:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     fed:	ff ff ff ff ff fb f6 f6 f6 f6 ff ff ff ff ff ff     ................
     ffd:	ff ff ff fb f2 e9 e4 e4 e4 e4 e9 f2 fb ff ff ff     ................
    100d:	ff ff fb ed e4 e0 e0 e0 e0 e0 e0 e4 ed fb ff ff     ................
    101d:	ff ff f2 e4 e0 e0 e0 e0 e0 e0 e0 e0 e4 f2 ff ff     ................
    102d:	ff fb e9 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e9 f6 ff     ................
    103d:	ff f6 e4 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e4 f2 fb     ................
    104d:	ff d2 e4 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e9 f6     ................
    105d:	db d2 e4 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e9 f6     ................
    106d:	ff d6 e4 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e9 f6     ................
    107d:	ff f6 e9 e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e4 f2 ff     ................
    108d:	ff ff f2 e4 e0 e0 e0 e0 e0 e0 e0 e0 e0 e9 fb ff     ................
    109d:	ff ff fb ed e4 e0 e0 e0 e0 e0 e0 e0 e9 f6 ff ff     ................
    10ad:	ff ff ff f6 cd e9 e4 e0 e0 e0 e4 e9 f6 ff ff ff     ................
    10bd:	ff ff ff ff fb f6 f2 e9 e9 e9 f2 fb ff ff ff ff     ................
    10cd:	ff ff ff ff ff db db d6 d6 d6 db ff ff ff ff ff     ................
    10dd:	ff ff ff ff 92 92 92 92 92 92 92 92 ff ff ff ff     ................
    10ed:	ff ff ff 92 1c 1c 1c 1c 1c 1c 1c 1c 92 ff ff ff     ................
    10fd:	ff ff ff 92 1c 1c 1c 1c 1c 1c 1c 1c 92 ff ff ff     ................
    110d:	ff ff ff 92 1c 1c 1c 1c 1c 1c 1c 1c 92 ff ff ff     ................
    111d:	ff ff ff 92 1c 1c 1c 1c 1c 1c 1c 1c 92 ff ff ff     ................
    112d:	ff ff ff 92 1c 1c 1c 1c 1c 1c 1c 1c 92 ff ff ff     ................
    113d:	ff ff ff 92 1c 1c 1c 1c 1c 1c 1c 1c 92 ff ff ff     ................
    114d:	ff 92 92 92 1c 1c 1c 1c 3c 3c 1c 1c 92 92 92 ff     ........<<......
    115d:	92 1c 1c 1c 1c 1c 3c 1c 1c 3c 1c 1c 1c 1c 1c 92     ......<..<......
    116d:	ff 92 1c 1c 3c 3c 3c 3c 1c 3c 1c 1c 1c 1c 92 ff     ....<<<<.<......
    117d:	ff ff 92 1c 1c 1c 1c 3c 1c 1c 1c 1c 1c 92 ff ff     .......<........
    118d:	ff ff ff 92 1c 1c 1c 3c 1c 1c 1c 1c 92 ff ff ff     .......<........
    119d:	ff ff ff ff 92 1c 1c 1c 1c 1c 1c 92 ff ff ff ff     ................
    11ad:	ff ff ff ff ff 92 1c 1c 1c 1c 92 ff ff ff ff ff     ................
    11bd:	ff ff ff ff ff ff 92 1c 1c 92 ff ff ff ff ff ff     ................
    11cd:	ff ff ff ff ff ff ff 92 92 ff ff ff ff ff ff ff     ................
    11dd:	00 00 00 00 00 00 00 27 26 00 00 00 00 00 00 00     .......'&.......
    11ed:	00 00 00 00 00 00 02 03 02 01 00 00 00 00 00 00     ................
    11fd:	00 00 00 00 00 01 03 03 03 01 00 00 00 00 00 00     ................
    120d:	00 00 00 00 00 02 03 03 03 02 00 00 00 01 01 00     ................
    121d:	00 00 00 00 01 02 03 03 03 02 01 00 01 02 02 01     ................
    122d:	00 01 01 01 01 02 03 03 03 03 01 00 01 02 02 01     ................
    123d:	00 02 03 02 01 02 03 03 03 03 02 00 01 02 03 02     ................
    124d:	01 02 03 02 01 02 03 03 03 03 03 01 01 02 03 03     ................
    125d:	01 02 03 03 02 03 03 03 03 03 03 02 02 03 03 03     ................
    126d:	01 02 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    127d:	01 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    128d:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    129d:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    12ad:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    12bd:	03 03 03 03 03 03 03 03 03 03 03 03 03 03 03 03     ................
    12cd:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    12dd:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    12ed:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    12fd:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    130d:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    131d:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    132d:	07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    133d:	07 07 07 07 07 07 07 07 07 03 03 07 07 07 07 07     ................
    134d:	07 07 07 07 07 07 07 07 03 01 01 02 03 07 07 07     ................
    135d:	03 07 07 07 07 07 03 03 02 01 00 00 01 03 07 07     ................
    136d:	01 03 07 07 07 03 01 01 01 00 00 00 01 02 07 07     ................
    137d:	00 02 07 07 07 02 01 00 00 00 00 00 01 02 02 02     ................
    138d:	00 01 03 03 02 01 00 00 00 00 00 00 01 02 02 02     ................
    139d:	00 00 02 02 01 00 00 00 00 00 00 00 00 01 01 02     ................
    13ad:	00 00 01 02 01 00 00 00 00 00 00 00 00 00 01 02     ................
    13bd:	00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    13dd:	ff ff ff ff ff ff ff fb fb ff ff ff ff ff ff ff     ................
    13ed:	ff ff ff ff db db bb bb bb bb db ff ff ff ff ff     ................
    13fd:	ff ff ff b7 4b 4b 4b 4a 4a 4b 4b 93 ff ff ff ff     ....KKKJJKK.....
    140d:	ff ff b7 4b 03 02 01 01 01 01 02 4b b7 ff ff ff     ...K.......K....
    141d:	ff db 4f 03 03 01 00 00 00 00 01 02 4f db ff ff     ..O.........O...
    142d:	ff b7 27 03 02 00 00 00 00 00 00 01 27 93 ff ff     ..'.........'...
    143d:	bb 6f 03 02 01 00 00 00 00 00 00 00 02 4b b7 ff     .o...........K..
    144d:	b7 4b 03 01 00 00 00 00 00 00 00 00 01 03 6f db     .K............o.
    145d:	b7 4b 02 01 00 00 00 00 00 00 00 00 01 03 6f db     .K............o.
    146d:	b7 4b 03 01 00 00 00 00 00 00 00 01 02 27 b7 ff     .K...........'..
    147d:	bb 6f 03 02 00 00 00 00 00 00 00 02 03 6f db ff     .o...........o..
    148d:	ff b7 27 03 01 00 00 00 00 00 01 03 4b b7 ff ff     ..'.........K...
    149d:	ff db 6f 27 03 02 01 01 01 02 03 4b b7 ff ff ff     ..o'.......K....
    14ad:	ff ff db 93 4b 27 03 02 03 03 4b b7 ff ff ff ff     ....K'....K.....
    14bd:	ff ff ff ff b7 93 4b 2b 27 4b 93 ff ff ff ff ff     ......K+'K......
    14cd:	ff ff ff ff ff ff db db db ff ff ff ff ff ff ff     ................
    14dd:	ff ff ff ff b6 92 92 92 92 92 92 db ff ff ff ff     ................
    14ed:	ff ff db 92 92 92 91 b1 b1 91 92 92 b6 ff ff ff     ................
    14fd:	ff ba 92 92 b5 fc fc fc fc fc d8 91 92 b6 ff ff     ................
    150d:	df 92 92 d8 fc fc fc fc fc fc fc fc 91 92 ba ff     ................
    151d:	92 92 b5 fc fc d8 fc fc fc fc d8 fc d8 92 91 ff     ................
    152d:	92 91 fc fc 91 91 d8 fc fc 91 91 d8 fc 91 92 db     ................
    153d:	92 b1 fc d8 91 b1 b5 fc d8 91 b1 b5 fc b5 92 b6     ................
    154d:	92 b5 fc fc b5 b5 fc fc fc b5 b5 fc fc d8 92 b6     ................
    155d:	92 b5 fc fc fc fc fc fc fc fc fc fc fc b5 92 b6     ................
    156d:	92 91 fc fc fc fc fc fc fc fc fc fc fc b1 92 da     ................
    157d:	92 92 d8 fc fc fc fc fc fc fc fc fc fc 92 91 ff     ................
    158d:	bb 92 91 fc fc fc fc fc fc fc fc fc 91 92 b5 ff     ................
    159d:	ff b6 92 91 d8 fc fc fc fc fc fc 91 92 91 fe ff     ................
    15ad:	ff ff 92 92 92 b1 b5 d8 b5 b5 92 92 91 fe ff ff     ................
    15bd:	ff ff ff b6 91 92 92 92 92 92 91 b5 fe ff ff ff     ................
    15cd:	ff ff ff ff ff da b6 b2 b6 d9 ff ff ff ff ff ff     ................
    15dd:	ff ff ff ff ff ff ff db db ff ff ff ff ff ff ff     ................
    15ed:	ff ff ff ff db 92 92 92 92 92 92 b6 ff ff ff ff     ................
    15fd:	ff ff ff 92 92 92 92 96 96 92 92 92 92 df ff ff     ................
    160d:	ff ff 92 92 92 bb db ff ff df bb 92 92 92 ff ff     ................
    161d:	ff db 92 92 df 92 92 db df 92 92 db 92 92 db ff     ................
    162d:	ff db 92 b6 db 92 96 b6 db 92 96 b6 bb 92 b6 ff     ................
    163d:	ff db 92 92 ff b6 b6 ff ff b6 b6 ff b6 92 ba ff     ................
    164d:	ff ff 92 92 b6 ff ff ff ff ff ff ba 92 92 df ff     ................
    165d:	ff ff db 92 92 92 b6 db db b6 92 92 92 db ff ff     ................
    166d:	ff ff ff df 96 92 92 92 92 92 92 92 db ff ff ff     ................
    167d:	ff ff ff ff db 92 92 92 92 92 92 b6 ff ff ff ff     ................
    168d:	ff ff ff df 92 92 92 96 96 92 92 92 bb ff ff ff     ................
    169d:	ff ff ff db 92 92 b6 db db b6 92 92 b6 ff ff ff     ................
    16ad:	ff ff ff ff 96 92 92 92 92 92 92 92 ff ff ff ff     ................
    16bd:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    16cd:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

000016dd <_pattern1>:
    16dd:	01 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00     ................
    16ed:	00 00 01 00 00 00 00 00 00 00 00 01 00 00 00 00     ................
    16fd:	00 00 00 00 01 00 00 00 00 00 00 00 00 01 00 00     ................
    170d:	00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 01     ................

0000171d <_pattern2>:
    171d:	01 00 00 00 00 00 00 00 02 01 00 00 00 00 00 01     ................
    172d:	02 02 01 00 00 00 01 02 02 02 02 01 00 01 02 02     ................
    173d:	02 02 02 02 01 02 02 02 02 02 02 02 02 02 02 02     ................
    174d:	02 02 02 02 02 02 02 02 03 03 03 03 03 03 03 03     ................

0000175d <_pattern3>:
	...
    177d:	04 04 04 04 04 04 04 04 05 05 05 05 05 05 05 05     ................
	...

0000179d <_pattern4>:
    179d:	00 00 00 07 00 00 00 00 00 08 00 00 00 07 00 00     ................
	...
    17b5:	00 07 00 00 08 00 00 00 00 00 00 00 00 00 00 07     ................
    17c5:	00 00 07 00 00 08 00 00 08 00 00 00 00 00 00 00     ................
    17d5:	00 00 00 00 08 00 00 00                             ........

000017dd <textures32>:
    17dd:	64 96 96 8a 8a 8a 75 75 75 75 64 64 64 75 75 75     d.....uuuuddduuu
    17ed:	75 75 8a 8a 8a 96 96 96 a2 a2 b0 b7 b7 b7 c4 8a     uu..............
    17fd:	96 cd cd cd b7 b0 b0 a2 96 96 96 96 a2 b0 b0 b0     ................
    180d:	b0 cd cd cd d7 d7 d7 e1 e1 ed f0 f3 f5 f5 fa c4     ................
    181d:	96 cd 96 b7 b7 b0 a2 96 a2 75 a2 a2 b0 b0 b0 b0     .........u......
    182d:	a2 cd 26 d7 d7 d7 96 e7 ed f3 f3 f5 f7 96 fa c4     ..&.............
    183d:	8a b7 b0 b0 96 8a 75 75 8a 8a 96 96 a2 b0 b7 b7     ......uu........
    184d:	c4 cd 26 99 e1 e7 ed e7 ed f3 f3 f5 f7 fa fa c4     ..&.............
    185d:	75 b0 b0 b7 a2 96 96 a2 a2 b0 b0 b7 c4 cd cd cd     u...............
    186d:	c4 d7 26 9a e7 ed f3 f3 f5 f7 fa fa f5 fa f7 c4     ..&.............
    187d:	75 a2 96 a2 96 96 a2 b0 b0 b0 b7 c4 cd cd cd d7     u...............
    188d:	c4 dc 26 3e ed f0 f5 f5 f7 fa fa fa f5 f5 f3 b7     ..&>............
    189d:	64 96 96 b0 a2 a2 b0 b0 b0 cd cd cd cd d7 d7 dc     d...............
    18ad:	d7 ed 26 1c f3 f3 fa fa fa fa fa f7 f0 f3 f3 b0     ..&.............
    18bd:	64 96 96 b0 a2 b0 b0 b7 b7 cd cd cd d7 d7 dc e1     d...............
    18cd:	dc ed 26 b1 f5 f7 fb fa fa fa f5 f5 ed f0 ed a2     ..&.............
    18dd:	64 a2 96 c4 b0 b0 b0 cd cd cd cd d7 d7 dc e1 ed     d...............
    18ed:	e7 f3 26 b8 fa fa fb fa f7 f3 f3 f0 e7 d7 e1 a2     ..&.............
    18fd:	64 a2 8a c4 b0 b7 b7 cd cd cd d7 d7 dc e1 e7 f0     d...............
    190d:	ed f3 26 b9 fa fa fb fa f5 f3 f3 f0 e1 b7 dc 96     ..&.............
    191d:	75 b0 b0 c4 cd cd cd cd d7 d7 dc e1 ed f0 f3 f3     u...............
    192d:	f0 fa 26 ba fa f7 fa f3 f0 f0 e7 e1 cd d7 d7 8a     ..&.............
    193d:	75 b0 b7 d7 cd cd cd d7 d7 e1 e7 ed f0 f3 f5 f7     u...............
    194d:	f5 fa 26 ba f5 f3 f5 f3 ed e1 dc d7 c4 cd cd 8a     ..&.............
    195d:	8a b7 cd d7 cd d7 d7 dc e1 e7 f0 f0 f5 f5 f7 fa     ................
    196d:	f5 fa 26 b9 f5 f3 f5 f0 e7 dc dc d7 b7 cd cd 8a     ..&.............
    197d:	8a cd cd dc d7 dc dc e7 ed f0 f3 f5 f7 f7 fa fa     ................
    198d:	f5 f7 26 b1 f3 ed f0 e1 d7 d7 cd cd b7 b7 b0 75     ..&............u
    199d:	8a cd d7 e1 dc e1 e1 ed f0 f3 f5 f7 fa fa fa fa     ................
    19ad:	f3 f5 26 a4 f0 e7 ed dc d7 cd cd cd b7 b7 b0 75     ..&............u
    19bd:	96 d7 a2 e1 e1 e7 ed f0 f3 f5 f7 fa fa fa fa f5     ................
    19cd:	f0 f3 26 01 e7 dc e1 d7 cd cd cd b7 96 96 a2 75     ..&............u
    19dd:	96 d7 e1 f0 ed f3 f3 f5 f7 fa fa fa fa f7 f5 f5     ................
    19ed:	ed f0 26 66 dc d7 e1 cd cd cd b0 b0 8a a2 96 64     ..&f...........d
    19fd:	a2 e1 e7 f0 f0 f3 f3 f7 f7 fa fa fa fa f5 f3 f3     ................
    1a0d:	e1 e7 26 8d d7 cd d7 cd b7 b0 b0 a2 8a 96 96 64     ..&............d
    1a1d:	a2 e7 f0 f5 f5 f7 fa fa fa fa f7 f5 f3 f0 ed e7     ................
    1a2d:	d7 dc 26 8c cd c4 cd b0 b0 b0 a2 96 75 96 96 75     ..&.........u..u
    1a3d:	b0 f0 f3 f7 f5 f7 fa fa fa f7 f5 f3 f0 ed e7 dc     ................
    1a4d:	cd d7 26 7a cd b7 c4 b0 a2 96 96 96 75 a2 a2 75     ..&z........u..u
    1a5d:	b7 f3 f5 fb fa fa fa fa f5 f5 f3 f0 e7 e1 e1 d7     ................
    1a6d:	c4 cd 26 78 b7 b0 b7 a2 96 96 96 96 8a a2 b0 75     ..&x...........u
    1a7d:	c4 f5 f7 fb fa fa f7 f5 f3 f3 ed e7 e1 d7 d7 cd     ................
    1a8d:	b7 cd 26 68 b0 a2 b0 96 96 96 a2 a2 96 b0 b0 75     ..&h...........u
    1a9d:	c4 f7 96 fb fa f7 f5 f3 f0 f0 e7 e1 dc d7 d7 cd     ................
    1aad:	b7 c4 26 68 b0 a2 a2 96 96 96 a2 a2 96 96 b7 8a     ..&h............
    1abd:	c4 fa fa fb f7 f5 f3 ed e7 e1 d7 d7 d7 cd cd cd     ................
    1acd:	96 b0 26 67 96 96 a2 96 a2 a2 b0 b0 96 cd cd 8a     ..&g............
    1add:	c4 f7 f7 f7 f3 f0 f0 e7 e1 e1 d7 d7 cd cd c4 b7     ................
    1aed:	96 b0 26 53 96 96 b0 a2 b0 b0 b0 b0 b7 cd cd 96     ..&S............
    1afd:	c4 f7 f5 f7 f3 ed e1 dc d7 cd cd cd b7 b0 b0 b0     ................
    1b0d:	8a 96 26 01 96 a2 b7 b0 b0 b0 b7 cd b7 cd d7 96     ..&.............
    1b1d:	c4 f3 f3 f3 e7 e1 dc d7 cd cd cd cd b0 b0 b0 a2     ................
    1b2d:	8a 96 26 3e a2 b0 c4 b7 b7 cd cd cd b7 d7 dc a2     ..&>............
    1b3d:	b7 f0 f0 f0 e1 dc d7 cd cd c4 b7 b0 b0 a2 96 96     ................
    1b4d:	75 96 26 68 b0 b0 cd c4 cd cd cd d7 c4 dc e1 a2     u.&h............
    1b5d:	b0 ed e7 e1 e1 e1 dc d7 cd cd c4 b7 b0 a2 a2 a2     ................
    1b6d:	a2 a2 26 68 b0 b7 d7 d7 d7 dc e1 e1 e1 e1 e7 b0     ..&h............
    1b7d:	b0 e1 96 d7 d7 cd cd b7 b7 96 b0 a2 96 96 96 b0     ................
    1b8d:	8a b0 26 b0 cd cd 96 cd d7 d7 dc e1 ed 96 f3 c4     ..&.............
    1b9d:	a2 d7 d7 cd cd cd b7 b0 b0 a2 96 96 96 96 a2 a2     ................
    1bad:	b0 b0 b7 b7 cd cd cd d7 d7 dc e1 e1 ed f0 f3 c4     ................
    1bbd:	75 a2 b0 a2 a2 a2 96 96 96 8a 8a 8a 8a 8a 96 96     u...............
    1bcd:	96 96 a2 a2 a2 a2 b0 b0 b0 b0 b7 b7 c4 cd cd 96     ................
    1bdd:	4e 39 71 71 70 63 62 61 61 60 60 60 60 61 62 70     N9qqpcbaa````abp
    1bed:	71 72 71 70 63 61 60 4d 4a 4a 4b 4c 4b 4d 4b 38     qrqpca`MJJKLKMK8
    1bfd:	4c 38 72 85 85 85 85 85 85 85 72 72 71 71 71 71     L8r.......rrqqqq
    1c0d:	72 83 85 85 85 85 72 4d 3a 38 4d 4d 60 4e 61 4b     r.....rM:8MM`NaK
    1c1d:	4e 17 24 24 24 24 24 24 24 24 24 24 24 24 24 24     N.$$$$$$$$$$$$$$
    1c2d:	24 24 24 24 24 24 24 4e 4b 36 38 4b 4b 39 4c 4b     $$$$$$$NK68KK9LK
    1c3d:	4e 36 60 63 71 72 72 71 62 60 60 60 60 61 63 71     N6`cqrrqb````acq
    1c4d:	71 72 72 71 71 62 61 61 4d 36 39 4b 4c 4b 4c 4c     qrrqqbaaM69KLKLL
    1c5d:	4d 36 63 71 72 72 72 63 61 60 60 60 60 61 63 71     M6cqrrrca````acq
    1c6d:	72 72 72 72 71 63 61 4b 4b 36 38 4c 4c 4b 4b 4b     rrrrqcaKK68LLKKK
    1c7d:	4b 36 60 61 63 70 71 72 71 70 62 61 60 60 60 60     K6`acpqrqpba````
    1c8d:	61 61 62 63 70 71 71 4c 4b 36 39 39 39 39 4b 4b     aabcpqqLK69999KK
    1c9d:	4b 38 63 62 60 60 60 60 61 62 63 63 63 63 63 63     K8cb````abcccccc
    1cad:	63 62 62 62 62 62 62 4e 4c 35 36 36 36 37 36 4a     cbbbbbbNL566676J
    1cbd:	4d 25 4c 4c 4c 4c 4c 4c 4c 4c 4c 4c 4c 4c 4c 4c     M%LLLLLLLLLLLLLL
    1ccd:	4c 4c 4c 4c 4c 4c 4c 60 61 4b 4b 4b 4a 3a 3a 38     LLLLLLL`aKKKJ::8
    1cdd:	4b 35 60 60 60 60 60 60 60 60 60 60 60 60 60 60     K5``````````````
    1ced:	60 60 60 60 60 60 60 61 4d 60 4d 4c 4b 4b 4c 38     ```````aM`MLKKL8
    1cfd:	4b 36 60 60 60 60 60 60 60 60 60 60 60 60 60 60     K6``````````````
    1d0d:	60 60 60 60 60 60 60 4c 4b 39 4c 4b 4b 4b 4e 4b     ```````LK9LKKKNK
    1d1d:	60 38 70 70 71 71 70 70 70 63 63 63 63 63 63 63     `8ppqqpppccccccc
    1d2d:	63 63 63 63 63 63 63 4c 4b 35 38 39 39 4b 4c 4b     cccccccLK5899KLK
    1d3d:	4b 36 61 61 60 60 60 61 61 62 63 70 70 71 71 71     K6aa```aabcppqqq
    1d4d:	71 70 70 63 63 63 63 4d 4b 36 39 39 38 4a 4c 4b     qppccccMK6998JLK
    1d5d:	4d 24 4c 4c 4c 4c 4c 4c 4c 4c 4c 4c 4c 4c 4c 4c     M$LLLLLLLLLLLLLL
    1d6d:	4c 4c 4c 4c 4c 4c 4c 4b 4a 35 38 38 38 38 4b 4b     LLLLLLLKJ58888KK
    1d7d:	4d 24 4c 4d 4e 60 60 60 60 4d 4c 4c 4b 4b 4c 4d     M$LMN````MLLKKLM
    1d8d:	4d 60 60 60 60 60 60 4d 3a 36 38 39 39 38 3a 4a     M``````M:68998:J
    1d9d:	4b 36 60 61 61 62 63 70 70 71 72 71 70 70 63 62     K6`aabcppqrqppcb
    1dad:	62 61 61 61 62 63 63 4c 4b 24 35 36 37 36 36 39     baaabccLK$567669
    1dbd:	4d 38 70 70 63 62 61 61 61 60 60 61 61 62 63 63     M8ppcbaaa``aabcc
    1dcd:	63 63 63 63 63 63 63 4e 4b 38 37 38 4b 3a 3a 38     cccccccNK878K::8
    1ddd:	4c 36 61 61 62 63 63 63 63 63 63 63 63 63 63 63     L6aabccccccccccc
    1ded:	63 63 63 63 63 63 63 4d 39 38 4c 4e 4c 4b 4b 38     cccccccM98LNLKK8
    1dfd:	4c 38 71 71 71 71 71 71 71 71 71 71 71 71 71 71     L8qqqqqqqqqqqqqq
    1e0d:	71 71 71 71 71 71 71 4c 4c 38 4c 4e 4d 4b 4b 4b     qqqqqqqLL8LNMKKK
    1e1d:	4d 17 24 24 24 24 24 24 24 24 24 24 24 24 24 24     M.$$$$$$$$$$$$$$
    1e2d:	24 24 24 24 24 24 24 4d 4b 38 4b 3a 39 4b 4d 4c     $$$$$$$MK8K:9KML
    1e3d:	4b 36 61 61 61 61 62 63 63 70 71 71 71 71 70 70     K6aaaabccpqqqqpp
    1e4d:	62 61 61 60 61 61 63 4e 4b 38 4b 39 4a 4b 4b 4a     baa`aacNK8K9JKKJ
    1e5d:	4e 38 63 63 63 63 62 61 60 60 60 61 62 63 63 63     N8ccccba```abccc
    1e6d:	63 63 62 61 61 60 60 60 4b 36 4b 4b 4b 4c 60 4c     ccbaa```K6KKKL`L
    1e7d:	4b 36 63 63 63 63 63 63 63 63 63 63 63 63 63 63     K6cccccccccccccc
    1e8d:	63 63 63 63 62 61 61 4d 4b 36 4a 39 4b 4d 4c 4b     ccccbaaMK6J9KMLK
    1e9d:	4c 38 63 63 63 63 63 63 63 63 63 62 61 61 60 60     L8cccccccccbaa``
    1ead:	61 61 61 62 63 70 70 4c 4a 35 38 38 38 36 36 3a     aaabcppLJ588866:
    1ebd:	62 25 4c 4c 4c 4c 4c 4c 4c 4c 4c 4c 4c 4c 4c 4c     b%LLLLLLLLLLLLLL
    1ecd:	4c 4c 4c 4c 4c 4c 4c 4e 60 4b 4b 3a 4b 4b 4b 3a     LLLLLLLN`KK:KKK:
    1edd:	62 35 60 60 60 60 60 60 60 4d 4d 4c 4c 4b 4b 4c     b5```````MMLLKKL
    1eed:	4d 60 60 60 60 4e 4d 62 4e 4b 4b 4b 4d 60 60 39     M````NMbNKKKM``9
    1efd:	60 38 72 71 71 63 63 63 62 62 61 61 61 63 70 71     `8rqqcccbbaaacpq
    1f0d:	72 72 71 71 63 63 61 4d 4b 39 4d 4e 62 70 61 4b     rrqqccaMK9MNbpaK
    1f1d:	60 38 63 63 63 63 70 70 71 71 71 71 70 70 63 62     `8ccccppqqqqppcb
    1f2d:	61 61 60 60 60 61 61 4b 39 35 38 4c 4d 4e 60 4d     aa```aaK958LMN`M
    1f3d:	4d 38 63 63 63 63 63 63 63 63 63 63 63 63 63 63     M8cccccccccccccc
    1f4d:	70 70 70 71 71 70 70 4d 4b 36 39 4b 4d 4b 4c 4d     pppqqppMK69KMKLM
    1f5d:	4c 38 71 71 71 71 71 71 71 71 71 71 71 71 71 71     L8qqqqqqqqqqqqqq
    1f6d:	71 71 71 71 71 71 71 4d 4b 36 38 39 38 38 4b 4b     qqqqqqqMK68988KK
    1f7d:	4b 21 24 24 24 24 24 24 24 24 24 24 24 24 24 24     K!$$$$$$$$$$$$$$
    1f8d:	24 24 24 24 24 24 24 4c 4a 36 4b 4b 4a 39 4c 4b     $$$$$$$LJ6KKJ9LK
    1f9d:	60 36 62 62 62 62 62 62 62 62 62 62 62 62 62 63     `6bbbbbbbbbbbbbc
    1fad:	63 63 71 71 63 63 63 60 4b 35 38 38 38 37 36 4c     ccqqccc`K588876L
    1fbd:	63 36 62 62 62 62 62 62 63 63 63 63 63 63 63 62     c6bbbbbbcccccccb
    1fcd:	61 60 60 60 60 62 63 60 4e 4b 4b 4b 4b 4b 4b 3a     a````bc`NKKKKKK:
    1fdd:	2f 2f 2f 2f 53 32 53 43 64 3f 32 42 42 51 3f 3f     ////S2SCd?2BBQ??
    1fed:	3f 67 42 42 53 53 42 53 42 43 55 75 55 42 75 53     ?gBBSSBSBCUuUBuS
    1ffd:	52 33 41 32 33 24 68 35 43 37 55 55 33 43 5b 55     R3A23$h5C7UU3C[U
    200d:	22 46 38 46 33 36 43 44 53 43 67 7c 53 45 55 53     "F8F36CDSCg|SEUS
    201d:	40 37 78 3f 2f 55 38 40 64 24 37 3f 26 38 38 36     @7x?/U8@d$7?&886
    202d:	22 55 6a 55 25 78 67 57 3e 43 35 33 3e 6a 5a 75     "UjU%xgW>C53>jZu
    203d:	64 2b 13 01 10 1c 10 1c 10 10 01 01 01 04 11 10     d+..............
    204d:	10 11 11 01 10 10 10 2b 14 11 14 05 1e 36 2b 55     .......+.....6+U
    205d:	2f 5b 16 3c 3e 32 3f 64 50 50 3c 3c 2b 21 21 2e     /[.<>2?dPP<<+!!.
    206d:	22 3d 22 2f 32 32 50 32 35 35 42 52 8a 7b 4a 42     "="/22P255BR.{JB
    207d:	32 46 15 3c 3e 64 35 64 64 50 64 50 50 31 3e 3d     2F.<>d5ddPdPP1>=
    208d:	22 32 21 24 3f 33 50 31 23 3f 35 46 96 8f 6a 43     "2!$?3P1#?5F..jC
    209d:	33 5e 1f 3c 50 52 35 42 64 64 64 50 3e 50 50 50     3^.<PR5BdddP>PPP
    20ad:	3e 50 24 24 24 23 32 32 24 24 37 37 4d 8f 37 42     >P$$$#22$$77M.7B
    20bd:	53 2b 1f 3c 64 32 3f 64 64 42 64 50 50 50 50 3e     S+.<d2?ddBdPPPP>
    20cd:	24 3f 3e 32 24 23 24 34 24 35 35 35 4b 4b 2b 3f     $?>2$#$4$555KK+?
    20dd:	43 43 3e 3c 64 64 3e 32 51 50 50 50 50 50 50 3e     CC><dd>2QPPPPPP>
    20ed:	3e 3e 50 24 64 33 42 75 53 35 35 43 7c 6d 5b 42     >>P$d3BuS55C|m[B
    20fd:	43 69 3c 2f 64 50 64 50 33 50 64 64 64 64 50 50     Ci</dPdP3PddddPP
    210d:	50 50 51 52 64 64 75 75 42 37 35 52 7b 6d 47 53     PPQRdduuB75R{mGS
    211d:	53 96 22 3c 64 75 64 50 50 64 50 64 64 64 64 50     S."<dudPPdPddddP
    212d:	50 64 64 64 64 75 75 75 53 37 64 64 3a 5f 6a 53     PdddduuuS7dd:_jS
    213d:	32 2b 22 50 68 96 96 75 8a 8a 78 56 96 8a 8a 96     2+"Ph..u..xV....
    214d:	8a 96 8a 96 96 a2 96 96 8a 6a 8a 96 7c 8d 2b 55     .........j..|.+U
    215d:	64 43 55 67 68 96 7a 8f 79 8c 96 7b 7b 7b 9b a3     dCUgh.z.y..{{{..
    216d:	9a 7b 9a a2 7c 8f 7c 8f a2 96 b0 b0 9b 59 35 42     .{..|.|......Y5B
    217d:	42 38 37 32 2e 35 26 52 2e 55 34 32 21 6c 6a 42     B872.5&R.U42!ljB
    218d:	21 34 43 32 21 5a 79 53 2e 35 26 52 1f 6a 36 42     !4C2!ZyS.5&R.j6B
    219d:	1e 3c 21 12 12 2c 15 15 1d 2b 1e 15 15 16 21 3f     .<!..,...+....!?
    21ad:	15 2f 2f 1f 22 16 16 1f 3c 3c 3c 1f 16 1e 16 2b     .//."...<<<....+
    21bd:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    21cd:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    21dd:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    21ed:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    21fd:	12 12 13 13 15 13 3c 15 16 15 1f 2e 15 1e 16 15     ......<.........
    220d:	13 15 15 16 15 15 15 17 2e 1f 2b 21 2e 2c 2c 1e     ..........+!.,,.
    221d:	52 36 75 52 1f 46 36 33 3c 35 42 32 22 37 5b 53     R6uR.F63<5B2"7[S
    222d:	21 55 38 42 22 55 42 42 3c 35 42 68 3c 46 46 75     !U8B"UBB<5Bh<FFu
    223d:	68 42 31 13 1e 2e 15 2e 3c 13 16 1e 15 16 16 17     hB1.....<.......
    224d:	15 1f 3c 2f 15 1f 3c 53 2c 1f 22 15 2e 46 53 68     ..</..<S,."..FSh
    225d:	3d 3f 15 1c 2e 2f 3c 50 3c 3c 12 10 1c 15 20 2b     =?.../<P<<.... +
    226d:	20 20 20 1c 20 2e 3c 2e 23 22 23 21 52 5a 22 42        . .<.#"#!RZ"B
    227d:	2f 38 15 3c 3e 3f 33 64 64 50 50 3c 3c 2f 32 2f     /8.<>?3ddPP<</2/
    228d:	22 32 22 24 3e 33 50 23 24 34 53 53 8a 8f 38 42     "2"$>3P#$4SS..8B
    229d:	32 46 2e 3c 50 64 35 53 64 64 64 50 3e 3d 50 50     2F.<Pd5SdddP>=PP
    22ad:	32 3e 23 24 24 24 3f 3e 23 33 37 38 7c 8d 6a 42     2>#$$$?>#378|.jB
    22bd:	33 68 15 3c 64 33 34 42 64 52 64 50 50 50 50 3e     3h.<d34BdRdPPPP>
    22cd:	32 3e 32 24 24 23 32 24 24 35 35 35 4c 6d 32 41     2>2$$#2$$555Lm2A
    22dd:	53 21 2f 3c 64 52 32 3f 64 51 64 50 50 50 50 50     S!/<dR2?dQdPPPPP
    22ed:	32 32 50 33 3f 24 34 53 42 35 35 35 4c 4c 23 42     22P3?$4SB555LL#B
    22fd:	43 53 3c 2f 50 64 50 3e 33 50 50 50 50 50 50 3e     CS</PdP>3PPPPPP>
    230d:	50 50 3f 42 64 52 53 75 55 35 37 42 96 8f 56 52     PP?BdRSuU57B..VR
    231d:	3f 79 2f 3c 64 64 64 64 52 50 64 64 64 64 64 50     ?y/<ddddRPdddddP
    232d:	50 50 50 52 64 75 75 75 42 37 42 64 4a 6d 49 68     PPPRduuuB7BdJmIh
    233d:	33 75 22 3c 64 8a 75 64 64 64 52 52 75 64 64 64     3u"<d.udddRRuddd
    234d:	64 75 64 75 75 8a 75 75 75 37 75 75 4b 8e 53 55     duduu.uuu7uuK.SU
    235d:	3f 1f 55 8a 8d b0 b7 b0 a2 96 a2 9a b0 b0 b0 b7     ?.U.............
    236d:	a2 b0 b0 b7 b0 b7 b0 b0 b0 a2 b0 b7 b0 7b 2e 55     .............{.U
    237d:	52 45 43 32 21 53 23 55 52 55 3f 34 35 37 56 55     REC2!S#URU?457VU
    238d:	56 43 6a 67 36 5a 56 46 52 53 55 8a 35 46 37 3f     VCjg6ZVFRSU.5F7?
    239d:	42 6a 39 20 2e 45 36 33 21 68 42 33 24 6c 6b 5a     Bj9 .E63!hB3$lkZ
    23ad:	23 45 46 3f 26 37 5b 53 64 55 6a 42 24 55 35 53     #EF?&7[SdUjB$U5S
    23bd:	50 3f 3e 2f 2f 50 31 42 3f 52 50 3f 42 42 43 53     P?>//P1B?RP?BBCS
    23cd:	68 42 68 75 56 43 43 43 75 64 75 75 55 42 42 52     hBhuVCCCuduuUBBR
    23dd:	df ae ae ae a0 86 43 47 47 44 35 2f cc c1 ae ae     ......CGGD5/....
    23ed:	ae ae 86 4b 32 47 44 43 35 2e 86 ae ae ae a1 62     ...K2GDC5......b
    23fd:	e5 ae ae ae 93 71 32 a0 86 86 71 47 90 c1 ae ae     .....q2...qG....
    240d:	ae 91 4d 32 72 86 85 85 60 33 9f b6 ae ae a1 62     ..M2r...`3.....b
    241d:	f6 c2 ae ae 93 5d 6f ae 93 93 91 62 40 c2 a1 a1     .....]o....b@...
    242d:	91 43 4b 85 91 93 93 92 85 4b 58 d4 af ae ae 71     .CK......KX....q
    243d:	d0 e4 f2 d5 ae 43 a0 a0 93 93 93 71 35 6e 5b 44     .....C.....q5n[D
    244d:	2f 71 a0 93 93 93 93 93 86 62 32 32 2b 43 5c 58     /q.......b22+C\X
    245d:	43 32 2b 44 6d 57 ae 93 93 93 93 85 4a 47 5c 60     C2+DmW......JG\`
    246d:	48 9c df 93 93 93 93 93 86 60 44 85 61 4c 4a 35     H........`D.aLJ5
    247d:	ac 85 71 4d 4b b2 af 93 93 93 93 86 44 93 a0 91     ..qMK.......D...
    248d:	63 2f ea ae 93 93 93 93 85 44 85 a0 91 85 85 60     c/.......D.....`
    249d:	ec ae a0 86 62 bc d5 af af af ae 91 44 ae ae a0     ....b.......D...
    24ad:	86 4d 7d ec ae a0 93 92 72 2e ae a0 93 93 91 62     .M}.....r......b
    24bd:	ec ae ae 91 62 6d b4 9f 9f 9f 9f 71 40 e5 ae ae     ....bm.....q@...
    24cd:	93 72 33 a9 d3 df c1 ae 62 58 af 93 93 93 91 62     .r3.....bX.....b
    24dd:	ec ae ae 91 62 40 47 44 44 44 44 35 35 f2 ae ae     ....b@GDDDD55...
    24ed:	a0 86 4b 3f 32 2e 32 58 40 bd c1 93 93 93 91 62     ..K?2.2X@......b
    24fd:	ec ae ae 93 63 80 93 85 85 85 85 60 32 f2 d5 ae     ....c......`2...
    250d:	ae 91 47 6f 72 63 4d 4a 35 8d f2 ae 93 93 91 62     ..GorcMJ5......b
    251d:	f6 c2 d5 af 71 bc ae 93 93 93 91 71 37 9b eb ec     ....q......q7...
    252d:	b6 86 35 a0 93 91 85 85 60 36 8d f2 ae 93 93 71     ..5.....`6.....q
    253d:	bc 7e 44 2b 2b 9c df 93 93 93 91 85 30 33 2e 7d     .~D++.......03.}
    254d:	da a0 32 c1 93 93 93 92 85 60 36 8d ee af a1 6f     ..2......`6....o
    255d:	32 33 38 39 37 2e df a0 93 92 85 4a 43 60 39 35     23897......JC`95
    256d:	2e 44 6d d5 a0 93 93 93 92 86 61 47 54 44 2b 2e     .Dm.......aGTD+.
    257d:	72 4c 4d 4e 3a 32 d0 c1 93 91 63 2f 71 71 60 4b     rLMN:2....c/qq`K
    258d:	38 35 2f e9 e5 ae a0 93 93 93 85 37 2f 34 37 37     85/........7/477
    259d:	93 62 60 60 4b 37 44 e5 92 72 32 60 71 71 71 63     .b``K7D..r2`qqqc
    25ad:	60 4a 37 2e a8 db e5 c1 b6 a0 40 2f 39 39 4a 37     `J7.......@/99J7
    25bd:	a0 62 60 60 4e 38 32 bf 85 43 33 93 71 71 71 71     .b``N82..C3.qqqq
    25cd:	71 60 4a 37 2e 33 33 2e 33 2f 43 4d 4a 4a 4a 37     q`J7.33.3/CMJJJ7
    25dd:	a0 62 60 60 60 4b 35 43 44 71 43 a0 85 71 71 71     .b```K5CDqC..qqq
    25ed:	71 62 4b 2f 81 86 85 85 72 47 6d a0 4b 4a 4a 37     qbK/....rGm.KJJ7
    25fd:	a0 63 62 71 71 60 2f 5c a0 91 61 6d a0 71 71 71     .cbqq`/\..am.qqq
    260d:	63 4d 35 57 af ae ae ae 93 71 2f ae 71 4a 4a 37     cM5W.....q/.qJJ7
    261d:	ae 72 72 61 58 32 81 a0 ae a0 72 33 ae 93 72 71     .rraX2....r3..rq
    262d:	62 3a 2e a0 ae ae ae ae ae 86 4b 5c a0 4d 4b 38     b:........K\.MK8
    263d:	7f 43 2b 32 48 33 d5 af ae ae 91 60 2f 7e 91 93     .C+2H3.....`/~..
    264d:	63 2f 90 af ae ae ae ae ae a0 72 43 93 86 4e 33     c/........rC..N3
    265d:	44 60 6f 72 71 4a cf df ae ae 91 47 4b 35 32 2f     D`orqJ.....GK52/
    266d:	33 6c e5 b6 ae ae ae ae ae ae 91 6f 2b 2b 32 33     3l.........o++23
    267d:	ad 86 86 91 85 60 48 f2 ae a0 82 40 86 62 4d 4a     .....`H....@.bMJ
    268d:	35 3f de f8 d5 af ae ae ae ae 91 3f 60 6f 62 4b     5?.........?`obK
    269d:	d5 93 92 93 86 63 33 eb d5 ae 5b 86 91 85 85 72     .....c3...[....r
    26ad:	62 38 2f 9b f1 ec e5 e5 d5 a0 40 6f 91 86 86 60     b8/.......@o...`
    26bd:	df 93 93 93 91 72 3a 98 9c 43 43 df 93 86 86 86     .....r:..CC.....
    26cd:	85 71 4b 37 2b 35 33 33 33 2e 90 a1 93 93 86 60     .qK7+5333......`
    26dd:	df 93 93 93 91 85 4e 32 4b 4c 2f d1 c1 91 86 86     ......N2KL/.....
    26ed:	86 86 72 33 47 63 62 62 4d 35 9c e5 93 93 86 60     ..r3GcbbM5.....`
    26fd:	df 93 93 93 91 72 43 6f 86 72 4b 2f e4 c1 af af     .....rCo.rK/....
    270d:	ae 93 4a 40 85 85 85 85 72 4b 2e e4 ae 93 86 60     ..J@....rK.....`
    271d:	f2 ae a1 a1 93 6f 32 a1 93 91 70 3a 32 5b 58 58     .....o2...p:2[XX
    272d:	58 43 32 93 91 86 86 86 85 62 36 6c df 93 93 71     XC2......b6l...q
    273d:	ca 9f 86 86 84 44 84 a0 93 93 86 4e 2e 86 71 70     .....D.....N..qp
    274d:	63 61 2f d5 93 86 86 86 86 85 4d 32 d2 ae 93 62     ca/.......M2...b
    275d:	5c 5c 5b 5b 58 32 db a1 93 93 86 62 33 d5 a0 a0     \\[[X2.....b3...
    276d:	a0 85 43 be c0 86 86 86 86 85 63 4b 2b 2f 38 35     ..C.......cK+/85
    277d:	d5 ae a1 a1 91 5c c9 c1 93 93 85 4c 6d e5 af ae     .....\.....Lm...
    278d:	ae a0 63 3f ec 93 86 86 86 85 63 2f 82 93 86 62     ..c?......c/...b
    279d:	f2 b6 ae ae a1 72 58 f2 ae a1 91 48 9e d5 ae ae     .....rX....H....
    27ad:	ae ae 86 43 d0 c1 a0 93 93 86 43 7e 93 a1 a0 63     ...C......C~...c
    27bd:	e5 ae ae ae ae 93 43 be 9f 9f 84 44 ab c2 ae ae     ......C....D....
    27cd:	ae ae a0 71 43 be 86 86 73 46 60 93 ae ae a1 63     ...qC...sF`....c
    27dd:	e1 62 4e 4b 7b 7c 39 9e e3 bc 4b 35 38 61 39 cf     .bNK{|9...K58a9.
    27ed:	bc 61 85 4d 4a 8f 8f 36 35 39 a6 e1 4e 63 63 b3     .a.MJ..659..Ncc.
    27fd:	e7 4c 4d 38 8f b7 e1 f5 f5 c9 4b 37 39 4b 72 cf     .LM8......K79Kr.
    280d:	a6 71 71 4b 38 b9 7b 36 6b 9b e2 e1 38 60 3a cf     .qqK8.{6k...8`:.
    281d:	e7 4d 4b 38 8f d7 f5 f7 f5 cf 38 38 4b 63 4b cf     .MK8......88KcK.
    282d:	a6 62 71 71 38 cd ce d8 f0 f3 f5 e1 4b 4c 4b bc     .bqq8.......KLK.
    283d:	e7 38 38 39 6a cd f3 f0 f3 dc 4d 39 6f 61 4c cf     .889j.....M9oaL.
    284d:	9b 4e 62 60 39 dc f0 f7 f7 f3 f0 dc 4e 4e 4e c9     .Nb`9.......NNN.
    285d:	e1 60 60 4d 68 a3 38 24 43 d7 60 4c 60 62 61 d0     .``Mh.8$C.`L`ba.
    286d:	9b 62 4b 38 35 dc f0 a5 36 35 7d e7 4d 60 60 ca     .bK85...65}.M``.
    287d:	e7 4b 61 4d 6a 9b 36 35 35 b7 63 60 4d 63 72 cf     .KaMj.655.c`Mcr.
    288d:	a5 4e 61 60 35 e7 bb 35 35 35 7d f0 63 61 60 bc     .Na`5..555}.ca`.
    289d:	ed 4c 4c 4d 7b a6 4e 38 35 dc 4c 39 63 71 4e ca     .LLM{.N85.L9cqN.
    28ad:	bb 72 4d 72 4d ed a5 36 35 36 a6 ed 4c 61 62 e2     .rMrM..656..Lab.
    28bd:	f3 4b 60 4b 6a a6 4b 61 38 dc 61 4b 4a 4b 4b d0     .K`Kj.Ka8.aKJKK.
    28cd:	bc 6f 63 62 60 f0 a5 4b 38 39 bc f3 62 4e 60 ed     .ocb`..K89..bN`.
    28dd:	ed 39 4d 4d 6a a6 61 62 9d e1 4e 4b 4a 72 61 d0     .9MMj.ab..NKJra.
    28ed:	bc 70 61 61 38 dc 9b 4e 91 71 c9 f3 72 72 4d f0     .paa8..N.q..rrM.
    28fd:	c4 39 61 60 7c a6 72 61 9b f0 4e 38 60 61 63 d0     .9a`|.ra..N8`ac.
    290d:	bc 63 62 4d 38 e1 a6 62 71 71 d0 f5 62 62 4c f5     .cbM8..bqq..bbL.
    291d:	dc 4d 60 61 9b c9 85 72 b2 ed 4b 4a 39 62 4d cf     .M`a...r..KJ9bM.
    292d:	bc 4d 70 4a 4b f5 9b 62 63 72 c9 f5 60 60 4b f5     .MpJK..bcr..``K.
    293d:	e1 4c 63 60 9b bc 63 62 9b ed 61 4b 39 61 4b c9     .Lc`..cb..aK9aK.
    294d:	bc 60 62 4b 60 f7 a5 71 72 63 c9 f5 9e 72 60 f0     .`bK`..qrc...r`.
    295d:	ed 62 63 4b 9b ca 72 71 bc e7 4c 36 38 63 4c bc     .bcK..rq..L68cL.
    296d:	f5 e8 9e 60 7e f7 9b 61 72 85 c9 f5 a6 72 62 d9     ...`~..ar....rb.
    297d:	ed 60 4d 62 9b bc 60 71 a6 e1 4a 60 6f 86 62 d0     .`Mb..`q..J`o.b.
    298d:	f5 dc f5 f7 fa f7 a6 61 72 72 cf f7 bc 70 72 cf     .......arr...pr.
    299d:	e7 61 60 4c 8f b3 61 4b 7c f0 60 6f 86 4a 4b d0     .a`L..aK|.`o.JK.
    29ad:	f0 f0 f5 f0 f0 f3 9b 71 72 63 b2 f7 bc 60 63 d0     .......qrc...`c.
    29bd:	e7 61 4e 38 9b bc 4d 4b 8f e1 70 4b 38 38 4d d0     .aN8..MK..pK88M.
    29cd:	dd 39 4b 4b 4b a6 8f 62 85 72 b2 f7 ca bc ca f0     .9KKK..b.r......
    29dd:	ed 61 71 39 9b b3 4e 4c b2 f0 4e 38 36 4a 86 d9     .aq9..NL..N86J..
    29ed:	bc 4b 4b 4a 4b a5 a6 6f 72 63 9d f7 f3 f7 f5 dc     .KKJK..orc......
    29fd:	e1 62 4e 4d 9b b3 62 4d 9b e7 38 3a 71 85 85 d0     .bNM..bM..8:q...
    2a0d:	a5 4b 4a 4d 4b 9b 9b 63 6f 72 a6 f7 c7 7d e1 e7     .KJMK..cor...}..
    2a1d:	e1 61 4c 36 bb b3 4b 4a 9b dc 6d 4a 72 72 63 d0     .aL6..KJ..mJrrc.
    2a2d:	a6 39 39 4b 4c bc a5 4e 72 63 a6 f5 a3 39 9b e7     .99KL..Nrc...9..
    2a3d:	c4 38 35 38 dc bc 4b 4b 9b dc 9b 4c 86 85 60 cf     .858..KK...L..`.
    2a4d:	a6 39 39 36 4b c9 a6 71 71 62 a6 f3 61 4d 7e f0     .996K..qqb..aM~.
    2a5d:	e7 8f 9b b8 f0 9b 38 38 9b e7 dd a9 4b 38 5a f3     ......88....K8Z.
    2a6d:	a6 39 4a 39 38 a6 a6 4b 60 63 b2 e1 4b 4d 4c f0     .9J98..K`c..KML.
    2a7d:	ed f0 e1 ed f0 a6 61 71 bc f3 ed f5 f0 e7 f7 f5     ......aq........
    2a8d:	8f 4a 4a 4b 60 b3 bc 61 63 4b a3 f0 4c 71 4e f5     .JJK`..acK..LqN.
    2a9d:	f0 a8 9e bc e1 9b 63 61 a6 f3 f3 f0 f0 f7 f5 ed     ......ca........
    2aad:	9b 4a 39 6f 86 c9 e3 c9 bc 9b c6 f0 4e 71 4e f3     .J9o........NqN.
    2abd:	c9 61 4c 4a c4 8f 61 4a a6 f0 e3 d0 d0 a6 e8 ed     .aLJ..aJ........
    2acd:	a6 4a 39 86 86 c9 f3 f7 fa fa fa f3 4e 63 4e f3     .J9.........NcN.
    2add:	a6 38 63 4d e7 9b 4a 4b bc f0 63 4c 4e 63 71 ca     .8cM..JK..cLNcq.
    2aed:	9b 4a 71 a0 91 c9 f5 ed e7 f0 f5 ed 4b 60 63 f0     .Jq.........K`c.
    2afd:	b2 72 62 4c cd 9b 60 4c bc b3 4b 3a 63 4e 4d a6     .rbL..`L..K:cNM.
    2b0d:	9b 5f 85 85 83 bc ed 36 36 36 7d f0 62 62 4d e7     ._.....666}.bbM.
    2b1d:	9d 63 4d 4d d7 9b 71 60 bc c9 38 38 4b 4b 4c 9b     .cMM..q`..88KKL.
    2b2d:	6b 62 85 86 60 a6 e7 4d 63 4b 4a ed 62 71 61 ed     kb..`..McKJ.bqa.
    2b3d:	a6 63 70 4b dc 8f 70 70 a6 b2 36 35 63 4b 4d 8f     .cpK..pp..65cKM.
    2b4d:	7b 63 85 86 62 bc cf 62 70 70 62 d7 4b 62 4d f0     {c..b..bppb.KbM.
    2b5d:	b3 72 72 60 d7 9b 71 62 a6 a6 35 4b 4b 61 4c 9a     .rr`..qb..5KKaL.
    2b6d:	7c 72 72 62 61 c9 bc 60 86 63 4b e7 4a 70 62 e7     |rrba..`.cK.Jpb.
    2b7d:	9b 71 63 4c dc 9b 72 4a a6 9b 38 4b 62 6f 4b a6     .qcL..rJ..8KboK.
    2b8d:	b2 85 72 63 4e cf bc 61 71 60 9c e1 4d 72 62 f5     ..rcN..aq`..Mrb.
    2b9d:	a6 62 72 60 cd 9b 63 4b 8f b2 62 4e 60 4c 4c a6     .br`..cK..bN`LL.
    2bad:	c9 72 71 4d 4b bb 9b 4b 60 38 a6 e1 4e 72 63 f5     .rqMK..K`8..Nrc.
    2bbd:	b2 71 71 4a b7 9b 60 4a a6 a6 4b 4c 72 85 4b a6     .qqJ..`J..KLr.K.
    2bcd:	b3 71 60 3a 4a a6 8f 4a 38 39 9a dc 71 70 63 f0     .q`:J..J89..qpc.
    2bdd:	0e 0a 0e e1 e1 e1 e1 e1 e1 e1 e1 e1 e1 95 0e 0c     ................
    2bed:	0a 95 e1 e1 e1 e1 e1 e1 e1 e1 e1 95 0e 0c 0a 95     ................
    2bfd:	0e 0a 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 1a 0c     ..++++++++++++..
    2c0d:	18 2b 2f 2f 2f 2f 2f 2f 2f 2f 2f 2f 1a 0c 27 96     .+//////////..'.
    2c1d:	0e 0a 2b 2b 2b 2b 2b 2b 2b 2b 48 38 38 38 1b 0c     ..++++++++H888..
    2c2d:	18 2b 63 63 63 63 63 61 63 63 63 63 29 0c 27 96     .+cccccacccc).'.
    2c3d:	0e 0a 2b 2b 2b 2b 2b 2b 2b 2b 63 62 71 71 29 0c     ..++++++++cbqq).
    2c4d:	18 2b 4d 4d 4d 4d 4d 4e 4d 4d 4d 4d 29 0c 27 96     .+MMMMMNMMMM).'.
    2c5d:	0e 0a 2b 2b 2b 2b 2b 2b 2b 2b 63 37 4e 4e 1b 0c     ..++++++++c7NN..
    2c6d:	18 2b 63 63 63 63 63 61 63 63 63 63 29 0c 27 96     .+cccccacccc).'.
    2c7d:	0e 0a 2b 2b 2b 2b 2b 2b 2b 2b 63 35 60 60 1b 0c     ..++++++++c5``..
    2c8d:	18 2b 63 63 63 63 63 61 63 63 63 63 29 0c 27 96     .+cccccacccc).'.
    2c9d:	0e 0a 2b 2b 2b 2b 2b 2b 2b 2b cf d7 4c 60 1b 0c     ..++++++++..L`..
    2cad:	18 2b 4d 4d 4d 4d 4d 4e 4d 4d 4d 4d 29 0c 27 96     .+MMMMMNMMMM).'.
    2cbd:	0e 0a 2b 2b 2b 2b 2b 2b 2b 2b 63 37 60 60 1b 0c     ..++++++++c7``..
    2ccd:	18 2b 63 63 63 63 63 61 63 63 63 63 29 0c 27 96     .+cccccacccc).'.
    2cdd:	0e 0a 2b 2b 2b 2b 2b 2b 2b 2b 63 37 60 60 1b 0c     ..++++++++c7``..
    2ced:	18 2b 23 23 23 23 23 22 2f 2f 2f 2f 1a 0c 27 96     .+#####"////..'.
    2cfd:	0e 0a 2b 2b 2b 2b 2b 2b 2b 2b 63 35 60 60 1b 0c     ..++++++++c5``..
    2d0d:	18 2b 24 24 24 24 24 48 63 63 63 63 29 0c 27 96     .+$$$$$Hcccc).'.
    2d1d:	0e 0a 2b 2b 2b 2b 2b 2b 2b 2b cf d7 4c 60 1b 0c     ..++++++++..L`..
    2d2d:	18 2b 35 35 35 35 35 38 4d 4d 4d 4d 29 0c 27 96     .+555558MMMM).'.
    2d3d:	0e 0a 2b 2b 2b 2b 2b 2b 2b 2b 63 37 60 60 1b 0c     ..++++++++c7``..
    2d4d:	18 2b 35 35 35 35 35 48 63 63 63 63 29 0c 27 96     .+55555Hcccc).'.
    2d5d:	0e 0a 2b 2b 2b 2b 2b 2b 2b 2b 63 36 3a 3a 1b 0c     ..++++++++c6::..
    2d6d:	18 2b 35 35 35 35 35 48 63 63 63 63 29 0c 27 96     .+55555Hcccc).'.
    2d7d:	0e 0a 2b 2b 2b 2b 2b 2b 2b 2b 63 62 71 71 29 0c     ..++++++++cbqq).
    2d8d:	18 2b 24 24 24 24 24 38 4d 4d 4d 4d 29 0c 27 96     .+$$$$$8MMMM).'.
    2d9d:	0e 0a 2b 2b 2b 2b 2b 2b 2b 2b 46 44 58 58 28 0c     ..++++++++FDXX(.
    2dad:	18 2b 2f 2f 2f 2f 2f 47 63 63 63 63 29 0c 27 96     .+/////Gcccc).'.
    2dbd:	0e 0a 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 1a 0c     ..++++++++++++..
    2dcd:	18 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 2b 1a 0c 27 96     .+++++++++++..'.
    2ddd:	0e 0a 2b 2b 2b 2b 33 38 48 48 48 48 48 38 29 0c     ..++++38HHHHH8).
    2ded:	18 2b 2b 2b 2b 2b 2c 2f 2f 2f 2f 2f 1a 0c 27 96     .+++++,/////..'.
    2dfd:	0e 0a 2b 2b 2b 2b 57 4d 71 71 71 71 71 62 2a 0c     ..++++WMqqqqqb*.
    2e0d:	18 2b 2b 2b 2b 2b 19 0b 0d 0d 0d 0d 0f 0c 27 96     .+++++........'.
    2e1d:	0e 0a 2b 2b 2b 2b 57 4a 62 71 62 62 63 4c 2a 0c     ..++++WJbqbbcL*.
    2e2d:	18 2b 2b 2b 2b 2b 19 08 0b 08 0d 0b 1a 0c 27 96     .+++++........'.
    2e3d:	0e 0a 2b 2b 2b 2b 57 39 71 71 71 71 72 4c 2a 0c     ..++++W9qqqqrL*.
    2e4d:	18 2b 2b 2b 2b 2b 19 08 0b 08 0d 0d 1a 0c 27 96     .+++++........'.
    2e5d:	0e 0a 2b 2b 2b 2b 57 38 72 72 6f 71 86 4c 2a 0c     ..++++W8rroq.L*.
    2e6d:	18 2b 2b 2b 2b 2b 19 aa 3b 08 0d 0d 1a 0c 27 96     .+++++..;.....'.
    2e7d:	0e 0a 2b 2b 2b 2b 57 38 72 85 71 62 85 4c 2a 0c     ..++++W8r.qb.L*.
    2e8d:	18 2b 2b 2b 2b 2b 19 b5 3b 08 0d 0d 1a 0c 27 96     .+++++..;.....'.
    2e9d:	0e 0a 2b 2b 2b 2b 57 48 72 86 6f 63 62 5f 2a 0c     ..++++WHr.ocb_*.
    2ead:	18 2b 2b 2b 2b 2b 19 08 0b 08 0d 0d 1a 0c 27 96     .+++++........'.
    2ebd:	0e 0a 2b 2b 2b 2b 57 48 72 86 6f 4c 63 5f 2a 0c     ..++++WHr.oLc_*.
    2ecd:	18 2b 2b 2b 2b 2b 19 08 0b 08 0d 0d 1a 0c 27 96     .+++++........'.
    2edd:	0e 0a 2b 2b 2b 2b 57 38 63 72 6f 4b 63 4c 2a 0c     ..++++W8croKcL*.
    2eed:	18 2b 2b 2b 2b 2b 19 08 0b 08 0d 0d 1a 0c 27 96     .+++++........'.
    2efd:	0e 0a 2b 2b 2b 2b 57 39 71 71 71 4e 71 4c 2a 0c     ..++++W9qqqNqL*.
    2f0d:	18 2b 2b 2b 2b 2b 19 aa 3b 08 0d 0d 1a 0c 27 8a     .+++++..;.....'.
    2f1d:	0e 0a 2b 2b 2b 2b 57 48 63 70 71 72 62 5f 2a 0c     ..++++WHcpqrb_*.
    2f2d:	18 2b 2b 2b 2b 2b 19 b5 3b 08 0d 0d 1a 0c 27 75     .+++++..;.....'u
    2f3d:	0e 0a 2b 2b 2b 2b 57 4a 60 61 62 63 4e 4c 2a 0c     ..++++WJ`abcNL*.
    2f4d:	18 2b 2b 2b 2b 2b 19 08 0b 08 0d 0d 1a 0c 27 75     .+++++........'u
    2f5d:	0e 0a 2b 2b 2b 2b 57 4b 38 39 48 4b 38 4b 2a 0c     ..++++WK89HK8K*.
    2f6d:	18 2b 2b 2b 2b 2b 19 08 08 07 08 08 09 0c 27 64     .+++++........'d
    2f7d:	0e 0a 2b 2b 2b 2b 57 4d 63 63 63 63 63 63 2a 0c     ..++++WMcccccc*.
    2f8d:	18 2b 2b 2b 2b 2b 19 0b 0d 0d 0d 0d 0f 0c 27 64     .+++++........'d
    2f9d:	0e 0a 10 10 10 10 10 10 10 10 10 10 10 10 06 0c     ................
    2fad:	18 10 10 10 10 10 10 10 10 10 10 10 06 0c 27 64     ..............'d
    2fbd:	0a 0a 0a cd cd cd cd cd cd cd cd cd cd 87 0a 0c     ................
    2fcd:	0a 87 cd cd cd cd cd cd cd cd cd 87 0a 0c 0a 87     ................
    2fdd:	c3 f4 f4 e0 e0 d6 e0 e6 e0 e6 e0 e6 ef ef ef ef     ................
    2fed:	e6 e0 e0 e0 f4 ef f4 3c 50 50 50 50 50 50 50 3c     .......<PPPPPPP<
    2ffd:	d6 f4 f4 e0 e0 e0 e6 e6 e0 e0 e6 e6 e6 ef ef ef     ................
    300d:	e6 e6 e0 e0 f9 ef ef 3c 75 8a 96 96 96 a2 8a 3c     .......<u......<
    301d:	c3 f4 f4 e0 e6 e6 e6 e6 e6 e6 e6 e0 e6 e6 ef ef     ................
    302d:	ef e6 e0 e6 f4 f4 ef 3c 8a 8a 8a 96 c4 c4 96 3c     .......<.......<
    303d:	c3 f4 f4 e0 ef ef ef ef ef e6 e0 e0 e0 e6 ef f4     ................
    304d:	ef e6 e0 e6 f9 f4 f4 3c 96 a2 b7 b7 cd cd 96 3c     .......<.......<
    305d:	c3 ef f9 e0 ef ef ef ef e6 e0 e0 e6 e6 e6 ef f4     ................
    306d:	ef e6 e6 e6 f9 f4 ef 3c 96 c4 c4 b7 b7 b7 96 3c     .......<.......<
    307d:	c3 ef f9 e0 e6 ef ef e6 e6 e6 e6 e6 e0 e6 ef ef     ................
    308d:	ef ef e6 e0 f9 f4 ef 3c 96 c4 cd a2 a2 b0 75 3c     .......<......u<
    309d:	c3 f4 f9 d6 e0 e6 e6 ef e6 e0 e0 e6 e6 e6 e6 ef     ................
    30ad:	f4 ef e6 e0 f9 f4 f4 3c 96 b0 b0 b0 b0 a2 75 3c     .......<......u<
    30bd:	c3 f4 f9 d6 e0 e6 ef ef ef e6 e6 e6 ef e6 e6 e6     ................
    30cd:	ef ef e0 e0 f9 f4 f4 3c 96 a2 b7 b7 b0 b7 8a 3c     .......<.......<
    30dd:	c3 f4 f9 d6 e0 e0 e6 ef ef ef e6 e6 ef ef e6 e6     ................
    30ed:	e6 e6 e6 e0 f9 ef ef 3c 96 96 a2 b0 b0 a2 75 3c     .......<......u<
    30fd:	c3 f4 f9 d6 e0 e0 e6 e6 ef e6 e0 e6 e6 e6 e6 e0     ................
    310d:	e6 ef e6 e0 f9 ef f4 3c 96 b0 a2 b0 b0 a2 64 3c     .......<......d<
    311d:	c3 f4 f9 d6 e0 e0 e6 e6 e6 e6 e0 e6 e6 e6 e0 e0     ................
    312d:	e6 ef ef e6 f9 f4 f4 3c 96 b0 96 a2 96 8a 64 3c     .......<......d<
    313d:	c3 f4 f9 d6 e6 e6 e6 e6 e6 e6 e0 e0 d6 e0 e0 e6     ................
    314d:	ef ef ef ef f9 f4 f4 3c 96 96 96 96 8a b0 8a 3c     .......<.......<
    315d:	c3 ef f9 d6 e6 e6 e0 e0 e0 e0 e0 d6 d6 e0 e6 e6     ................
    316d:	e6 ef ef ef f4 f4 ef 3c 96 b0 c4 b0 b0 b0 8a 3c     .......<.......<
    317d:	c3 f4 f4 e0 e6 e0 e0 e0 e0 e0 e0 e0 e0 e0 e6 e0     ................
    318d:	e6 ef ef ef f4 ef f4 3c 96 cd c4 c4 cd cd 96 3c     .......<.......<
    319d:	d6 f4 f4 d6 e0 e0 e6 e0 e0 e0 e6 e0 e0 e0 e0 e6     ................
    31ad:	e0 e6 e6 e6 f4 ef ef 3c 8a c4 c4 c4 d7 d7 a2 3c     .......<.......<
    31bd:	c3 f4 f4 d6 e0 e0 e6 e6 e6 e6 e6 e0 e0 e0 e0 e0     ................
    31cd:	e0 e0 e0 e6 f9 f4 ef 3c 64 64 64 64 64 64 64 3c     .......<ddddddd<
    31dd:	c3 f4 f9 d6 e0 e6 e6 e6 e6 e6 e6 e6 e0 e0 e0 e0     ................
    31ed:	e0 e0 e0 e0 f4 f4 f4 3c 50 50 50 50 50 50 50 3c     .......<PPPPPPP<
    31fd:	c3 ef f4 d6 e6 e6 e6 e6 e6 e6 e6 e6 e6 e0 e0 e0     ................
    320d:	e6 e6 e0 e0 f4 f4 f4 3c 75 8a 8a 96 96 96 8a 3c     .......<u......<
    321d:	c3 ef f4 d6 e0 e0 e0 e6 e6 ef ef ef ef e0 e0 e0     ................
    322d:	e6 e6 e6 e6 f4 f4 f4 3c 8a a2 96 96 96 96 8a 3c     .......<.......<
    323d:	c3 f4 f4 d6 e0 e0 e0 e6 ef ef ef ef ef e6 e6 e6     ................
    324d:	e6 e6 ef ef f9 ef ef 3c 96 b0 a2 b0 b0 b7 8a 3c     .......<.......<
    325d:	d6 f4 f9 d6 e0 e0 e6 e6 ef ef ef ef ef ef e6 e6     ................
    326d:	ef ef ef e6 f9 f4 ef 3c 96 b0 a2 b7 b7 b7 96 3c     .......<.......<
    327d:	c3 f4 f9 d6 e6 e0 e0 e0 e6 ef ef ef ef ef e6 ef     ................
    328d:	ef ef ef ef f9 f4 ef 3c 96 b7 b7 b7 a2 b0 8a 3c     .......<.......<
    329d:	c3 ef f9 e0 e6 e0 e0 e6 e6 e6 f4 ef ef e6 e6 ef     ................
    32ad:	ef ef ef ef f9 f4 ef 3c 96 cd b0 b7 b0 b0 8a 3c     .......<.......<
    32bd:	c3 ef f9 e0 e6 e0 e6 e6 e0 e6 ef ef ef e6 e6 e6     ................
    32cd:	ef ef e6 e6 f9 f4 ef 3c 96 cd c4 b7 b0 96 64 3c     .......<......d<
    32dd:	c3 f4 f9 d6 e0 e0 e6 e6 e6 e6 ef f4 ef e6 e6 e6     ................
    32ed:	ef e6 e0 e6 f9 f4 f4 3c 96 b7 b0 b0 b0 b0 75 3c     .......<......u<
    32fd:	c3 f4 f9 d6 e6 e0 e0 e6 ef ef ef f4 ef e6 e6 e6     ................
    330d:	e6 e6 e0 e6 f9 f4 f4 3c 96 96 96 a2 b0 b0 75 3c     .......<......u<
    331d:	c3 f4 f9 d6 e0 e0 e0 e6 e6 ef ef ef ef ef e6 e0     ................
    332d:	e0 e6 e6 e6 f9 ef f4 3c 96 b7 b0 b0 a2 b0 75 3c     .......<......u<
    333d:	c3 f4 f9 d6 e6 e6 e0 e0 e6 ef ef ef f4 ef e6 e0     ................
    334d:	e6 e6 e6 e0 f9 ef ef 3c 96 cd b7 b0 a2 a2 8a 3c     .......<.......<
    335d:	c3 f4 f9 e0 ef e6 e6 e0 e6 e6 ef ef f4 ef e6 e0     ................
    336d:	e0 e6 e0 d6 f4 f4 f4 3c 96 b7 b7 cd cd cd 96 3c     .......<.......<
    337d:	c3 f4 f4 e0 e6 e6 e6 e0 e0 e6 ef ef ef e6 e6 e6     ................
    338d:	e0 e0 e0 e0 f4 f4 f4 3c 96 b7 c4 d7 d7 c4 96 3c     .......<.......<
    339d:	c3 ef f9 d6 e6 e6 e6 e0 e0 e0 e6 ef ef ef e6 e6     ................
    33ad:	d6 e0 e0 e0 f4 f4 f4 3c 8a cd c4 c4 c4 c4 a2 3c     .......<.......<
    33bd:	c3 ef f4 d6 e0 e6 e0 e0 e0 e0 e6 ef ef ef e6 e6     ................
    33cd:	e6 e0 e0 e6 f4 f4 ef 3c 64 64 64 64 64 64 64 3c     .......<ddddddd<
    33dd:	96 b7 b7 b0 b0 b0 b0 b0 a2 a2 a2 b0 b0 b7 b7 b7     ................
    33ed:	c4 c4 c4 c4 cd cd cd d7 d7 dc dc e1 e1 e7 e7 b7     ................
    33fd:	b7 dc c4 d7 cd cd b7 b7 c4 c4 d7 c4 d7 dc e1 dc     ................
    340d:	cd e1 e7 ed e1 dc f3 f7 fa c4 fc fc fc f3 ed e1     ................
    341d:	b0 d7 d7 cd c4 b7 b7 b7 cd cd d7 d7 d7 dc e1 e1     ................
    342d:	e1 e7 ed ed f3 f3 f5 fa fb fc fc fc fc fc fc dc     ................
    343d:	b0 d7 cd cd b7 b7 c4 cd cd d7 d7 dc e1 e1 e1 e7     ................
    344d:	ed ed f0 f3 f7 f7 fa fc fc fc fc fc fc fc fc dc     ................
    345d:	a2 c4 c4 b7 b7 c4 cd cd d7 d7 dc e1 e1 e7 e7 ed     ................
    346d:	f0 f0 f5 f5 fa fb fb fc fc fc fc fc fc fb fa cd     ................
    347d:	a2 cd b7 c4 c4 cd d7 d7 dc b7 dc ed ed f0 f0 f0     ................
    348d:	f0 f0 f3 f5 f5 f5 fd fc fc f3 fc fc fb f7 f0 cd     ................
    349d:	96 b7 b7 cd cd d7 c4 dc e1 e1 b0 b7 d7 d7 dc dc     ................
    34ad:	e1 e1 e7 ed ed fc fd fc fc e7 fb fa f7 ed e1 c4     ................
    34bd:	a2 cd cd d7 d7 dc e1 e1 e1 e7 ed b0 c4 dc e1 e1     ................
    34cd:	e1 e7 ed ed fc fd fc fc fc fc fa f7 f5 f3 ed c4     ................
    34dd:	a2 cd d7 d7 c4 f3 e1 e1 ed ed ed f0 b7 cd e1 e7     ................
    34ed:	ed ed f3 fd fd fc fc fb fa f7 d7 f3 f0 ed ed b7     ................
    34fd:	b0 d7 dc e1 c4 c4 f7 ed ed f0 f3 f5 f7 c4 dc ed     ................
    350d:	ed f0 fd fd fc fc fb fa f7 c4 e1 f0 ed e7 e7 b7     ................
    351d:	b0 dc dc e1 c4 a2 e7 f7 f0 f3 f5 f7 fa fc c4 dc     ................
    352d:	f3 fd fd fc fc fb fa f7 b7 f5 f5 f0 e7 e7 dc b0     ................
    353d:	b7 dc d7 e1 c4 b0 d7 e7 fa f5 f7 fb fc fc fc c4     ................
    354d:	fd fd fc fb fb fa f5 b7 f5 fc f5 ed e1 d7 cd b0     ................
    355d:	b7 e1 e1 e7 cd b0 e1 e1 f0 fc fa fc fa f7 fc fc     ................
    356d:	fc fc ed fa f7 f5 b7 f5 fc fb f3 ed e1 d7 d7 a2     ................
    357d:	b7 e7 ed ed cd b0 e1 e1 e1 f3 fd fc f7 f5 fc fc     ................
    358d:	fc fb e1 f7 f5 b7 f5 fc fa fa f0 e7 dc d7 cd a2     ................
    359d:	c4 ed f0 f0 d7 b7 e1 e7 ed ed f7 fd fc fc fb fb     ................
    35ad:	fa f5 f3 f0 b7 f5 fc fb fa f7 f0 e1 cd c4 b7 96     ................
    35bd:	c4 f0 e7 f5 d7 b7 e7 ed f0 f0 f3 fb fd fc fb fa     ................
    35cd:	fa f5 f3 d7 dc fb fa f5 f3 f0 e7 e1 cd cd b7 96     ................
    35dd:	cd ed ed fa dc c4 ed ed f3 f5 f5 fc fc fb f7 f5     ................
    35ed:	f3 f0 ed e7 b0 ed fa f5 f3 f0 e7 e1 b7 b7 b7 a2     ................
    35fd:	cd f7 fa fb e7 cd f3 f3 f5 fa fc fc fb fa f5 f3     ................
    360d:	f3 ed ed e7 e1 b0 e7 f0 ed e7 e7 e1 b7 c4 c4 a2     ................
    361d:	d7 fa fc fc ed d7 f5 f7 fa fc fb f7 ed dc f0 ed     ................
    362d:	ed e7 c4 e1 e1 dc a2 dc ed e7 e7 e1 c4 cd cd b0     ................
    363d:	dc fc fc fc ed d7 f7 fa fd fa f7 f5 f3 f0 ed ed     ................
    364d:	e7 e1 e1 dc dc cd cd a2 cd e1 e7 e7 cd cd d7 b0     ................
    365d:	dc fa f7 fc ed dc fb fd fb f7 f5 f0 f0 ed e7 cb     ................
    366d:	c5 e1 dc d7 cd cd c4 b7 a2 cd e1 ed d7 dc d7 b7     ................
    367d:	e1 f7 f5 fc ed dc fc fa f7 f3 f0 ed ed e7 4f 94     ..............O.
    368d:	8b 2d d7 cd c4 c4 b7 b7 c4 a2 d7 ed d7 d7 d7 b7     .-..............
    369d:	e1 fc fc fc e7 f7 f7 f5 f3 f0 ed e7 e1 4f 0b 89     .............O..
    36ad:	77 03 2d c4 b7 b7 c4 cd d7 d7 b7 e7 e1 e1 e1 b7     w.-.............
    36bd:	e1 fc fc fc fa f5 f3 f3 ed ed e7 e1 c8 0b 0d 88     ................
    36cd:	76 03 02 97 b7 b7 cd cd d7 d7 d7 e1 e1 e1 ed c4     v...............
    36dd:	dc fb fa f7 f5 f3 f0 ed ed e1 e1 e1 dc aa 0b 88     ................
    36ed:	76 02 97 b7 c4 cd d7 d7 dc e1 e1 e1 e1 e7 ed c4     v...............
    36fd:	dc f5 f3 f5 f3 f0 dc ed e1 e1 dc d7 d7 cd a7 74     ...............t
    370d:	65 97 c4 cd cd cd d7 d7 dc dc e1 e1 e7 e7 e1 cd     e...............
    371d:	d7 f0 e7 f0 ed ed cd e1 e1 e1 d7 d7 cd c4 b7 b7     ................
    372d:	b7 c4 cd cd d7 d7 dc e1 e1 cd e7 ed ed e7 e7 d7     ................
    373d:	cd f3 f3 ed ed ed e1 e1 dc d7 cd cd c4 b7 a2 b7     ................
    374d:	b7 b7 c4 d7 d7 dc e1 e1 e7 e7 ed f0 f0 f5 f5 d7     ................
    375d:	cd f0 ed e7 e1 e1 dc dc d7 cd c4 b7 b7 96 64 64     ..............dd
    376d:	64 64 8a dc dc e1 e1 e7 ed ed f0 f3 f3 f7 fa dc     dd..............
    377d:	c4 e7 e1 e1 e1 d7 d7 cd cd c4 b7 b7 b7 b0 96 96     ................
    378d:	96 96 c4 e1 e1 e1 e7 ed ed f0 f3 f5 f7 fb fb dc     ................
    379d:	b7 dc cd e1 dc d7 c4 cd c4 b7 c4 b0 cd cd d7 d7     ................
    37ad:	cd e1 e1 e1 dc cd ed f3 f3 c4 f5 fa fb f0 ed e1     ................
    37bd:	a2 d7 cd cd cd cd c4 c4 c4 c4 c4 cd cd cd cd cd     ................
    37cd:	d7 d7 d7 d7 d7 d7 d7 d7 dc dc e1 e7 e7 ed ed c4     ................

000037dd <textures32_pal>:
    37dd:	00 00 00 00 00 12 00 14 00 41 00 82 02 49 02 60     .........A...I.`
    37ed:	02 c0 02 c9 03 0c 03 40 03 6e 03 a0 03 af 03 c8     .......@.n......
    37fd:	08 61 08 62 08 82 08 a3 08 c3 08 c4 08 e5 09 05     .a.b............
    380d:	09 a7 0a 82 0a 8a 0a cc 10 a2 10 a3 10 c3 10 e4     ................
    381d:	11 04 11 05 11 26 11 46 11 67 11 68 11 88 12 08     .....&.F.g.h....
    382d:	12 ed 13 2f 13 50 18 c3 18 e4 18 f0 19 04 19 25     .../.P.........%
    383d:	19 26 19 45 19 46 19 67 19 87 19 88 19 a9 19 c9     .&.E.F.g........
    384d:	19 ca 19 eb 1a 0b 1b 43 21 04 21 25 21 45 21 66     .......C!.!%!E!f
    385d:	21 67 21 86 21 87 21 a8 21 a9 21 c8 21 c9 21 ca     !g!.!.!.!.!.!.!.
    386d:	21 eb 22 0a 22 0b 22 0c 22 2d 22 4d 22 4e 23 44     !."."."."-"M"N#D
    387d:	29 45 29 66 29 86 29 a7 29 a9 29 c8 29 e9 29 ea     )E)f).).).).).).
    388d:	29 eb 2a 09 2a 0a 2a 0b 2a 0c 2a 2d 2a 4b 2a 4d     ).*.*.*.*.*-*K*M
    389d:	2a 6e 2a 6f 2a 8f 2a 90 31 86 31 8e 31 a7 31 c7     *n*o*.*.1.1.1.1.
    38ad:	31 e8 31 e9 32 09 32 2a 32 4b 32 4c 32 6e 32 b0     1.1.2.2*2K2L2n2.
    38bd:	32 b1 32 d1 32 f2 33 12 33 26 39 c7 39 d1 39 f2     2.2.2.3.3&9.9.9.
    38cd:	3a 08 3a 29 3a 49 3a 4a 3a 6b 3a 8c 3a 8e 3a b0     :.:):I:J:k:.:.:.
    38dd:	3a d0 3a d1 3a f2 3a f3 3b 12 3b 13 3b 34 3b 4d     :.:.:.:.;.;.;4;M
    38ed:	3b 87 3b a8 42 08 42 12 42 49 42 4a 42 6b 42 8b     ;.;.B.B.BIBJBkB.
    38fd:	43 33 43 55 43 76 43 96 43 c9 44 10 4a 49 4a 4d     C3CUCvC.C.D.JIJM
    390d:	4a 6a 4a 8a 4a ab 4a cc 4a ce 4b 0e 4b 31 4b 95     JjJ.J.J.J.K.K1K.
    391d:	4b d8 4c 19 52 aa 52 ec 53 0c 53 0d 53 2e 53 4a     K.L.R.R.S.S.S.SJ
    392d:	53 72 53 93 53 ca 53 f7 53 f9 54 19 54 3b 54 5c     SrS.S.S.S.T.T;T\
    393d:	5a cb 5b 2d 5b 70 5b 90 5b f5 5c 4c 5c 9d 63 0c     Z.[-[p[.[.\L\.c.
    394d:	63 4d 63 6e 63 8e 63 8f 63 b0 63 f4 64 15 64 7a     cMcnc.c.c.c.d.dz
    395d:	64 9b 64 dd 64 fe 68 00 6b 4d 6b 51 6b 8e 6b 8f     d.d.d.h.kMkQk.k.
    396d:	6b ed 6b f2 6c 12 6c 2e 6c 99 73 8e 73 d0 74 33     k.k.l.l.l.s.s.t3
    397d:	74 54 74 76 74 d9 74 da 74 fd 75 3e 78 00 7b cf     tTtvt.t.t.u>x.{.
    398d:	7c 31 7c 95 7d 1b 7d 1c 84 10 84 52 84 d7 85 7e     |1|.}.}....R...~
    399d:	88 00 8c 51 8c b3 8c b4 8d 5b 8d 9f 90 00 94 92     ...Q.....[......
    39ad:	95 16 95 38 95 9b 95 9c 95 df 9c d3 9e 1f a0 00     ...8............
    39bd:	a5 14 a5 fd a6 3f ad 55 b0 00 b5 96 b6 7f bd d7     .....?.U........
    39cd:	be 9f c0 00 c6 18 ce 59 d6 ba e7 1c 00 00 00 00     .......Y........

000039dd <textures32_pal_dark>:
    39dd:	00 00 00 00 00 0c 00 0e 00 20 00 41 01 86 01 a0     ......... .A....
    39ed:	01 e0 01 e6 02 08 02 40 02 6a 02 80 02 8a 02 a5     .......@.j......
    39fd:	00 40 00 41 00 41 00 62 00 82 00 82 00 83 00 a3     .@.A.A.b........
    3a0d:	01 24 01 c1 01 c7 01 e8 08 61 08 62 08 82 08 82     .$.......a.b....
    3a1d:	08 a2 08 a3 08 c4 08 e4 08 e4 08 e5 09 05 09 65     ...............e
    3a2d:	0a 09 0a 2a 0a 4b 10 82 10 82 10 8b 10 a2 10 c3     ...*.K..........
    3a3d:	10 c4 10 e3 10 e4 10 e4 11 04 11 05 11 26 11 26     .............&.&
    3a4d:	11 27 11 47 11 67 12 42 10 a2 10 c3 10 e3 10 e4     .'.G.g.B........
    3a5d:	10 e4 11 04 11 04 11 25 11 26 11 25 11 26 11 27     .......%.&.%.&.'
    3a6d:	11 47 11 67 11 67 11 68 11 89 11 89 11 8a 12 42     .G.g.g.h.......B
    3a7d:	18 e3 18 e4 19 04 19 24 19 26 19 25 19 46 19 47     .......$.&.%.F.G
    3a8d:	19 47 19 66 19 67 19 67 19 68 19 89 19 87 19 89     .G.f.g.g.h......
    3a9d:	19 aa 19 aa 19 ca 19 cb 21 04 21 0a 21 24 21 24     ........!.!.!$!$
    3aad:	21 45 21 46 21 66 21 87 21 87 21 88 21 aa 21 cb     !E!F!f!.!.!.!.!.
    3abd:	21 cc 21 ec 22 0c 22 0c 22 24 21 24 21 2c 21 4c     !.!."."."$!$!,!L
    3acd:	21 65 21 86 21 86 21 87 21 a7 21 c8 21 ca 21 cb     !e!.!.!.!.!.!.!.
    3add:	21 eb 21 ec 22 0c 22 0d 22 0c 22 0d 22 2e 22 49     !.!."."."."."."I
    3aed:	22 64 22 85 29 65 29 6c 29 86 29 87 29 a7 29 c7     "d".)e)l).).).).
    3afd:	2a 2d 2a 4f 2a 6f 2a 6f 2a a6 2a cb 31 86 31 89     *-*O*o*o*.*.1.1.
    3b0d:	31 a7 31 c7 31 c7 31 e8 31 ea 32 0a 32 2c 32 6f     1.1.1.1.1.2.2,2o
    3b1d:	32 b1 32 d2 39 c7 3a 08 3a 08 3a 09 3a 2a 3a 47     2.2.9.:.:.:.:*:G
    3b2d:	3a 6c 3a 6d 3a a7 3a b0 3a b2 3a d2 3a f3 3b 14     :l:m:.:.:.:.:.;.
    3b3d:	39 e7 3a 29 3a 6b 3a 6b 3a af 3b 08 3b 34 42 08     9.:):k:k:.;.;4B.
    3b4d:	42 49 42 6a 42 6a 42 6a 42 8b 42 ae 42 cf 43 12     BIBjBjBjB.B.B.C.
    3b5d:	43 33 43 54 43 75 48 00 4a 49 4a 4c 4a 6a 4a 6a     C3CTCuH.JIJLJjJj
    3b6d:	4a a9 4a ac 4a cc 4a ea 4b 32 52 6a 52 ab 52 ed     J.J.J.J.K2RjR.R.
    3b7d:	53 0e 53 0f 53 52 53 52 53 74 53 b5 50 00 52 aa     S.S.SRSRStS.P.R.
    3b8d:	52 ec 53 2f 53 93 53 94 5a cb 5b 0c 5b 50 5b d5     R.S/S.S.Z.[.[P[.
    3b9d:	60 00 63 0c 63 4d 63 4e 63 b3 63 f6 60 00 63 2c     `.c.cMcNc.c.`.c,
    3bad:	63 8f 63 b1 63 f3 63 f4 64 16 6b 4d 6c 56 70 00     c.c.c.c.d.kMlVp.
    3bbd:	73 8e 74 34 74 56 7b af 78 00 7b ef 7c 96 84 10     s.t4tV{.x.{.|...
    3bcd:	84 96 88 00 8c 51 94 72 94 b2 a4 f4 00 00 00 00     .....Q.r........

00003bdd <_trig>:
    3bdd:	00 06 0d 13 19 1f 25 2c 32 38 3e 44 4a 50 56 5c     ......%,28>DJPV\
    3bed:	62 67 6d 73 78 7e 83 88 8e 93 98 9d a2 a7 ab b0     bgmsx~..........
    3bfd:	b4 b9 bd c1 c5 c9 cd d0 d4 d7 db de e1 e4 e7 e9     ................
    3c0d:	ec ee f0 f2 f4 f6 f7 f9 fa fb fc fd fe fe ff ff     ................

00003c1d <_map>:
    3c1d:	01 01 01 01 06 02 02 02 08 00 00 01 00 00 00 03     ................
    3c2d:	01 01 00 01 00 02 02 02 06 00 00 00 00 00 00 05     ................
    3c3d:	04 07 07 00 07 07 00 05 04 00 00 00 07 05 00 03     ................
    3c4d:	03 00 00 00 00 08 00 05 04 04 04 04 04 05 05 05     ................
	...

00003c5e <__ctors_end>:
    3c5e:	11 24       	eor	r1, r1
    3c60:	1f be       	out	0x3f, r1	; 63
    3c62:	cf ef       	ldi	r28, 0xFF	; 255
    3c64:	da e0       	ldi	r29, 0x0A	; 10
    3c66:	de bf       	out	0x3e, r29	; 62
    3c68:	cd bf       	out	0x3d, r28	; 61

00003c6a <__do_copy_data>:
    3c6a:	11 e0       	ldi	r17, 0x01	; 1
    3c6c:	a0 e0       	ldi	r26, 0x00	; 0
    3c6e:	b1 e0       	ldi	r27, 0x01	; 1
    3c70:	e8 e9       	ldi	r30, 0x98	; 152
    3c72:	fb e5       	ldi	r31, 0x5B	; 91
    3c74:	02 c0       	rjmp	.+4      	; 0x3c7a <.do_copy_data_start>

00003c76 <.do_copy_data_loop>:
    3c76:	05 90       	lpm	r0, Z+
    3c78:	0d 92       	st	X+, r0

00003c7a <.do_copy_data_start>:
    3c7a:	a4 31       	cpi	r26, 0x14	; 20
    3c7c:	b1 07       	cpc	r27, r17
    3c7e:	d9 f7       	brne	.-10     	; 0x3c76 <.do_copy_data_loop>

00003c80 <__do_clear_bss>:
    3c80:	12 e0       	ldi	r17, 0x02	; 2
    3c82:	a4 e1       	ldi	r26, 0x14	; 20
    3c84:	b1 e0       	ldi	r27, 0x01	; 1
    3c86:	01 c0       	rjmp	.+2      	; 0x3c8a <.do_clear_bss_start>

00003c88 <.do_clear_bss_loop>:
    3c88:	1d 92       	st	X+, r1

00003c8a <.do_clear_bss_start>:
    3c8a:	a2 34       	cpi	r26, 0x42	; 66
    3c8c:	b1 07       	cpc	r27, r17
    3c8e:	e1 f7       	brne	.-8      	; 0x3c88 <.do_clear_bss_loop>
    3c90:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <main>
    3c94:	0c 94 ca 2d 	jmp	0x5b94	; 0x5b94 <_exit>

00003c98 <__bad_interrupt>:
    3c98:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00003c9c <_Z8shutdownv>:

void OLED_Init();

void shutdown()
{
    REGEN0;
    3c9c:	76 98       	cbi	0x0e, 6	; 14
    // This won't execute under normal circumstances
}
    3c9e:	08 95       	ret

00003ca0 <main>:

int main(void)
{
//  Set for 16 MHz clock
    CPU_PRESCALE(0);
    3ca0:	20 e8       	ldi	r18, 0x80	; 128
    3ca2:	20 93 61 00 	sts	0x0061, r18
    3ca6:	10 92 61 00 	sts	0x0061, r1
    BOARD_INIT();
    3caa:	9f ef       	ldi	r25, 0xFF	; 255
    3cac:	95 b9       	out	0x05, r25	; 5
    3cae:	94 b9       	out	0x04, r25	; 4
    3cb0:	8f ee       	ldi	r24, 0xEF	; 239
    3cb2:	8b b9       	out	0x0b, r24	; 11
    3cb4:	9a b9       	out	0x0a, r25	; 10
    3cb6:	80 e4       	ldi	r24, 0x40	; 64
    3cb8:	8d b9       	out	0x0d, r24	; 13
    3cba:	91 bb       	out	0x11, r25	; 17
    3cbc:	8f e0       	ldi	r24, 0x0F	; 15
    3cbe:	80 bb       	out	0x10, r24	; 16
    3cc0:	76 9a       	sbi	0x0e, 6	; 14
    3cc2:	81 e8       	ldi	r24, 0x81	; 129
    3cc4:	85 bf       	out	0x35, r24	; 53
    3cc6:	25 bf       	out	0x35, r18	; 53
	OLED_Init();
    3cc8:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_Z9OLED_Initv>
    Application::Init();
    3ccc:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <_ZN11Application4InitEv>
    for (;;)
        Application::Loop(~PINF);
    3cd0:	8f b1       	in	r24, 0x0f	; 15
    3cd2:	80 95       	com	r24
    3cd4:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <_ZN11Application4LoopEh>
    3cd8:	fb cf       	rjmp	.-10     	; 0x3cd0 <main+0x30>

00003cda <_Z6ComOuth>:

void ComOut(uchar c)
{
    DATAPORTLO = c;
    3cda:	85 b9       	out	0x05, r24	; 5
    DC0;
    3cdc:	5a 98       	cbi	0x0b, 2	; 11
    CS0;
    3cde:	5d 98       	cbi	0x0b, 5	; 11
    WR0;
    3ce0:	59 98       	cbi	0x0b, 1	; 11
    WR1;
    3ce2:	59 9a       	sbi	0x0b, 1	; 11
    CS1;
    3ce4:	5d 9a       	sbi	0x0b, 5	; 11
    DC1;
    3ce6:	5a 9a       	sbi	0x0b, 2	; 11
}
    3ce8:	08 95       	ret

00003cea <_Z7Initialv>:
    121,
    127
#endif
};

void Initial(void)
    3cea:	cf 93       	push	r28
    3cec:	df 93       	push	r29
{
    CS0;
    3cee:	5d 98       	cbi	0x0b, 5	; 11
    RESET0;
    3cf0:	5b 98       	cbi	0x0b, 3	; 11
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    3cf2:	80 e4       	ldi	r24, 0x40	; 64
    3cf4:	9c e9       	ldi	r25, 0x9C	; 156
    3cf6:	fc 01       	movw	r30, r24
    3cf8:	31 97       	sbiw	r30, 0x01	; 1
    3cfa:	f1 f7       	brne	.-4      	; 0x3cf8 <_Z7Initialv+0xe>
    delay(10);
    CS1;
    3cfc:	5d 9a       	sbi	0x0b, 5	; 11
    RESET1;
    3cfe:	5b 9a       	sbi	0x0b, 3	; 11
    3d00:	01 97       	sbiw	r24, 0x01	; 1
    3d02:	f1 f7       	brne	.-4      	; 0x3d00 <_Z7Initialv+0x16>
    3d04:	cc ea       	ldi	r28, 0xAC	; 172
    3d06:	d0 e0       	ldi	r29, 0x00	; 0
    3d08:	06 c0       	rjmp	.+12     	; 0x3d16 <_Z7Initialv+0x2c>
    delay(10);
    
    uchar i = sizeof(_SSD1332);
    const uchar* d = _SSD1332;
    while (i--)
    3d0a:	fe 01       	movw	r30, r28
        ComOut(pgm_read_byte(d++));
    3d0c:	21 96       	adiw	r28, 0x01	; 1
    3d0e:	e4 91       	lpm	r30, Z+
    3d10:	8e 2f       	mov	r24, r30
    3d12:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
    RESET1;
    delay(10);
    
    uchar i = sizeof(_SSD1332);
    const uchar* d = _SSD1332;
    while (i--)
    3d16:	80 e0       	ldi	r24, 0x00	; 0
    3d18:	cd 3d       	cpi	r28, 0xDD	; 221
    3d1a:	d8 07       	cpc	r29, r24
    3d1c:	b1 f7       	brne	.-20     	; 0x3d0a <_Z7Initialv+0x20>
        ComOut(pgm_read_byte(d++));
    SDN1;   // Turn on 12v
    3d1e:	5c 9a       	sbi	0x0b, 4	; 11
}
    3d20:	df 91       	pop	r29
    3d22:	cf 91       	pop	r28
    3d24:	08 95       	ret

00003d26 <_Z15OLED_FrameBeginv>:
    uchar x = 0;
    uchar y = 0;
    uchar x_size = 96;
    uchar y_size = 64;
    
    ComOut(0x15);          // Set Column Address
    3d26:	85 e1       	ldi	r24, 0x15	; 21
    3d28:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
	ComOut(x);             // Start
    3d2c:	80 e0       	ldi	r24, 0x00	; 0
    3d2e:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
	ComOut(x+x_size-1);    // End
    3d32:	8f e5       	ldi	r24, 0x5F	; 95
    3d34:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
	ComOut(0x75);          // Set Row Address
    3d38:	85 e7       	ldi	r24, 0x75	; 117
    3d3a:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
	ComOut(y);             // Start
    3d3e:	80 e0       	ldi	r24, 0x00	; 0
    3d40:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
	ComOut(y+y_size-1);    // End
    3d44:	8f e3       	ldi	r24, 0x3F	; 63
    3d46:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
}
    3d4a:	08 95       	ret

00003d4c <_Z9Rectanglehhhhhhh>:
    ComOut(r >> 2);
}

void OLED_FrameBegin(); // eh?
//  check command lock
void Rectangle(uchar x1,uchar y1,uchar x2,uchar y2,uchar r, uchar g, uchar b)
    3d4c:	8f 92       	push	r8
    3d4e:	9f 92       	push	r9
    3d50:	af 92       	push	r10
    3d52:	bf 92       	push	r11
    3d54:	cf 92       	push	r12
    3d56:	df 92       	push	r13
    3d58:	ef 92       	push	r14
    3d5a:	ff 92       	push	r15
    3d5c:	0f 93       	push	r16
    3d5e:	1f 93       	push	r17
    3d60:	b8 2e       	mov	r11, r24
    3d62:	a6 2e       	mov	r10, r22
    3d64:	94 2e       	mov	r9, r20
    3d66:	82 2e       	mov	r8, r18
{   // Note: same as Line, framerect capable
    OLED_FrameBegin();
    3d68:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <_Z15OLED_FrameBeginv>
    ComOut(0x26);
    3d6c:	86 e2       	ldi	r24, 0x26	; 38
    3d6e:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
    ComOut(0x11);   // reverse copy enable, fill enable
    3d72:	81 e1       	ldi	r24, 0x11	; 17
    3d74:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>

    ComOut(0x22);
    3d78:	82 e2       	ldi	r24, 0x22	; 34
    3d7a:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
    ComOut(x1);
    3d7e:	8b 2d       	mov	r24, r11
    3d80:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
    ComOut(y1);
    3d84:	8a 2d       	mov	r24, r10
    3d86:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
    ComOut(x2);
    3d8a:	89 2d       	mov	r24, r9
    3d8c:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
    ComOut(y2);
    3d90:	88 2d       	mov	r24, r8
    3d92:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
    ComOut(b >> 2);
    3d96:	dd 24       	eor	r13, r13
    3d98:	d5 94       	asr	r13
    3d9a:	c7 94       	ror	r12
    3d9c:	d5 94       	asr	r13
    3d9e:	c7 94       	ror	r12
    3da0:	8c 2d       	mov	r24, r12
    3da2:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
    ComOut(g >> 2);
    3da6:	ff 24       	eor	r15, r15
    3da8:	f5 94       	asr	r15
    3daa:	e7 94       	ror	r14
    3dac:	f5 94       	asr	r15
    3dae:	e7 94       	ror	r14
    3db0:	8e 2d       	mov	r24, r14
    3db2:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
    ComOut(r >> 2);
    3db6:	10 e0       	ldi	r17, 0x00	; 0
    3db8:	15 95       	asr	r17
    3dba:	07 95       	ror	r16
    3dbc:	15 95       	asr	r17
    3dbe:	07 95       	ror	r16
    3dc0:	80 2f       	mov	r24, r16
    3dc2:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
    ComOut(b >> 2);
    3dc6:	8c 2d       	mov	r24, r12
    3dc8:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
    ComOut(g >> 2);
    3dcc:	8e 2d       	mov	r24, r14
    3dce:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
    ComOut(r >> 2);
    3dd2:	80 2f       	mov	r24, r16
    3dd4:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
}
    3dd8:	1f 91       	pop	r17
    3dda:	0f 91       	pop	r16
    3ddc:	ff 90       	pop	r15
    3dde:	ef 90       	pop	r14
    3de0:	df 90       	pop	r13
    3de2:	cf 90       	pop	r12
    3de4:	bf 90       	pop	r11
    3de6:	af 90       	pop	r10
    3de8:	9f 90       	pop	r9
    3dea:	8f 90       	pop	r8
    3dec:	08 95       	ret

00003dee <_Z9OLED_Initv>:
    while (i--)
        ComOut(pgm_read_byte(d++));
    SDN1;   // Turn on 12v
}

void OLED_Init(void)
    3dee:	cf 92       	push	r12
    3df0:	ef 92       	push	r14
    3df2:	0f 93       	push	r16
{
    Initial(); 
    3df4:	0e 94 75 1e 	call	0x3cea	; 0x3cea <_Z7Initialv>
    //OLED_draw_img(0,0,96,64,frame);
    Rectangle(0,0,96,64,0xFF,0x00,0x00);    // RED ish
    3df8:	80 e0       	ldi	r24, 0x00	; 0
    3dfa:	60 e0       	ldi	r22, 0x00	; 0
    3dfc:	40 e6       	ldi	r20, 0x60	; 96
    3dfe:	20 e4       	ldi	r18, 0x40	; 64
    3e00:	0f ef       	ldi	r16, 0xFF	; 255
    3e02:	ee 24       	eor	r14, r14
    3e04:	cc 24       	eor	r12, r12
    3e06:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_Z9Rectanglehhhhhhh>
}
    3e0a:	0f 91       	pop	r16
    3e0c:	ef 90       	pop	r14
    3e0e:	cf 90       	pop	r12
    3e10:	08 95       	ret

00003e12 <_Z11OLED_PixelsPKhi>:
	ComOut(0x75);          // Set Row Address
	ComOut(y);             // Start
	ComOut(y+y_size-1);    // End
}

void OLED_Pixels(const uchar* p, int count)
    3e12:	ac 01       	movw	r20, r24
{
    CS0;
    3e14:	5d 98       	cbi	0x0b, 5	; 11
    do {
        byte c = min(255,count);
    3e16:	9b 01       	movw	r18, r22
    3e18:	6f 3f       	cpi	r22, 0xFF	; 255
    3e1a:	71 05       	cpc	r23, r1
    3e1c:	19 f0       	breq	.+6      	; 0x3e24 <_Z11OLED_PixelsPKhi+0x12>
    3e1e:	14 f0       	brlt	.+4      	; 0x3e24 <_Z11OLED_PixelsPKhi+0x12>
    3e20:	2f ef       	ldi	r18, 0xFF	; 255
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	92 2f       	mov	r25, r18
        count -= c;
    3e26:	62 1b       	sub	r22, r18
    3e28:	71 09       	sbc	r23, r1
    3e2a:	fa 01       	movw	r30, r20
    3e2c:	0a c0       	rjmp	.+20     	; 0x3e42 <_Z11OLED_PixelsPKhi+0x30>
	    while (c--)
	    {
            DATAPORTLO = *p++;
    3e2e:	80 81       	ld	r24, Z
    3e30:	85 b9       	out	0x05, r24	; 5
            WR0;
    3e32:	59 98       	cbi	0x0b, 1	; 11
            WR1;
    3e34:	59 9a       	sbi	0x0b, 1	; 11
            DATAPORTLO = *p++;
    3e36:	81 81       	ldd	r24, Z+1	; 0x01
    3e38:	85 b9       	out	0x05, r24	; 5
	ComOut(0x75);          // Set Row Address
	ComOut(y);             // Start
	ComOut(y+y_size-1);    // End
}

void OLED_Pixels(const uchar* p, int count)
    3e3a:	32 96       	adiw	r30, 0x02	; 2
	    {
            DATAPORTLO = *p++;
            WR0;
            WR1;
            DATAPORTLO = *p++;
            WR0;
    3e3c:	59 98       	cbi	0x0b, 1	; 11
            WR1;
    3e3e:	59 9a       	sbi	0x0b, 1	; 11
    3e40:	21 50       	subi	r18, 0x01	; 1
{
    CS0;
    do {
        byte c = min(255,count);
        count -= c;
	    while (c--)
    3e42:	22 23       	and	r18, r18
    3e44:	a1 f7       	brne	.-24     	; 0x3e2e <_Z11OLED_PixelsPKhi+0x1c>
    3e46:	89 2f       	mov	r24, r25
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	88 0f       	add	r24, r24
    3e4c:	99 1f       	adc	r25, r25
    3e4e:	48 0f       	add	r20, r24
    3e50:	59 1f       	adc	r21, r25
}

void OLED_Pixels(const uchar* p, int count)
{
    CS0;
    do {
    3e52:	61 15       	cp	r22, r1
    3e54:	71 05       	cpc	r23, r1
    3e56:	f9 f6       	brne	.-66     	; 0x3e16 <_Z11OLED_PixelsPKhi+0x4>
            DATAPORTLO = *p++;
            WR0;
            WR1;
        }
    } while (count);
    CS1;
    3e58:	5d 9a       	sbi	0x0b, 5	; 11
}
    3e5a:	08 95       	ret

00003e5c <_Z11BlitPalettehPhS_>:

void BlitPalette(uchar c,byte* buffer,byte *palette)
    3e5c:	98 2f       	mov	r25, r24
    3e5e:	db 01       	movw	r26, r22
{
	CS0;
    3e60:	5d 98       	cbi	0x0b, 5	; 11
    3e62:	10 c0       	rjmp	.+32     	; 0x3e84 <_Z11BlitPalettehPhS_+0x28>
    while (c--)
    {
        byte* p = palette + ((*buffer++) << 1);
    3e64:	ed 91       	ld	r30, X+
    3e66:	f0 e0       	ldi	r31, 0x00	; 0
    3e68:	ee 0f       	add	r30, r30
    3e6a:	ff 1f       	adc	r31, r31
    3e6c:	e4 0f       	add	r30, r20
    3e6e:	f5 1f       	adc	r31, r21
        DATAPORTLO = pgm_read_byte(p++);
    3e70:	84 91       	lpm	r24, Z+
    3e72:	85 b9       	out	0x05, r24	; 5
        WR0;
    3e74:	59 98       	cbi	0x0b, 1	; 11
        WR1;
    3e76:	59 9a       	sbi	0x0b, 1	; 11
        DATAPORTLO = pgm_read_byte(p++);
    3e78:	31 96       	adiw	r30, 0x01	; 1
    3e7a:	e4 91       	lpm	r30, Z+
    3e7c:	e5 b9       	out	0x05, r30	; 5
        WR0;
    3e7e:	59 98       	cbi	0x0b, 1	; 11
        WR1;
    3e80:	59 9a       	sbi	0x0b, 1	; 11
    3e82:	91 50       	subi	r25, 0x01	; 1
}

void BlitPalette(uchar c,byte* buffer,byte *palette)
{
	CS0;
    while (c--)
    3e84:	99 23       	and	r25, r25
    3e86:	71 f7       	brne	.-36     	; 0x3e64 <_Z11BlitPalettehPhS_+0x8>
        WR1;
        DATAPORTLO = pgm_read_byte(p++);
        WR0;
        WR1;
    }
    CS1;
    3e88:	5d 9a       	sbi	0x0b, 5	; 11
}
    3e8a:	08 95       	ret

00003e8c <_Z8OLED_RowhPhS_>:

void OLED_Row(uchar y,byte* buffer,byte *palette)
    3e8c:	cf 92       	push	r12
    3e8e:	df 92       	push	r13
    3e90:	ef 92       	push	r14
    3e92:	ff 92       	push	r15
    3e94:	1f 93       	push	r17
    3e96:	18 2f       	mov	r17, r24
    3e98:	7b 01       	movw	r14, r22
    3e9a:	6a 01       	movw	r12, r20
{
    ComOut(0x15);          // Set Column Address
    3e9c:	85 e1       	ldi	r24, 0x15	; 21
    3e9e:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
	ComOut(0);             // Start
    3ea2:	80 e0       	ldi	r24, 0x00	; 0
    3ea4:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
	ComOut(96-1);         // End
    3ea8:	8f e5       	ldi	r24, 0x5F	; 95
    3eaa:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
	ComOut(0x75);          // Set Row Address
    3eae:	85 e7       	ldi	r24, 0x75	; 117
    3eb0:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
	ComOut(y);             // Start
    3eb4:	81 2f       	mov	r24, r17
    3eb6:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
	ComOut(y);             // End
    3eba:	81 2f       	mov	r24, r17
    3ebc:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
	BlitPalette(96,buffer,palette);
    3ec0:	80 e6       	ldi	r24, 0x60	; 96
    3ec2:	b7 01       	movw	r22, r14
    3ec4:	a6 01       	movw	r20, r12
    3ec6:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_Z11BlitPalettehPhS_>
}
    3eca:	1f 91       	pop	r17
    3ecc:	ff 90       	pop	r15
    3ece:	ef 90       	pop	r14
    3ed0:	df 90       	pop	r13
    3ed2:	cf 90       	pop	r12
    3ed4:	08 95       	ret

00003ed6 <_Z10OLED_SlicehPhS_>:

void OLED_Slice(uchar x,byte* buffer,byte *palette)
    3ed6:	cf 92       	push	r12
    3ed8:	df 92       	push	r13
    3eda:	ef 92       	push	r14
    3edc:	ff 92       	push	r15
    3ede:	1f 93       	push	r17
    3ee0:	18 2f       	mov	r17, r24
    3ee2:	7b 01       	movw	r14, r22
    3ee4:	6a 01       	movw	r12, r20
{
    ComOut(0x15);          // Set Column Address
    3ee6:	85 e1       	ldi	r24, 0x15	; 21
    3ee8:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
	ComOut(x);             // Start
    3eec:	81 2f       	mov	r24, r17
    3eee:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
	ComOut(x);             // End
    3ef2:	81 2f       	mov	r24, r17
    3ef4:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
	ComOut(0x75);          // Set Row Address
    3ef8:	85 e7       	ldi	r24, 0x75	; 117
    3efa:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
	ComOut(0);             // Start
    3efe:	80 e0       	ldi	r24, 0x00	; 0
    3f00:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
	ComOut(64-1);         // End
    3f04:	8f e3       	ldi	r24, 0x3F	; 63
    3f06:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <_Z6ComOuth>
	BlitPalette(64,buffer,palette);
    3f0a:	80 e4       	ldi	r24, 0x40	; 64
    3f0c:	b7 01       	movw	r22, r14
    3f0e:	a6 01       	movw	r20, r12
    3f10:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <_Z11BlitPalettehPhS_>
}
    3f14:	1f 91       	pop	r17
    3f16:	ff 90       	pop	r15
    3f18:	ef 90       	pop	r14
    3f1a:	df 90       	pop	r13
    3f1c:	cf 90       	pop	r12
    3f1e:	08 95       	ret

00003f20 <_ZL15spiTransferLongm>:
  long2char;

  long2char.l = data;

  // send the given data
  SPDR = long2char.c[3];
    3f20:	9e bd       	out	0x2e, r25	; 46
  // wait for transfer to complete
  loop_until_bit_is_set(SPSR, SPIF);
    3f22:	0d b4       	in	r0, 0x2d	; 45
    3f24:	07 fe       	sbrs	r0, 7
    3f26:	fd cf       	rjmp	.-6      	; 0x3f22 <_ZL15spiTransferLongm+0x2>
  long2char.c[3] = SPDR;
    3f28:	9e b5       	in	r25, 0x2e	; 46

  SPDR = long2char.c[2];
    3f2a:	8e bd       	out	0x2e, r24	; 46
  // wait for transfer to complete
  loop_until_bit_is_set(SPSR, SPIF);
    3f2c:	0d b4       	in	r0, 0x2d	; 45
    3f2e:	07 fe       	sbrs	r0, 7
    3f30:	fd cf       	rjmp	.-6      	; 0x3f2c <_ZL15spiTransferLongm+0xc>
  long2char.c[2] = SPDR;
    3f32:	8e b5       	in	r24, 0x2e	; 46

  SPDR = long2char.c[1];
    3f34:	7e bd       	out	0x2e, r23	; 46
  // wait for transfer to complete
  loop_until_bit_is_set(SPSR, SPIF);
    3f36:	0d b4       	in	r0, 0x2d	; 45
    3f38:	07 fe       	sbrs	r0, 7
    3f3a:	fd cf       	rjmp	.-6      	; 0x3f36 <_ZL15spiTransferLongm+0x16>
  long2char.c[1] = SPDR;
    3f3c:	7e b5       	in	r23, 0x2e	; 46

  SPDR = long2char.c[0];
    3f3e:	6e bd       	out	0x2e, r22	; 46
  // wait for transfer to complete
  loop_until_bit_is_set(SPSR, SPIF);
    3f40:	0d b4       	in	r0, 0x2d	; 45
    3f42:	07 fe       	sbrs	r0, 7
    3f44:	fd cf       	rjmp	.-6      	; 0x3f40 <_ZL15spiTransferLongm+0x20>
  long2char.c[0] = SPDR;
    3f46:	6e b5       	in	r22, 0x2e	; 46

  return long2char.l;
}
    3f48:	08 95       	ret

00003f4a <_ZL12deselectCardv>:
}


static void deselectCard(void) {
  // Send 8 clock cycles
  SPI_SS_HIGH();
    3f4a:	89 9a       	sbi	0x11, 1	; 17
    3f4c:	9f ef       	ldi	r25, 0xFF	; 255
    3f4e:	94 b9       	out	0x04, r25	; 4
    3f50:	85 b1       	in	r24, 0x05	; 5
    3f52:	86 60       	ori	r24, 0x06	; 6
    3f54:	85 b9       	out	0x05, r24	; 5


static byte spiTransferByte(byte data)
{
  // send the given data
  SPDR = data;
    3f56:	9e bd       	out	0x2e, r25	; 46

  // wait for transfer to complete
  loop_until_bit_is_set(SPSR, 7);
    3f58:	0d b4       	in	r0, 0x2d	; 45
    3f5a:	07 fe       	sbrs	r0, 7
    3f5c:	fd cf       	rjmp	.-6      	; 0x3f58 <_ZL12deselectCardv+0xe>
  // *** reading of the SPSR and SPDR are crucial
  // *** to the clearing of the SPIF flag
  // *** in non-interrupt mode

  // return the received data
  return SPDR;
    3f5e:	8e b5       	in	r24, 0x2e	; 46

static void deselectCard(void) {
  // Send 8 clock cycles
  SPI_SS_HIGH();
  spiTransferByte(0xff);
}
    3f60:	08 95       	ret

00003f62 <_ZL10crc7updatehh>:

static byte crc7update(byte crc, const byte data) {
    3f62:	38 2f       	mov	r19, r24
    3f64:	70 e8       	ldi	r23, 0x80	; 128
    3f66:	40 e0       	ldi	r20, 0x00	; 0
    3f68:	50 e0       	ldi	r21, 0x00	; 0
  byte c;

  c = data;
  for (i = 0x80; i > 0; i >>= 1) {
    bit = crc & 0x40;
    if (c & i) {
    3f6a:	e6 2f       	mov	r30, r22
    3f6c:	f0 e0       	ldi	r31, 0x00	; 0
      bit = !bit;
    3f6e:	a1 e0       	ldi	r26, 0x01	; 1
    }
    crc <<= 1;
    if (bit) {
      crc ^= 0x09;
    3f70:	69 e0       	ldi	r22, 0x09	; 9
  bool bit;
  byte c;

  c = data;
  for (i = 0x80; i > 0; i >>= 1) {
    bit = crc & 0x40;
    3f72:	83 2f       	mov	r24, r19
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	26 e0       	ldi	r18, 0x06	; 6
    3f78:	96 95       	lsr	r25
    3f7a:	87 95       	ror	r24
    3f7c:	2a 95       	dec	r18
    3f7e:	e1 f7       	brne	.-8      	; 0x3f78 <_ZL10crc7updatehh+0x16>
    3f80:	28 2f       	mov	r18, r24
    3f82:	21 70       	andi	r18, 0x01	; 1
    if (c & i) {
    3f84:	87 2f       	mov	r24, r23
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	8e 23       	and	r24, r30
    3f8a:	9f 23       	and	r25, r31
    3f8c:	89 2b       	or	r24, r25
    3f8e:	09 f0       	breq	.+2      	; 0x3f92 <_ZL10crc7updatehh+0x30>
      bit = !bit;
    3f90:	2a 27       	eor	r18, r26
    }
    crc <<= 1;
    3f92:	33 0f       	add	r19, r19
    if (bit) {
    3f94:	21 11       	cpse	r18, r1
      crc ^= 0x09;
    3f96:	36 27       	eor	r19, r22
  byte i;
  bool bit;
  byte c;

  c = data;
  for (i = 0x80; i > 0; i >>= 1) {
    3f98:	76 95       	lsr	r23
    3f9a:	4f 5f       	subi	r20, 0xFF	; 255
    3f9c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f9e:	48 30       	cpi	r20, 0x08	; 8
    3fa0:	51 05       	cpc	r21, r1
    3fa2:	39 f7       	brne	.-50     	; 0x3f72 <_ZL10crc7updatehh+0x10>
      crc ^= 0x09;
    }
  }
  crc &= 0x7f;
  return crc & 0x7f;
}
    3fa4:	83 2f       	mov	r24, r19
    3fa6:	8f 77       	andi	r24, 0x7F	; 127
    3fa8:	08 95       	ret

00003faa <_ZN3mmc11sendCommandEhmh>:
 * parameter and transmits all of it to the SD card. If requested
 * the card will be deselected afterwards.
 */
int mmc::sendCommand(const byte  command,
const uint32_t parameter,
const byte  deselect) {
    3faa:	7f 92       	push	r7
    3fac:	8f 92       	push	r8
    3fae:	9f 92       	push	r9
    3fb0:	af 92       	push	r10
    3fb2:	bf 92       	push	r11
    3fb4:	cf 92       	push	r12
    3fb6:	df 92       	push	r13
    3fb8:	ef 92       	push	r14
    3fba:	ff 92       	push	r15
    3fbc:	0f 93       	push	r16
    3fbe:	1f 93       	push	r17
    3fc0:	5a 01       	movw	r10, r20
    3fc2:	6b 01       	movw	r12, r22
    3fc4:	92 2e       	mov	r9, r18

  byte  i,crc,errorcount;
  uint16_t counter;

  long2char.l = parameter;
  crc = crc7update(0  , 0x40+command);
    3fc6:	40 e4       	ldi	r20, 0x40	; 64
    3fc8:	e4 2e       	mov	r14, r20
    3fca:	e8 0e       	add	r14, r24
    3fcc:	80 e0       	ldi	r24, 0x00	; 0
    3fce:	6e 2d       	mov	r22, r14
    3fd0:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_ZL10crc7updatehh>
  crc = crc7update(crc, long2char.c[3]);
    3fd4:	6d 2d       	mov	r22, r13
    3fd6:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_ZL10crc7updatehh>
  crc = crc7update(crc, long2char.c[2]);
    3fda:	6c 2d       	mov	r22, r12
    3fdc:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_ZL10crc7updatehh>
  crc = crc7update(crc, long2char.c[1]);
    3fe0:	6b 2d       	mov	r22, r11
    3fe2:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_ZL10crc7updatehh>
  crc = crc7update(crc, long2char.c[0]);
    3fe6:	6a 2d       	mov	r22, r10
    3fe8:	0e 94 b1 1f 	call	0x3f62	; 0x3f62 <_ZL10crc7updatehh>
  crc = (crc << 1) | 1;
    3fec:	f8 2e       	mov	r15, r24
    3fee:	ff 0c       	add	r15, r15
    3ff0:	21 e0       	ldi	r18, 0x01	; 1
    3ff2:	f2 2a       	or	r15, r18
    3ff4:	00 e0       	ldi	r16, 0x00	; 0

  errorcount = 0;
  while (errorcount < CONFIG_SD_AUTO_RETRIES) {
    // Select card
    SPI_SS_LOW();
    3ff6:	37 ef       	ldi	r19, 0xF7	; 247
    3ff8:	73 2e       	mov	r7, r19


static byte spiTransferByte(byte data)
{
  // send the given data
  SPDR = data;
    3ffa:	88 24       	eor	r8, r8
    3ffc:	8a 94       	dec	r8
  crc = (crc << 1) | 1;

  errorcount = 0;
  while (errorcount < CONFIG_SD_AUTO_RETRIES) {
    // Select card
    SPI_SS_LOW();
    3ffe:	89 98       	cbi	0x11, 1	; 17
    4000:	74 b8       	out	0x04, r7	; 4


static byte spiTransferByte(byte data)
{
  // send the given data
  SPDR = data;
    4002:	ee bc       	out	0x2e, r14	; 46

  // wait for transfer to complete
  loop_until_bit_is_set(SPSR, 7);
    4004:	0d b4       	in	r0, 0x2d	; 45
    4006:	07 fe       	sbrs	r0, 7
    4008:	fd cf       	rjmp	.-6      	; 0x4004 <_ZN3mmc11sendCommandEhmh+0x5a>
  // *** reading of the SPSR and SPDR are crucial
  // *** to the clearing of the SPIF flag
  // *** in non-interrupt mode

  // return the received data
  return SPDR;
    400a:	8e b5       	in	r24, 0x2e	; 46
    // Select card
    SPI_SS_LOW();

    // Transfer command
    spiTransferByte(0x40+command);
    spiTransferLong(parameter);
    400c:	b5 01       	movw	r22, r10
    400e:	c6 01       	movw	r24, r12
    4010:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <_ZL15spiTransferLongm>


static byte spiTransferByte(byte data)
{
  // send the given data
  SPDR = data;
    4014:	fe bc       	out	0x2e, r15	; 46

  // wait for transfer to complete
  loop_until_bit_is_set(SPSR, 7);
    4016:	0d b4       	in	r0, 0x2d	; 45
    4018:	07 fe       	sbrs	r0, 7
    401a:	fd cf       	rjmp	.-6      	; 0x4016 <_ZN3mmc11sendCommandEhmh+0x6c>
  // *** reading of the SPSR and SPDR are crucial
  // *** to the clearing of the SPIF flag
  // *** in non-interrupt mode

  // return the received data
  return SPDR;
    401c:	8e b5       	in	r24, 0x2e	; 46
    401e:	80 e0       	ldi	r24, 0x00	; 0
    4020:	90 e0       	ldi	r25, 0x00	; 0


static byte spiTransferByte(byte data)
{
  // send the given data
  SPDR = data;
    4022:	8e bc       	out	0x2e, r8	; 46

  // wait for transfer to complete
  loop_until_bit_is_set(SPSR, 7);
    4024:	0d b4       	in	r0, 0x2d	; 45
    4026:	07 fe       	sbrs	r0, 7
    4028:	fd cf       	rjmp	.-6      	; 0x4024 <_ZN3mmc11sendCommandEhmh+0x7a>
  // *** reading of the SPSR and SPDR are crucial
  // *** to the clearing of the SPIF flag
  // *** in non-interrupt mode

  // return the received data
  return SPDR;
    402a:	1e b5       	in	r17, 0x2e	; 46
    spiTransferLong(parameter);
    spiTransferByte(crc);

    // Wait for a valid response
    counter = 0;
    do {
    402c:	17 ff       	sbrs	r17, 7
    402e:	05 c0       	rjmp	.+10     	; 0x403a <_ZN3mmc11sendCommandEhmh+0x90>
      i = spiTransferByte(0xff);
      counter++;
    4030:	01 96       	adiw	r24, 0x01	; 1
    spiTransferLong(parameter);
    spiTransferByte(crc);

    // Wait for a valid response
    counter = 0;
    do {
    4032:	20 e1       	ldi	r18, 0x10	; 16
    4034:	80 30       	cpi	r24, 0x00	; 0
    4036:	92 07       	cpc	r25, r18
    4038:	a1 f7       	brne	.-24     	; 0x4022 <_ZN3mmc11sendCommandEhmh+0x78>
    }
    while (i & 0x80 && counter < 0x1000);

    // Check for CRC error
    // can't reliably retry unless deselect is allowed
    if (deselect && (i & STATUS_CRC_ERROR)) {
    403a:	99 20       	and	r9, r9
    403c:	39 f0       	breq	.+14     	; 0x404c <_ZN3mmc11sendCommandEhmh+0xa2>
    403e:	13 ff       	sbrs	r17, 3
    4040:	13 c0       	rjmp	.+38     	; 0x4068 <_ZN3mmc11sendCommandEhmh+0xbe>
      //      uart_putc('x');
      deselectCard();
    4042:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <_ZL12deselectCardv>
      errorcount++;
    4046:	0f 5f       	subi	r16, 0xFF	; 255
  crc = crc7update(crc, long2char.c[1]);
  crc = crc7update(crc, long2char.c[0]);
  crc = (crc << 1) | 1;

  errorcount = 0;
  while (errorcount < CONFIG_SD_AUTO_RETRIES) {
    4048:	05 30       	cpi	r16, 0x05	; 5
    404a:	c9 f6       	brne	.-78     	; 0x3ffe <_ZN3mmc11sendCommandEhmh+0x54>
    if (deselect) deselectCard();
    break;
  }

  return i;
}
    404c:	81 2f       	mov	r24, r17
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	1f 91       	pop	r17
    4052:	0f 91       	pop	r16
    4054:	ff 90       	pop	r15
    4056:	ef 90       	pop	r14
    4058:	df 90       	pop	r13
    405a:	cf 90       	pop	r12
    405c:	bf 90       	pop	r11
    405e:	af 90       	pop	r10
    4060:	9f 90       	pop	r9
    4062:	8f 90       	pop	r8
    4064:	7f 90       	pop	r7
    4066:	08 95       	ret
      deselectCard();
      errorcount++;
      continue;
    }

    if (deselect) deselectCard();
    4068:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <_ZL12deselectCardv>
    406c:	ef cf       	rjmp	.-34     	; 0x404c <_ZN3mmc11sendCommandEhmh+0xa2>

0000406e <_ZN3mmc10initializeEv>:
  return i;
}



byte mmc::initialize() {
    406e:	cf 93       	push	r28
    4070:	df 93       	push	r29
  byte  i;
  uint16_t counter;
  uint32_t answer;

  disk_state = DISK_ERROR;
    4072:	83 e0       	ldi	r24, 0x03	; 3
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	90 93 15 01 	sts	0x0115, r25
    407a:	80 93 14 01 	sts	0x0114, r24
    

  // setup SPI interface:
  //   interrupts disabled, SPI enabled, MSB first, master mode,
  //   leading edge rising, sample on leading edge, clock = f/128 for wake-up,
  SPCR = 0x53;
    407e:	83 e5       	ldi	r24, 0x53	; 83
    4080:	8c bd       	out	0x2c, r24	; 44

  // clear status
  i = SPSR;
    4082:	8d b5       	in	r24, 0x2d	; 45


  // clear recieve buffer
  i = SPDR;
    4084:	8e b5       	in	r24, 0x2e	; 46


  SPI_SS_HIGH();
    4086:	89 9a       	sbi	0x11, 1	; 17
    4088:	8f ef       	ldi	r24, 0xFF	; 255
    408a:	84 b9       	out	0x04, r24	; 4
    408c:	85 b1       	in	r24, 0x05	; 5
    408e:	86 60       	ori	r24, 0x06	; 6
    4090:	85 b9       	out	0x05, r24	; 5
    4092:	80 e0       	ldi	r24, 0x00	; 0


static byte spiTransferByte(byte data)
{
  // send the given data
  SPDR = data;
    4094:	9f ef       	ldi	r25, 0xFF	; 255
    4096:	9e bd       	out	0x2e, r25	; 46

  // wait for transfer to complete
  loop_until_bit_is_set(SPSR, 7);
    4098:	0d b4       	in	r0, 0x2d	; 45
    409a:	07 fe       	sbrs	r0, 7
    409c:	fd cf       	rjmp	.-6      	; 0x4098 <_ZN3mmc10initializeEv+0x2a>
  // *** reading of the SPSR and SPDR are crucial
  // *** to the clearing of the SPIF flag
  // *** in non-interrupt mode

  // return the received data
  return SPDR;
    409e:	2e b5       	in	r18, 0x2e	; 46


  SPI_SS_HIGH();

  // Send 80 clks
  for (i=0; i<10; i++) {
    40a0:	8f 5f       	subi	r24, 0xFF	; 255
    40a2:	8a 30       	cpi	r24, 0x0A	; 10
    40a4:	c1 f7       	brne	.-16     	; 0x4096 <_ZN3mmc10initializeEv+0x28>
    spiTransferByte(0xFF);
  }

  // Reset card
  i = sendCommand(GO_IDLE_STATE, 0, 1);
    40a6:	80 e0       	ldi	r24, 0x00	; 0
    40a8:	40 e0       	ldi	r20, 0x00	; 0
    40aa:	50 e0       	ldi	r21, 0x00	; 0
    40ac:	60 e0       	ldi	r22, 0x00	; 0
    40ae:	70 e0       	ldi	r23, 0x00	; 0
    40b0:	21 e0       	ldi	r18, 0x01	; 1
    40b2:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <_ZN3mmc11sendCommandEhmh>
    40b6:	98 2f       	mov	r25, r24
  if (i != 1) {
    40b8:	81 30       	cpi	r24, 0x01	; 1
    40ba:	09 f0       	breq	.+2      	; 0x40be <_ZN3mmc10initializeEv+0x50>
    40bc:	44 c0       	rjmp	.+136    	; 0x4146 <_ZN3mmc10initializeEv+0xd8>
  }

  // setup SPI interface:
  //   interrupts disabled, SPI enabled, MSB first, master mode,
  //   leading edge rising, sample on leading edge, clock = f/4 for speeeed,
  SPCR = 0x50;
    40be:	80 e5       	ldi	r24, 0x50	; 80
    40c0:	8c bd       	out	0x2c, r24	; 44

  // Enable SPI double speed mode -> clock = f/2
  SPSR = _BV(SPI2X);
    40c2:	9d bd       	out	0x2d, r25	; 45
    40c4:	cf ef       	ldi	r28, 0xFF	; 255
    40c6:	df ef       	ldi	r29, 0xFF	; 255
  counter = 0xffff;
  // According to the spec READ_OCR should work at this point
  // without retries. One of my Sandisk-cards thinks otherwise.
  do {
    // Send CMD58: READ_OCR
    i = sendCommand(READ_OCR, 0, 0);
    40c8:	8a e3       	ldi	r24, 0x3A	; 58
    40ca:	40 e0       	ldi	r20, 0x00	; 0
    40cc:	50 e0       	ldi	r21, 0x00	; 0
    40ce:	60 e0       	ldi	r22, 0x00	; 0
    40d0:	70 e0       	ldi	r23, 0x00	; 0
    40d2:	20 e0       	ldi	r18, 0x00	; 0
    40d4:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <_ZN3mmc11sendCommandEhmh>


  counter = 0xffff;
  // According to the spec READ_OCR should work at this point
  // without retries. One of my Sandisk-cards thinks otherwise.
  do {
    40d8:	82 30       	cpi	r24, 0x02	; 2
    40da:	c8 f1       	brcs	.+114    	; 0x414e <_ZN3mmc10initializeEv+0xe0>
    40dc:	21 97       	sbiw	r28, 0x01	; 1
    40de:	8f ef       	ldi	r24, 0xFF	; 255
    40e0:	cf 3f       	cpi	r28, 0xFF	; 255
    40e2:	d8 07       	cpc	r29, r24
    40e4:	a1 f1       	breq	.+104    	; 0x414e <_ZN3mmc10initializeEv+0xe0>
    40e6:	f0 cf       	rjmp	.-32     	; 0x40c8 <_ZN3mmc10initializeEv+0x5a>
    }
  }
  while (i > 1 && counter-- > 0);

  if (counter > 0) {
    answer = spiTransferLong(0);
    40e8:	60 e0       	ldi	r22, 0x00	; 0
    40ea:	70 e0       	ldi	r23, 0x00	; 0
    40ec:	80 e0       	ldi	r24, 0x00	; 0
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <_ZL15spiTransferLongm>

    // See if the card likes our supply voltage
    if (!(answer & SD_SUPPLY_VOLTAGE)) {
    40f4:	82 fd       	sbrc	r24, 2
    40f6:	03 c0       	rjmp	.+6      	; 0x40fe <_ZN3mmc10initializeEv+0x90>
      // The code isn't set up to completely ignore the card,
      // but at least report it as nonworking
      deselectCard();
    40f8:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <_ZL12deselectCardv>
    40fc:	24 c0       	rjmp	.+72     	; 0x4146 <_ZN3mmc10initializeEv+0xd8>
      return STA_NOINIT | STA_NODISK;
    40fe:	cf ef       	ldi	r28, 0xFF	; 255
    4100:	df ef       	ldi	r29, 0xFF	; 255
  }

  // Keep sending CMD1 (SEND_OP_COND) command until zero response
  counter = 0xffff;
  do {
    i = sendCommand(SEND_OP_COND, 1L<<30, 1);
    4102:	81 e0       	ldi	r24, 0x01	; 1
    4104:	40 e0       	ldi	r20, 0x00	; 0
    4106:	50 e0       	ldi	r21, 0x00	; 0
    4108:	60 e0       	ldi	r22, 0x00	; 0
    410a:	70 e4       	ldi	r23, 0x40	; 64
    410c:	21 e0       	ldi	r18, 0x01	; 1
    410e:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <_ZN3mmc11sendCommandEhmh>
    counter--;
    4112:	21 97       	sbiw	r28, 0x01	; 1
    }
  }

  // Keep sending CMD1 (SEND_OP_COND) command until zero response
  counter = 0xffff;
  do {
    4114:	88 23       	and	r24, r24
    4116:	19 f0       	breq	.+6      	; 0x411e <_ZN3mmc10initializeEv+0xb0>
    4118:	20 97       	sbiw	r28, 0x00	; 0
    411a:	99 f7       	brne	.-26     	; 0x4102 <_ZN3mmc10initializeEv+0x94>
    411c:	14 c0       	rjmp	.+40     	; 0x4146 <_ZN3mmc10initializeEv+0xd8>
    i = sendCommand(SEND_OP_COND, 1L<<30, 1);
    counter--;
  }
  while (i != 0 && counter > 0);

  if (counter==0) {
    411e:	cd 2b       	or	r28, r29
    4120:	91 f0       	breq	.+36     	; 0x4146 <_ZN3mmc10initializeEv+0xd8>
    return STA_NOINIT | STA_NODISK;
  }

  // Send MMC CMD16(SET_BLOCKLEN) to 512 bytes
  i = sendCommand(SET_BLOCKLEN, 512, 1);
    4122:	80 e1       	ldi	r24, 0x10	; 16
    4124:	40 e0       	ldi	r20, 0x00	; 0
    4126:	52 e0       	ldi	r21, 0x02	; 2
    4128:	60 e0       	ldi	r22, 0x00	; 0
    412a:	70 e0       	ldi	r23, 0x00	; 0
    412c:	21 e0       	ldi	r18, 0x01	; 1
    412e:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <_ZN3mmc11sendCommandEhmh>
  if (i != 0) {
    4132:	88 23       	and	r24, r24
    4134:	41 f4       	brne	.+16     	; 0x4146 <_ZN3mmc10initializeEv+0xd8>
    return STA_NOINIT | STA_NODISK;
  }

  // Thats it!
  disk_state = DISK_OK;
    4136:	82 e0       	ldi	r24, 0x02	; 2
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	90 93 15 01 	sts	0x0115, r25
    413e:	80 93 14 01 	sts	0x0114, r24
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	01 c0       	rjmp	.+2      	; 0x4148 <_ZN3mmc10initializeEv+0xda>
  return RES_OK;
    4146:	83 e0       	ldi	r24, 0x03	; 3
}
    4148:	df 91       	pop	r29
    414a:	cf 91       	pop	r28
    414c:	08 95       	ret
      // deselectCard();
    }
  }
  while (i > 1 && counter-- > 0);

  if (counter > 0) {
    414e:	cd 2b       	or	r28, r29
    4150:	b1 f2       	breq	.-84     	; 0x40fe <_ZN3mmc10initializeEv+0x90>
    4152:	ca cf       	rjmp	.-108    	; 0x40e8 <_ZN3mmc10initializeEv+0x7a>

00004154 <_ZN3mmc11readSectorsEPhmh>:
  public:
    SPIEnabler() { SPCR = 0x50; };
    ~SPIEnabler() { SPCR = 0; };
};

byte mmc::readSectors(byte *buffer, uint32_t sector, byte count)
    4154:	bf 92       	push	r11
    4156:	cf 92       	push	r12
    4158:	df 92       	push	r13
    415a:	ef 92       	push	r14
    415c:	ff 92       	push	r15
    415e:	0f 93       	push	r16
    4160:	1f 93       	push	r17
    4162:	cf 93       	push	r28
    4164:	df 93       	push	r29
    4166:	ec 01       	movw	r28, r24
    4168:	7a 01       	movw	r14, r20
    416a:	8b 01       	movw	r16, r22
    416c:	b2 2e       	mov	r11, r18
}

class SPIEnabler
{
  public:
    SPIEnabler() { SPCR = 0x50; };
    416e:	80 e5       	ldi	r24, 0x50	; 80
    4170:	8c bd       	out	0x2c, r24	; 44
    4172:	dd 24       	eor	r13, r13


static byte spiTransferByte(byte data)
{
  // send the given data
  SPDR = data;
    4174:	cc 24       	eor	r12, r12
    4176:	ca 94       	dec	r12
    4178:	55 c0       	rjmp	.+170    	; 0x4224 <_ZN3mmc11readSectorsEPhmh+0xd0>
  for (sec=0;sec<count;sec++)
  {
    errorcount = 0;
    while (errorcount < CONFIG_SD_AUTO_RETRIES)
    {
        res = sendCommand(READ_SINGLE_BLOCK, (sector+sec) << 9, 0);
    417a:	b8 01       	movw	r22, r16
    417c:	a7 01       	movw	r20, r14
    417e:	e9 e0       	ldi	r30, 0x09	; 9
    4180:	44 0f       	add	r20, r20
    4182:	55 1f       	adc	r21, r21
    4184:	66 1f       	adc	r22, r22
    4186:	77 1f       	adc	r23, r23
    4188:	ea 95       	dec	r30
    418a:	d1 f7       	brne	.-12     	; 0x4180 <_ZN3mmc11readSectorsEPhmh+0x2c>
    418c:	81 e1       	ldi	r24, 0x11	; 17
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <_ZN3mmc11sendCommandEhmh>

        if (res != 0) {
    4194:	88 23       	and	r24, r24
    4196:	89 f4       	brne	.+34     	; 0x41ba <_ZN3mmc11readSectorsEPhmh+0x66>
            SPI_SS_HIGH();
            disk_state = DISK_ERROR;
    4198:	2f ef       	ldi	r18, 0xFF	; 255
    419a:	3f e0       	ldi	r19, 0x0F	; 15


static byte spiTransferByte(byte data)
{
  // send the given data
  SPDR = data;
    419c:	ce bc       	out	0x2e, r12	; 46

  // wait for transfer to complete
  loop_until_bit_is_set(SPSR, 7);
    419e:	0d b4       	in	r0, 0x2d	; 45
    41a0:	07 fe       	sbrs	r0, 7
    41a2:	fd cf       	rjmp	.-6      	; 0x419e <_ZN3mmc11readSectorsEPhmh+0x4a>
  // *** reading of the SPSR and SPDR are crucial
  // *** to the clearing of the SPIF flag
  // *** in non-interrupt mode

  // return the received data
  return SPDR;
    41a4:	8e b5       	in	r24, 0x2e	; 46

static char sdResponse(byte expected)
{
  unsigned short count = 0x0FFF;

  while ((spiTransferByte(0xFF) != expected) && count )
    41a6:	8e 3f       	cpi	r24, 0xFE	; 254
    41a8:	31 f0       	breq	.+12     	; 0x41b6 <_ZN3mmc11readSectorsEPhmh+0x62>
    41aa:	21 15       	cp	r18, r1
    41ac:	31 05       	cpc	r19, r1
    41ae:	29 f0       	breq	.+10     	; 0x41ba <_ZN3mmc11readSectorsEPhmh+0x66>
    count--;
    41b0:	21 50       	subi	r18, 0x01	; 1
    41b2:	30 40       	sbci	r19, 0x00	; 0
    41b4:	f3 cf       	rjmp	.-26     	; 0x419c <_ZN3mmc11readSectorsEPhmh+0x48>
            disk_state = DISK_ERROR;
            return RES_ERROR;
        }

        // Wait for data token
        if (!sdResponse(0xFE)) {
    41b6:	23 2b       	or	r18, r19
    41b8:	71 f4       	brne	.+28     	; 0x41d6 <_ZN3mmc11readSectorsEPhmh+0x82>
            SPI_SS_HIGH();
    41ba:	89 9a       	sbi	0x11, 1	; 17
    41bc:	8f ef       	ldi	r24, 0xFF	; 255
    41be:	84 b9       	out	0x04, r24	; 4
    41c0:	85 b1       	in	r24, 0x05	; 5
    41c2:	86 60       	ori	r24, 0x06	; 6
    41c4:	85 b9       	out	0x05, r24	; 5
            disk_state = DISK_ERROR;
    41c6:	83 e0       	ldi	r24, 0x03	; 3
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	90 93 15 01 	sts	0x0115, r25
    41ce:	80 93 14 01 	sts	0x0114, r24
    41d2:	81 e0       	ldi	r24, 0x01	; 1
    41d4:	2b c0       	rjmp	.+86     	; 0x422c <_ZN3mmc11readSectorsEPhmh+0xd8>
            return RES_ERROR;
        }

     // Read 512 bytes, hopefully quickly but not too quickly
        SPDR = 0xFF;    // first        
    41d6:	ce bc       	out	0x2e, r12	; 46
    41d8:	fe 01       	movw	r30, r28
    41da:	9f ef       	ldi	r25, 0xFF	; 255
        byte i = 0xFF;
        do
        {
            byte a;
            loop_until_bit_is_set(SPSR, 7);
    41dc:	0d b4       	in	r0, 0x2d	; 45
    41de:	07 fe       	sbrs	r0, 7
    41e0:	fd cf       	rjmp	.-6      	; 0x41dc <_ZN3mmc11readSectorsEPhmh+0x88>
            a = SPDR;
    41e2:	8e b5       	in	r24, 0x2e	; 46
	        SPDR = 0xFF;
    41e4:	ce bc       	out	0x2e, r12	; 46
	        *buffer++ = a;
    41e6:	80 83       	st	Z, r24
            loop_until_bit_is_set(SPSR, 7);
    41e8:	0d b4       	in	r0, 0x2d	; 45
    41ea:	07 fe       	sbrs	r0, 7
    41ec:	fd cf       	rjmp	.-6      	; 0x41e8 <_ZN3mmc11readSectorsEPhmh+0x94>
	        a = SPDR;
    41ee:	8e b5       	in	r24, 0x2e	; 46
	        SPDR = 0xFF;
    41f0:	ce bc       	out	0x2e, r12	; 46
	        *buffer++ = a;
    41f2:	81 83       	std	Z+1, r24	; 0x01
  public:
    SPIEnabler() { SPCR = 0x50; };
    ~SPIEnabler() { SPCR = 0; };
};

byte mmc::readSectors(byte *buffer, uint32_t sector, byte count)
    41f4:	32 96       	adiw	r30, 0x02	; 2
        }

     // Read 512 bytes, hopefully quickly but not too quickly
        SPDR = 0xFF;    // first        
        byte i = 0xFF;
        do
    41f6:	99 23       	and	r25, r25
    41f8:	11 f0       	breq	.+4      	; 0x41fe <_ZN3mmc11readSectorsEPhmh+0xaa>
    41fa:	91 50       	subi	r25, 0x01	; 1
    41fc:	ef cf       	rjmp	.-34     	; 0x41dc <_ZN3mmc11readSectorsEPhmh+0x88>
    41fe:	c0 50       	subi	r28, 0x00	; 0
    4200:	de 4f       	sbci	r29, 0xFE	; 254
	        a = SPDR;
	        SPDR = 0xFF;
	        *buffer++ = a;
	    } while (i--);
	
        loop_until_bit_is_set(SPSR, 7);
    4202:	0d b4       	in	r0, 0x2d	; 45
    4204:	07 fe       	sbrs	r0, 7
    4206:	fd cf       	rjmp	.-6      	; 0x4202 <_ZN3mmc11readSectorsEPhmh+0xae>
        i = SPDR;                       // CRC byte 0
    4208:	8e b5       	in	r24, 0x2e	; 46


static byte spiTransferByte(byte data)
{
  // send the given data
  SPDR = data;
    420a:	ce bc       	out	0x2e, r12	; 46

  // wait for transfer to complete
  loop_until_bit_is_set(SPSR, 7);
    420c:	0d b4       	in	r0, 0x2d	; 45
    420e:	07 fe       	sbrs	r0, 7
    4210:	fd cf       	rjmp	.-6      	; 0x420c <_ZN3mmc11readSectorsEPhmh+0xb8>
  // *** reading of the SPSR and SPDR are crucial
  // *** to the clearing of the SPIF flag
  // *** in non-interrupt mode

  // return the received data
  return SPDR;
    4212:	8e b5       	in	r24, 0x2e	; 46
        i = SPDR;                       // CRC byte 0
        spiTransferByte(0xFF);          // CRC byte 1

        break;
    }
    deselectCard();
    4214:	0e 94 a5 1f 	call	0x3f4a	; 0x3f4a <_ZL12deselectCardv>
{
    SPIEnabler enabler;

  byte sec,res,errorcount;

  for (sec=0;sec<count;sec++)
    4218:	d3 94       	inc	r13
    421a:	08 94       	sec
    421c:	e1 1c       	adc	r14, r1
    421e:	f1 1c       	adc	r15, r1
    4220:	01 1d       	adc	r16, r1
    4222:	11 1d       	adc	r17, r1
    4224:	db 14       	cp	r13, r11
    4226:	08 f4       	brcc	.+2      	; 0x422a <_ZN3mmc11readSectorsEPhmh+0xd6>
    4228:	a8 cf       	rjmp	.-176    	; 0x417a <_ZN3mmc11readSectorsEPhmh+0x26>
    422a:	80 e0       	ldi	r24, 0x00	; 0

class SPIEnabler
{
  public:
    SPIEnabler() { SPCR = 0x50; };
    ~SPIEnabler() { SPCR = 0; };
    422c:	1c bc       	out	0x2c, r1	; 44

    if (errorcount >= CONFIG_SD_AUTO_RETRIES) return RES_ERROR;
  }

  return RES_OK;
}
    422e:	df 91       	pop	r29
    4230:	cf 91       	pop	r28
    4232:	1f 91       	pop	r17
    4234:	0f 91       	pop	r16
    4236:	ff 90       	pop	r15
    4238:	ef 90       	pop	r14
    423a:	df 90       	pop	r13
    423c:	cf 90       	pop	r12
    423e:	bf 90       	pop	r11
    4240:	08 95       	ret

00004242 <_ZN9microfat210initializeEPhPFhS0_mhE>:
  READFN read_sectors;
}
vars;


bool microfat2::initialize(byte* sector_buffer, READFN sector_reader)
    4242:	ef 92       	push	r14
    4244:	ff 92       	push	r15
    4246:	0f 93       	push	r16
    4248:	1f 93       	push	r17
    424a:	fb 01       	movw	r30, r22
{
  bool return_val = false;

  vars.sector_buffer = sector_buffer;
    424c:	90 93 43 01 	sts	0x0143, r25
    4250:	80 93 42 01 	sts	0x0142, r24
  vars.read_sectors = sector_reader;
    4254:	70 93 45 01 	sts	0x0145, r23
    4258:	60 93 44 01 	sts	0x0144, r22

  if (0 == vars.read_sectors(vars.sector_buffer, 0, 1))
    425c:	40 e0       	ldi	r20, 0x00	; 0
    425e:	50 e0       	ldi	r21, 0x00	; 0
    4260:	60 e0       	ldi	r22, 0x00	; 0
    4262:	70 e0       	ldi	r23, 0x00	; 0
    4264:	21 e0       	ldi	r18, 0x01	; 1
    4266:	09 95       	icall
    4268:	88 23       	and	r24, r24
    426a:	09 f0       	breq	.+2      	; 0x426e <_ZN9microfat210initializeEPhPFhS0_mhE+0x2c>
    426c:	68 c0       	rjmp	.+208    	; 0x433e <_ZN9microfat210initializeEPhPFhS0_mhE+0xfc>
  {
    partition_record_t* p = (partition_record_t*)&vars.sector_buffer[0x1be];
    426e:	e0 91 42 01 	lds	r30, 0x0142
    4272:	f0 91 43 01 	lds	r31, 0x0143
    long boot_sector = p->lbaAddrOfFirstSector;
    4276:	e2 54       	subi	r30, 0x42	; 66
    4278:	fe 4f       	sbci	r31, 0xFE	; 254
    427a:	e0 84       	ldd	r14, Z+8	; 0x08
    427c:	f1 84       	ldd	r15, Z+9	; 0x09
    427e:	02 85       	ldd	r16, Z+10	; 0x0a
    4280:	13 85       	ldd	r17, Z+11	; 0x0b
    4282:	ee 5b       	subi	r30, 0xBE	; 190
    4284:	f1 40       	sbci	r31, 0x01	; 1

    if (0 == vars.read_sectors(vars.sector_buffer, boot_sector, 1))
    4286:	a0 91 44 01 	lds	r26, 0x0144
    428a:	b0 91 45 01 	lds	r27, 0x0145
    428e:	cf 01       	movw	r24, r30
    4290:	b8 01       	movw	r22, r16
    4292:	a7 01       	movw	r20, r14
    4294:	21 e0       	ldi	r18, 0x01	; 1
    4296:	fd 01       	movw	r30, r26
    4298:	09 95       	icall
    429a:	88 23       	and	r24, r24
    429c:	09 f0       	breq	.+2      	; 0x42a0 <_ZN9microfat210initializeEPhPFhS0_mhE+0x5e>
    429e:	4f c0       	rjmp	.+158    	; 0x433e <_ZN9microfat210initializeEPhPFhS0_mhE+0xfc>
    {
      boot_sector_t* b = (boot_sector_t*)vars.sector_buffer;
    42a0:	e0 91 42 01 	lds	r30, 0x0142
    42a4:	f0 91 43 01 	lds	r31, 0x0143
      if (BYTES_PER_SECTOR == b->bytesPerSector)
    42a8:	83 85       	ldd	r24, Z+11	; 0x0b
    42aa:	94 85       	ldd	r25, Z+12	; 0x0c
    42ac:	80 50       	subi	r24, 0x00	; 0
    42ae:	92 40       	sbci	r25, 0x02	; 2
    42b0:	09 f0       	breq	.+2      	; 0x42b4 <_ZN9microfat210initializeEPhPFhS0_mhE+0x72>
    42b2:	45 c0       	rjmp	.+138    	; 0x433e <_ZN9microfat210initializeEPhPFhS0_mhE+0xfc>
      {
        vars.sectors_per_cluster = b->sectorsPerCluster;
    42b4:	85 85       	ldd	r24, Z+13	; 0x0d
    42b6:	80 93 36 01 	sts	0x0136, r24
    42ba:	10 92 37 01 	sts	0x0137, r1
        vars.root_directory_sector = boot_sector + b->reservedSectors + (b->fatCopies * b->sectorsPerFAT);
    42be:	26 85       	ldd	r18, Z+14	; 0x0e
    42c0:	37 85       	ldd	r19, Z+15	; 0x0f
    42c2:	40 e0       	ldi	r20, 0x00	; 0
    42c4:	50 e0       	ldi	r21, 0x00	; 0
    42c6:	2e 0d       	add	r18, r14
    42c8:	3f 1d       	adc	r19, r15
    42ca:	40 1f       	adc	r20, r16
    42cc:	51 1f       	adc	r21, r17
    42ce:	80 89       	ldd	r24, Z+16	; 0x10
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	66 89       	ldd	r22, Z+22	; 0x16
    42d4:	77 89       	ldd	r23, Z+23	; 0x17
    42d6:	dc 01       	movw	r26, r24
    42d8:	a6 9f       	mul	r26, r22
    42da:	c0 01       	movw	r24, r0
    42dc:	a7 9f       	mul	r26, r23
    42de:	90 0d       	add	r25, r0
    42e0:	b6 9f       	mul	r27, r22
    42e2:	90 0d       	add	r25, r0
    42e4:	11 24       	eor	r1, r1
    42e6:	a0 e0       	ldi	r26, 0x00	; 0
    42e8:	b0 e0       	ldi	r27, 0x00	; 0
    42ea:	28 0f       	add	r18, r24
    42ec:	39 1f       	adc	r19, r25
    42ee:	4a 1f       	adc	r20, r26
    42f0:	5b 1f       	adc	r21, r27
    42f2:	20 93 3a 01 	sts	0x013A, r18
    42f6:	30 93 3b 01 	sts	0x013B, r19
    42fa:	40 93 3c 01 	sts	0x013C, r20
    42fe:	50 93 3d 01 	sts	0x013D, r21
        vars.root_directory_sector_count = (b->rootDirectoryEntries * 32) / BYTES_PER_SECTOR;
    4302:	81 89       	ldd	r24, Z+17	; 0x11
    4304:	92 89       	ldd	r25, Z+18	; 0x12
    4306:	75 e0       	ldi	r23, 0x05	; 5
    4308:	88 0f       	add	r24, r24
    430a:	99 1f       	adc	r25, r25
    430c:	7a 95       	dec	r23
    430e:	e1 f7       	brne	.-8      	; 0x4308 <_ZN9microfat210initializeEPhPFhS0_mhE+0xc6>
    4310:	89 2f       	mov	r24, r25
    4312:	99 27       	eor	r25, r25
    4314:	86 95       	lsr	r24
    4316:	90 93 39 01 	sts	0x0139, r25
    431a:	80 93 38 01 	sts	0x0138, r24
        vars.cluster_2_sector = vars.root_directory_sector + vars.root_directory_sector_count;
    431e:	a0 e0       	ldi	r26, 0x00	; 0
    4320:	b0 e0       	ldi	r27, 0x00	; 0
    4322:	28 0f       	add	r18, r24
    4324:	39 1f       	adc	r19, r25
    4326:	4a 1f       	adc	r20, r26
    4328:	5b 1f       	adc	r21, r27
    432a:	20 93 3e 01 	sts	0x013E, r18
    432e:	30 93 3f 01 	sts	0x013F, r19
    4332:	40 93 40 01 	sts	0x0140, r20
    4336:	50 93 41 01 	sts	0x0141, r21
    433a:	81 e0       	ldi	r24, 0x01	; 1
    433c:	01 c0       	rjmp	.+2      	; 0x4340 <_ZN9microfat210initializeEPhPFhS0_mhE+0xfe>
    433e:	80 e0       	ldi	r24, 0x00	; 0
      }
    }
  }

  return return_val;
}
    4340:	1f 91       	pop	r17
    4342:	0f 91       	pop	r16
    4344:	ff 90       	pop	r15
    4346:	ef 90       	pop	r14
    4348:	08 95       	ret

0000434a <_ZN9microfat213walkDirectoryEPFbP17directory_entry_tjPvES2_>:
//  Cache the last file opened...
directory_entry_t _last_directory_entry;

// Directory walker. Useful for all kinds of things. probably.
//
int microfat2::walkDirectory(WALKER_FN walkerFunction, void* locator_data)
    434a:	af 92       	push	r10
    434c:	bf 92       	push	r11
    434e:	cf 92       	push	r12
    4350:	df 92       	push	r13
    4352:	ef 92       	push	r14
    4354:	ff 92       	push	r15
    4356:	0f 93       	push	r16
    4358:	1f 93       	push	r17
    435a:	cf 93       	push	r28
    435c:	df 93       	push	r29
    435e:	5c 01       	movw	r10, r24
    4360:	6b 01       	movw	r12, r22
{
  unsigned entry_idx = 0;

// cache hit
    if (walkerFunction(&_last_directory_entry, entry_idx, locator_data))
    4362:	86 e1       	ldi	r24, 0x16	; 22
    4364:	91 e0       	ldi	r25, 0x01	; 1
    4366:	60 e0       	ldi	r22, 0x00	; 0
    4368:	70 e0       	ldi	r23, 0x00	; 0
    436a:	a6 01       	movw	r20, r12
    436c:	f5 01       	movw	r30, r10
    436e:	09 95       	icall
    4370:	88 23       	and	r24, r24
    4372:	19 f0       	breq	.+6      	; 0x437a <_ZN9microfat213walkDirectoryEPFbP17directory_entry_tjPvES2_+0x30>
    4374:	6f ef       	ldi	r22, 0xFF	; 255
    4376:	7f e7       	ldi	r23, 0x7F	; 127
    4378:	4d c0       	rjmp	.+154    	; 0x4414 <_ZN9microfat213walkDirectoryEPFbP17directory_entry_tjPvES2_+0xca>
    437a:	ee 24       	eor	r14, r14
    437c:	ff 24       	eor	r15, r15
    437e:	00 e0       	ldi	r16, 0x00	; 0
    4380:	10 e0       	ldi	r17, 0x00	; 0
    4382:	3e c0       	rjmp	.+124    	; 0x4400 <_ZN9microfat213walkDirectoryEPFbP17directory_entry_tjPvES2_+0xb6>
        return 0x7FFF;
        
  for (unsigned i = 0; i < vars.root_directory_sector_count; ++i)
  {
    if (0 == vars.read_sectors(vars.sector_buffer, vars.root_directory_sector + i, 1))
    4384:	a8 01       	movw	r20, r16
    4386:	60 e0       	ldi	r22, 0x00	; 0
    4388:	70 e0       	ldi	r23, 0x00	; 0
    438a:	80 91 3a 01 	lds	r24, 0x013A
    438e:	90 91 3b 01 	lds	r25, 0x013B
    4392:	a0 91 3c 01 	lds	r26, 0x013C
    4396:	b0 91 3d 01 	lds	r27, 0x013D
    439a:	48 0f       	add	r20, r24
    439c:	59 1f       	adc	r21, r25
    439e:	6a 1f       	adc	r22, r26
    43a0:	7b 1f       	adc	r23, r27
    43a2:	e0 91 44 01 	lds	r30, 0x0144
    43a6:	f0 91 45 01 	lds	r31, 0x0145
    43aa:	80 91 42 01 	lds	r24, 0x0142
    43ae:	90 91 43 01 	lds	r25, 0x0143
    43b2:	21 e0       	ldi	r18, 0x01	; 1
    43b4:	09 95       	icall
    43b6:	88 23       	and	r24, r24
    43b8:	09 f5       	brne	.+66     	; 0x43fc <_ZN9microfat213walkDirectoryEPFbP17directory_entry_tjPvES2_+0xb2>
    43ba:	c0 e0       	ldi	r28, 0x00	; 0
    43bc:	d0 e0       	ldi	r29, 0x00	; 0
    {
      for (unsigned j = 0; j < BYTES_PER_SECTOR / 32; ++j)
      {
        directory_entry_t* directory_entry = (directory_entry_t*)(vars.sector_buffer + (32 * j));
    43be:	e0 91 42 01 	lds	r30, 0x0142
    43c2:	f0 91 43 01 	lds	r31, 0x0143
    43c6:	ec 0f       	add	r30, r28
    43c8:	fd 1f       	adc	r31, r29
        if (0 == directory_entry->filespec[0])
    43ca:	80 81       	ld	r24, Z
    43cc:	88 23       	and	r24, r24
    43ce:	01 f1       	breq	.+64     	; 0x4410 <_ZN9microfat213walkDirectoryEPFbP17directory_entry_tjPvES2_+0xc6>
        {
          // All done.
          //
          return -1;
        }
        if (0xe5 == byte(directory_entry->filespec[0]))
    43d0:	85 3e       	cpi	r24, 0xE5	; 229
    43d2:	79 f0       	breq	.+30     	; 0x43f2 <_ZN9microfat213walkDirectoryEPFbP17directory_entry_tjPvES2_+0xa8>
        {
          // Deleted file
          //
          continue;
        }
        if (0 != (directory_entry->attributes & 0x18))
    43d4:	83 85       	ldd	r24, Z+11	; 0x0b
    43d6:	88 71       	andi	r24, 0x18	; 24
    43d8:	61 f4       	brne	.+24     	; 0x43f2 <_ZN9microfat213walkDirectoryEPFbP17directory_entry_tjPvES2_+0xa8>
          // This is a directory, volume label or LFN marker
          //
          continue;
        }

        if (walkerFunction(directory_entry, entry_idx, locator_data))
    43da:	cf 01       	movw	r24, r30
    43dc:	b7 01       	movw	r22, r14
    43de:	a6 01       	movw	r20, r12
    43e0:	f5 01       	movw	r30, r10
    43e2:	09 95       	icall
    43e4:	88 23       	and	r24, r24
    43e6:	11 f0       	breq	.+4      	; 0x43ec <_ZN9microfat213walkDirectoryEPFbP17directory_entry_tjPvES2_+0xa2>
        {
          // All finished
          //
          return entry_idx;
    43e8:	b7 01       	movw	r22, r14
    43ea:	14 c0       	rjmp	.+40     	; 0x4414 <_ZN9microfat213walkDirectoryEPFbP17directory_entry_tjPvES2_+0xca>
        }
        ++entry_idx;
    43ec:	08 94       	sec
    43ee:	e1 1c       	adc	r14, r1
    43f0:	f1 1c       	adc	r15, r1
    43f2:	a0 96       	adiw	r28, 0x20	; 32
        
  for (unsigned i = 0; i < vars.root_directory_sector_count; ++i)
  {
    if (0 == vars.read_sectors(vars.sector_buffer, vars.root_directory_sector + i, 1))
    {
      for (unsigned j = 0; j < BYTES_PER_SECTOR / 32; ++j)
    43f4:	82 e0       	ldi	r24, 0x02	; 2
    43f6:	c0 30       	cpi	r28, 0x00	; 0
    43f8:	d8 07       	cpc	r29, r24
    43fa:	09 f7       	brne	.-62     	; 0x43be <_ZN9microfat213walkDirectoryEPFbP17directory_entry_tjPvES2_+0x74>

// cache hit
    if (walkerFunction(&_last_directory_entry, entry_idx, locator_data))
        return 0x7FFF;
        
  for (unsigned i = 0; i < vars.root_directory_sector_count; ++i)
    43fc:	0f 5f       	subi	r16, 0xFF	; 255
    43fe:	1f 4f       	sbci	r17, 0xFF	; 255
    4400:	80 91 38 01 	lds	r24, 0x0138
    4404:	90 91 39 01 	lds	r25, 0x0139
    4408:	08 17       	cp	r16, r24
    440a:	19 07       	cpc	r17, r25
    440c:	08 f4       	brcc	.+2      	; 0x4410 <_ZN9microfat213walkDirectoryEPFbP17directory_entry_tjPvES2_+0xc6>
    440e:	ba cf       	rjmp	.-140    	; 0x4384 <_ZN9microfat213walkDirectoryEPFbP17directory_entry_tjPvES2_+0x3a>
    4410:	6f ef       	ldi	r22, 0xFF	; 255
    4412:	7f ef       	ldi	r23, 0xFF	; 255
  }

  // directory was full.
  //
  return -1;
}
    4414:	cb 01       	movw	r24, r22
    4416:	df 91       	pop	r29
    4418:	cf 91       	pop	r28
    441a:	1f 91       	pop	r17
    441c:	0f 91       	pop	r16
    441e:	ff 90       	pop	r15
    4420:	ef 90       	pop	r14
    4422:	df 90       	pop	r13
    4424:	cf 90       	pop	r12
    4426:	bf 90       	pop	r11
    4428:	af 90       	pop	r10
    442a:	08 95       	ret

0000442c <_ZL7locatorP17directory_entry_tjPv>:



static bool locator(directory_entry_t* directory_entry,
   unsigned idx,
      void* locator_data)
    442c:	0f 93       	push	r16
    442e:	1f 93       	push	r17
    4430:	cf 93       	push	r28
    4432:	df 93       	push	r29
    4434:	8c 01       	movw	r16, r24
{
  locator_t* user_data = (locator_t*)locator_data;
    4436:	ea 01       	movw	r28, r20

  // This is why we only deal with pre-cooked names.
  //
  if (match83(directory_entry->filespec, user_data->cooked_name))
    4438:	a8 85       	ldd	r26, Y+8	; 0x08
    443a:	b9 85       	ldd	r27, Y+9	; 0x09
    443c:	20 e0       	ldi	r18, 0x00	; 0
    443e:	30 e0       	ldi	r19, 0x00	; 0
static bool match83(const char* file83, const char* name)
{
    //  Match prefix
    for (byte i = 0; i < 8; i++)
    {
        char c = *name++;            
    4440:	9d 91       	ld	r25, X+
        if (c == '.')
    4442:	9e 32       	cpi	r25, 0x2E	; 46
    4444:	99 f0       	breq	.+38     	; 0x446c <_ZL7locatorP17directory_entry_tjPv+0x40>
            break;
        if (c == 0)
    4446:	99 23       	and	r25, r25
    4448:	09 f4       	brne	.+2      	; 0x444c <_ZL7locatorP17directory_entry_tjPv+0x20>
    444a:	46 c0       	rjmp	.+140    	; 0x44d8 <_ZL7locatorP17directory_entry_tjPv+0xac>
            return false;
        c = UPPER(c);
    444c:	89 2f       	mov	r24, r25
    444e:	81 56       	subi	r24, 0x61	; 97
    4450:	8a 31       	cpi	r24, 0x1A	; 26
    4452:	08 f4       	brcc	.+2      	; 0x4456 <_ZL7locatorP17directory_entry_tjPv+0x2a>
    4454:	90 52       	subi	r25, 0x20	; 32
        if (c != file83[i])
    4456:	f8 01       	movw	r30, r16
    4458:	e2 0f       	add	r30, r18
    445a:	f3 1f       	adc	r31, r19
    445c:	80 81       	ld	r24, Z
    445e:	98 17       	cp	r25, r24
    4460:	d9 f5       	brne	.+118    	; 0x44d8 <_ZL7locatorP17directory_entry_tjPv+0xac>
    4462:	2f 5f       	subi	r18, 0xFF	; 255
    4464:	3f 4f       	sbci	r19, 0xFF	; 255

#define UPPER(_x) ((_x >= 'a' && _x <= 'z') ? (_x + 'A' - 'a') : _x)
static bool match83(const char* file83, const char* name)
{
    //  Match prefix
    for (byte i = 0; i < 8; i++)
    4466:	28 30       	cpi	r18, 0x08	; 8
    4468:	31 05       	cpc	r19, r1
    446a:	51 f7       	brne	.-44     	; 0x4440 <_ZL7locatorP17directory_entry_tjPv+0x14>
  if (match83(directory_entry->filespec, user_data->cooked_name))
  {
    long s = directory_entry->startCluster-2;
    long sp = vars.sectors_per_cluster;
    
     user_data->sector = vars.cluster_2_sector + s*sp;
    446c:	f8 01       	movw	r30, r16
    446e:	62 8d       	ldd	r22, Z+26	; 0x1a
    4470:	73 8d       	ldd	r23, Z+27	; 0x1b
    4472:	62 50       	subi	r22, 0x02	; 2
    4474:	70 40       	sbci	r23, 0x00	; 0
    4476:	80 e0       	ldi	r24, 0x00	; 0
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	20 91 36 01 	lds	r18, 0x0136
    447e:	30 91 37 01 	lds	r19, 0x0137
    4482:	40 e0       	ldi	r20, 0x00	; 0
    4484:	50 e0       	ldi	r21, 0x00	; 0
    4486:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__mulsi3>
    448a:	20 91 3e 01 	lds	r18, 0x013E
    448e:	30 91 3f 01 	lds	r19, 0x013F
    4492:	40 91 40 01 	lds	r20, 0x0140
    4496:	50 91 41 01 	lds	r21, 0x0141
    449a:	26 0f       	add	r18, r22
    449c:	37 1f       	adc	r19, r23
    449e:	48 1f       	adc	r20, r24
    44a0:	59 1f       	adc	r21, r25
    44a2:	28 83       	st	Y, r18
    44a4:	39 83       	std	Y+1, r19	; 0x01
    44a6:	4a 83       	std	Y+2, r20	; 0x02
    44a8:	5b 83       	std	Y+3, r21	; 0x03
     user_data->size = directory_entry->fileSize;
    44aa:	f8 01       	movw	r30, r16
    44ac:	84 8d       	ldd	r24, Z+28	; 0x1c
    44ae:	95 8d       	ldd	r25, Z+29	; 0x1d
    44b0:	a6 8d       	ldd	r26, Z+30	; 0x1e
    44b2:	b7 8d       	ldd	r27, Z+31	; 0x1f
    44b4:	8c 83       	std	Y+4, r24	; 0x04
    44b6:	9d 83       	std	Y+5, r25	; 0x05
    44b8:	ae 83       	std	Y+6, r26	; 0x06
    44ba:	bf 83       	std	Y+7, r27	; 0x07
     if (directory_entry != &_last_directory_entry)
    44bc:	f1 e0       	ldi	r31, 0x01	; 1
    44be:	06 31       	cpi	r16, 0x16	; 22
    44c0:	1f 07       	cpc	r17, r31
    44c2:	41 f0       	breq	.+16     	; 0x44d4 <_ZL7locatorP17directory_entry_tjPv+0xa8>
        _last_directory_entry = *directory_entry;  // cache this
    44c4:	a6 e1       	ldi	r26, 0x16	; 22
    44c6:	b1 e0       	ldi	r27, 0x01	; 1
    44c8:	f8 01       	movw	r30, r16
    44ca:	80 e2       	ldi	r24, 0x20	; 32
    44cc:	01 90       	ld	r0, Z+
    44ce:	0d 92       	st	X+, r0
    44d0:	81 50       	subi	r24, 0x01	; 1
    44d2:	e1 f7       	brne	.-8      	; 0x44cc <_ZL7locatorP17directory_entry_tjPv+0xa0>
    44d4:	81 e0       	ldi	r24, 0x01	; 1
    44d6:	01 c0       	rjmp	.+2      	; 0x44da <_ZL7locatorP17directory_entry_tjPv+0xae>
    44d8:	80 e0       	ldi	r24, 0x00	; 0
  }

  // Not done yet.
  //
  return false;
}
    44da:	df 91       	pop	r29
    44dc:	cf 91       	pop	r28
    44de:	1f 91       	pop	r17
    44e0:	0f 91       	pop	r16
    44e2:	08 95       	ret

000044e4 <_ZN9microfat215locateFileStartEPKcRmS2_Ph>:
// Name cooking: See header file!
//
// The filename needs to be stored in PROGMEM, see the appropriate tutorial
// and the header file.
//
bool microfat2::locateFileStart(const char* cooked_name, unsigned long& file_start_sector, unsigned long& file_size_bytes, byte* sector_buffer)
    44e4:	ef 92       	push	r14
    44e6:	ff 92       	push	r15
    44e8:	0f 93       	push	r16
    44ea:	1f 93       	push	r17
    44ec:	df 93       	push	r29
    44ee:	cf 93       	push	r28
    44f0:	cd b7       	in	r28, 0x3d	; 61
    44f2:	de b7       	in	r29, 0x3e	; 62
    44f4:	2a 97       	sbiw	r28, 0x0a	; 10
    44f6:	0f b6       	in	r0, 0x3f	; 63
    44f8:	f8 94       	cli
    44fa:	de bf       	out	0x3e, r29	; 62
    44fc:	0f be       	out	0x3f, r0	; 63
    44fe:	cd bf       	out	0x3d, r28	; 61
    4500:	8b 01       	movw	r16, r22
    4502:	7a 01       	movw	r14, r20
{
  locator_t locator_user_data;
  locator_user_data.cooked_name = cooked_name;
    4504:	9a 87       	std	Y+10, r25	; 0x0a
    4506:	89 87       	std	Y+9, r24	; 0x09
  vars.sector_buffer = sector_buffer;   //
    4508:	30 93 43 01 	sts	0x0143, r19
    450c:	20 93 42 01 	sts	0x0142, r18

  // Walk the root directory looking for the specified file.
  //
  int entry_idx = walkDirectory(locator, (void*)&locator_user_data);
    4510:	86 e1       	ldi	r24, 0x16	; 22
    4512:	92 e2       	ldi	r25, 0x22	; 34
    4514:	be 01       	movw	r22, r28
    4516:	6f 5f       	subi	r22, 0xFF	; 255
    4518:	7f 4f       	sbci	r23, 0xFF	; 255
    451a:	0e 94 a5 21 	call	0x434a	; 0x434a <_ZN9microfat213walkDirectoryEPFbP17directory_entry_tjPvES2_>

  // Data will only be valid if the walker returns a positive integer...
  //
  file_start_sector = locator_user_data.sector;
    451e:	29 81       	ldd	r18, Y+1	; 0x01
    4520:	3a 81       	ldd	r19, Y+2	; 0x02
    4522:	4b 81       	ldd	r20, Y+3	; 0x03
    4524:	5c 81       	ldd	r21, Y+4	; 0x04
    4526:	f8 01       	movw	r30, r16
    4528:	20 83       	st	Z, r18
    452a:	31 83       	std	Z+1, r19	; 0x01
    452c:	42 83       	std	Z+2, r20	; 0x02
    452e:	53 83       	std	Z+3, r21	; 0x03
  file_size_bytes = locator_user_data.size;
    4530:	2d 81       	ldd	r18, Y+5	; 0x05
    4532:	3e 81       	ldd	r19, Y+6	; 0x06
    4534:	4f 81       	ldd	r20, Y+7	; 0x07
    4536:	58 85       	ldd	r21, Y+8	; 0x08
    4538:	f7 01       	movw	r30, r14
    453a:	20 83       	st	Z, r18
    453c:	31 83       	std	Z+1, r19	; 0x01
    453e:	42 83       	std	Z+2, r20	; 0x02
    4540:	53 83       	std	Z+3, r21	; 0x03
    4542:	20 e0       	ldi	r18, 0x00	; 0
    4544:	8f 5f       	subi	r24, 0xFF	; 255
    4546:	9f 4f       	sbci	r25, 0xFF	; 255
    4548:	09 f0       	breq	.+2      	; 0x454c <_ZN9microfat215locateFileStartEPKcRmS2_Ph+0x68>
    454a:	21 e0       	ldi	r18, 0x01	; 1

  // ... and we subsequently return true.
  //
  return entry_idx != -1;
}
    454c:	82 2f       	mov	r24, r18
    454e:	2a 96       	adiw	r28, 0x0a	; 10
    4550:	0f b6       	in	r0, 0x3f	; 63
    4552:	f8 94       	cli
    4554:	de bf       	out	0x3e, r29	; 62
    4556:	0f be       	out	0x3f, r0	; 63
    4558:	cd bf       	out	0x3d, r28	; 61
    455a:	cf 91       	pop	r28
    455c:	df 91       	pop	r29
    455e:	1f 91       	pop	r17
    4560:	0f 91       	pop	r16
    4562:	ff 90       	pop	r15
    4564:	ef 90       	pop	r14
    4566:	08 95       	ret

00004568 <_ZN8AppState4LoadEPKci>:
        File file;
        file.Open(_moviePath);
        ShowFrame(file);
    }
    
    int Load(const char* path, int blobNum)
    4568:	8f 92       	push	r8
    456a:	9f 92       	push	r9
    456c:	af 92       	push	r10
    456e:	bf 92       	push	r11
    4570:	cf 92       	push	r12
    4572:	df 92       	push	r13
    4574:	ef 92       	push	r14
    4576:	ff 92       	push	r15
    4578:	0f 93       	push	r16
    457a:	1f 93       	push	r17
    457c:	df 93       	push	r29
    457e:	cf 93       	push	r28
    4580:	cd b7       	in	r28, 0x3d	; 61
    4582:	de b7       	in	r29, 0x3e	; 62
    4584:	ca 51       	subi	r28, 0x1A	; 26
    4586:	d2 40       	sbci	r29, 0x02	; 2
    4588:	0f b6       	in	r0, 0x3f	; 63
    458a:	f8 94       	cli
    458c:	de bf       	out	0x3e, r29	; 62
    458e:	0f be       	out	0x3f, r0	; 63
    4590:	cd bf       	out	0x3d, r28	; 61
    4592:	6c 01       	movw	r12, r24
    4594:	8b 01       	movw	r16, r22
    4596:	b4 2e       	mov	r11, r20
    4598:	a5 2e       	mov	r10, r21
    {
        File file;
    459a:	eb e0       	ldi	r30, 0x0B	; 11
    459c:	ee 2e       	mov	r14, r30
    459e:	f1 2c       	mov	r15, r1
    45a0:	ec 0e       	add	r14, r28
    45a2:	fd 1e       	adc	r15, r29
    45a4:	c7 01       	movw	r24, r14
    45a6:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <_ZN4FileC1Ev>
        if (!file.Open(path))
    45aa:	c7 01       	movw	r24, r14
    45ac:	b8 01       	movw	r22, r16
    45ae:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <_ZN4File4OpenEPKc>
    45b2:	88 23       	and	r24, r24
    45b4:	19 f4       	brne	.+6      	; 0x45bc <_ZN8AppState4LoadEPKci+0x54>
    45b6:	2f ef       	ldi	r18, 0xFF	; 255
    45b8:	3f ef       	ldi	r19, 0xFF	; 255
    45ba:	b4 c0       	rjmp	.+360    	; 0x4724 <_ZN8AppState4LoadEPKci+0x1bc>
    }
    
    int ReadBlob(uchar* dst, int maxLen, File& file, ushort blobNum)
    {
        ushort hdr[3];
        file.SetPos(0);
    45bc:	c7 01       	movw	r24, r14
    45be:	40 e0       	ldi	r20, 0x00	; 0
    45c0:	50 e0       	ldi	r21, 0x00	; 0
    45c2:	60 e0       	ldi	r22, 0x00	; 0
    45c4:	70 e0       	ldi	r23, 0x00	; 0
    45c6:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <_ZN4File6SetPosEl>
        file.Read(hdr,6);   // hdr,size,count
    45ca:	c7 01       	movw	r24, r14
    45cc:	be 01       	movw	r22, r28
    45ce:	6b 5f       	subi	r22, 0xFB	; 251
    45d0:	7f 4f       	sbci	r23, 0xFF	; 255
    45d2:	46 e0       	ldi	r20, 0x06	; 6
    45d4:	50 e0       	ldi	r21, 0x00	; 0
    45d6:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <_ZN4File4ReadEPvi>
        if (hdr[0] != 0x646E)   // 'nd'
    45da:	8d 81       	ldd	r24, Y+5	; 0x05
    45dc:	9e 81       	ldd	r25, Y+6	; 0x06
    45de:	8e 56       	subi	r24, 0x6E	; 110
    45e0:	94 46       	sbci	r25, 0x64	; 100
    45e2:	09 f0       	breq	.+2      	; 0x45e6 <_ZN8AppState4LoadEPKci+0x7e>
    45e4:	56 c0       	rjmp	.+172    	; 0x4692 <_ZN8AppState4LoadEPKci+0x12a>
    int Load(const char* path, int blobNum)
    {
        File file;
        if (!file.Open(path))
            return -1;
        _nodeSize = ReadBlob(_node,sizeof(_node),file,blobNum);
    45e6:	0b 2d       	mov	r16, r11
    45e8:	1a 2d       	mov	r17, r10
        ushort hdr[3];
        file.SetPos(0);
        file.Read(hdr,6);   // hdr,size,count
        if (hdr[0] != 0x646E)   // 'nd'
            return -1;
        if (blobNum <= 0 || blobNum > hdr[2])
    45ea:	01 15       	cp	r16, r1
    45ec:	11 05       	cpc	r17, r1
    45ee:	09 f4       	brne	.+2      	; 0x45f2 <_ZN8AppState4LoadEPKci+0x8a>
    45f0:	50 c0       	rjmp	.+160    	; 0x4692 <_ZN8AppState4LoadEPKci+0x12a>
    45f2:	89 85       	ldd	r24, Y+9	; 0x09
    45f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    45f6:	80 17       	cp	r24, r16
    45f8:	91 07       	cpc	r25, r17
    45fa:	08 f4       	brcc	.+2      	; 0x45fe <_ZN8AppState4LoadEPKci+0x96>
    45fc:	4a c0       	rjmp	.+148    	; 0x4692 <_ZN8AppState4LoadEPKci+0x12a>
            return -1;
        file.SetPos(2 + (blobNum<<1));
    45fe:	a8 01       	movw	r20, r16
    4600:	44 0f       	add	r20, r20
    4602:	55 1f       	adc	r21, r21
    4604:	4e 5f       	subi	r20, 0xFE	; 254
    4606:	5f 4f       	sbci	r21, 0xFF	; 255
    4608:	60 e0       	ldi	r22, 0x00	; 0
    460a:	70 e0       	ldi	r23, 0x00	; 0
    460c:	c7 01       	movw	r24, r14
    460e:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <_ZN4File6SetPosEl>
        _headerLength = hdr[1] + 4;
    4612:	8d e9       	ldi	r24, 0x9D	; 157
    4614:	90 e0       	ldi	r25, 0x00	; 0
    4616:	c8 0e       	add	r12, r24
    4618:	d9 1e       	adc	r13, r25
    461a:	8f 81       	ldd	r24, Y+7	; 0x07
    461c:	98 85       	ldd	r25, Y+8	; 0x08
    461e:	04 96       	adiw	r24, 0x04	; 4
    4620:	f6 01       	movw	r30, r12
    4622:	91 83       	std	Z+1, r25	; 0x01
    4624:	80 83       	st	Z, r24
    4626:	83 e6       	ldi	r24, 0x63	; 99
    4628:	9f ef       	ldi	r25, 0xFF	; 255
    462a:	c8 0e       	add	r12, r24
    462c:	d9 1e       	adc	r13, r25
        
        ushort offset[2];
        file.Read(offset,4);    // read offset of this blob
    462e:	c7 01       	movw	r24, r14
    4630:	be 01       	movw	r22, r28
    4632:	6f 5f       	subi	r22, 0xFF	; 255
    4634:	7f 4f       	sbci	r23, 0xFF	; 255
    4636:	44 e0       	ldi	r20, 0x04	; 4
    4638:	50 e0       	ldi	r21, 0x00	; 0
    463a:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <_ZN4File4ReadEPvi>
        if (blobNum == 1)
    463e:	01 30       	cpi	r16, 0x01	; 1
    4640:	11 05       	cpc	r17, r1
    4642:	11 f4       	brne	.+4      	; 0x4648 <_ZN8AppState4LoadEPKci+0xe0>
            offset[0] = 0;
    4644:	1a 82       	std	Y+2, r1	; 0x02
    4646:	19 82       	std	Y+1, r1	; 0x01
            
        int count = offset[1] - offset[0];
    4648:	49 81       	ldd	r20, Y+1	; 0x01
    464a:	5a 81       	ldd	r21, Y+2	; 0x02
    464c:	eb 80       	ldd	r14, Y+3	; 0x03
    464e:	fc 80       	ldd	r15, Y+4	; 0x04
    4650:	e4 1a       	sub	r14, r20
    4652:	f5 0a       	sbc	r15, r21
        count = min(count,maxLen);
    4654:	90 e8       	ldi	r25, 0x80	; 128
    4656:	e9 16       	cp	r14, r25
    4658:	f1 04       	cpc	r15, r1
    465a:	1c f0       	brlt	.+6      	; 0x4662 <_ZN8AppState4LoadEPKci+0xfa>
    465c:	60 e8       	ldi	r22, 0x80	; 128
    465e:	e6 2e       	mov	r14, r22
    4660:	f1 2c       	mov	r15, r1
        file.SetPos(6 + (hdr[2]<<1) + offset[0]);
    4662:	8e 01       	movw	r16, r28
    4664:	05 5f       	subi	r16, 0xF5	; 245
    4666:	1f 4f       	sbci	r17, 0xFF	; 255
    4668:	4a 5f       	subi	r20, 0xFA	; 250
    466a:	5f 4f       	sbci	r21, 0xFF	; 255
    466c:	89 85       	ldd	r24, Y+9	; 0x09
    466e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4670:	88 0f       	add	r24, r24
    4672:	99 1f       	adc	r25, r25
    4674:	48 0f       	add	r20, r24
    4676:	59 1f       	adc	r21, r25
    4678:	60 e0       	ldi	r22, 0x00	; 0
    467a:	70 e0       	ldi	r23, 0x00	; 0
    467c:	c8 01       	movw	r24, r16
    467e:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <_ZN4File6SetPosEl>
        file.Read(dst,count);
    4682:	b6 01       	movw	r22, r12
    4684:	6a 5f       	subi	r22, 0xFA	; 250
    4686:	7f 4f       	sbci	r23, 0xFF	; 255
    4688:	c8 01       	movw	r24, r16
    468a:	a7 01       	movw	r20, r14
    468c:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <_ZN4File4ReadEPvi>
    4690:	03 c0       	rjmp	.+6      	; 0x4698 <_ZN8AppState4LoadEPKci+0x130>
    4692:	ee 24       	eor	r14, r14
    4694:	ea 94       	dec	r14
    4696:	fe 2c       	mov	r15, r14
    int Load(const char* path, int blobNum)
    {
        File file;
        if (!file.Open(path))
            return -1;
        _nodeSize = ReadBlob(_node,sizeof(_node),file,blobNum);
    4698:	f6 01       	movw	r30, r12
    469a:	e5 82       	std	Z+5, r14	; 0x05
        
        _path[0] = 0;
    469c:	20 ea       	ldi	r18, 0xA0	; 160
    469e:	a2 2e       	mov	r10, r18
    46a0:	b1 2c       	mov	r11, r1
    46a2:	ac 0c       	add	r10, r12
    46a4:	bd 1c       	adc	r11, r13
    46a6:	f5 01       	movw	r30, r10
    46a8:	10 82       	st	Z, r1
        _appID = 0;
    46aa:	8f e9       	ldi	r24, 0x9F	; 159
    46ac:	90 e0       	ldi	r25, 0x00	; 0
    46ae:	c8 0e       	add	r12, r24
    46b0:	d9 1e       	adc	r13, r25
    46b2:	f6 01       	movw	r30, r12
    46b4:	10 82       	st	Z, r1
    46b6:	81 e6       	ldi	r24, 0x61	; 97
    46b8:	9f ef       	ldi	r25, 0xFF	; 255
    46ba:	c8 0e       	add	r12, r24
    46bc:	d9 1e       	adc	r13, r25
            switch(_node[i])
            {
                case NodePath:
                    {
                        byte len = min(_node[i+1],sizeof(_path)-1);
                        strncpy(_path,(char*)_node+i+2,len);
    46be:	96 e0       	ldi	r25, 0x06	; 6
    46c0:	89 2e       	mov	r8, r25
    46c2:	91 2c       	mov	r9, r1
    46c4:	8c 0c       	add	r8, r12
    46c6:	9d 1c       	adc	r9, r13
    46c8:	00 e0       	ldi	r16, 0x00	; 0
    46ca:	10 e0       	ldi	r17, 0x00	; 0
    46cc:	24 c0       	rjmp	.+72     	; 0x4716 <_ZN8AppState4LoadEPKci+0x1ae>
        _path[0] = 0;
        _appID = 0;
        int i = 0;
        while (i < _nodeSize)
        {
            switch(_node[i])
    46ce:	f6 01       	movw	r30, r12
    46d0:	e0 0f       	add	r30, r16
    46d2:	f1 1f       	adc	r31, r17
    46d4:	86 81       	ldd	r24, Z+6	; 0x06
    46d6:	81 36       	cpi	r24, 0x61	; 97
    46d8:	b1 f4       	brne	.+44     	; 0x4706 <_ZN8AppState4LoadEPKci+0x19e>
            {
                case NodePath:
                    {
                        byte len = min(_node[i+1],sizeof(_path)-1);
    46da:	f7 80       	ldd	r15, Z+7	; 0x07
    46dc:	9c e0       	ldi	r25, 0x0C	; 12
    46de:	9f 15       	cp	r25, r15
    46e0:	10 f4       	brcc	.+4      	; 0x46e6 <_ZN8AppState4LoadEPKci+0x17e>
    46e2:	8c e0       	ldi	r24, 0x0C	; 12
    46e4:	f8 2e       	mov	r15, r24
                        strncpy(_path,(char*)_node+i+2,len);
    46e6:	b8 01       	movw	r22, r16
    46e8:	6e 5f       	subi	r22, 0xFE	; 254
    46ea:	7f 4f       	sbci	r23, 0xFF	; 255
    46ec:	68 0d       	add	r22, r8
    46ee:	79 1d       	adc	r23, r9
    46f0:	c5 01       	movw	r24, r10
    46f2:	4f 2d       	mov	r20, r15
    46f4:	50 e0       	ldi	r21, 0x00	; 0
    46f6:	0e 94 bb 2d 	call	0x5b76	; 0x5b76 <strncpy>
                        _path[len] = 0;
    46fa:	f6 01       	movw	r30, r12
    46fc:	ef 0d       	add	r30, r15
    46fe:	f1 1d       	adc	r31, r1
    4700:	e0 56       	subi	r30, 0x60	; 96
    4702:	ff 4f       	sbci	r31, 0xFF	; 255
    4704:	10 82       	st	Z, r1
                    }
                    break;
            }
            i += 2 + _node[i + 1];
    4706:	f6 01       	movw	r30, r12
    4708:	e0 0f       	add	r30, r16
    470a:	f1 1f       	adc	r31, r17
    470c:	87 81       	ldd	r24, Z+7	; 0x07
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	02 96       	adiw	r24, 0x02	; 2
    4712:	08 0f       	add	r16, r24
    4714:	19 1f       	adc	r17, r25
        _nodeSize = ReadBlob(_node,sizeof(_node),file,blobNum);
        
        _path[0] = 0;
        _appID = 0;
        int i = 0;
        while (i < _nodeSize)
    4716:	f6 01       	movw	r30, r12
    4718:	85 81       	ldd	r24, Z+5	; 0x05
    471a:	28 2f       	mov	r18, r24
    471c:	30 e0       	ldi	r19, 0x00	; 0
    471e:	02 17       	cp	r16, r18
    4720:	13 07       	cpc	r17, r19
    4722:	ac f2       	brlt	.-86     	; 0x46ce <_ZN8AppState4LoadEPKci+0x166>
                    break;
            }
            i += 2 + _node[i + 1];
        }
        return _nodeSize;
    }
    4724:	c9 01       	movw	r24, r18
    4726:	c6 5e       	subi	r28, 0xE6	; 230
    4728:	dd 4f       	sbci	r29, 0xFD	; 253
    472a:	0f b6       	in	r0, 0x3f	; 63
    472c:	f8 94       	cli
    472e:	de bf       	out	0x3e, r29	; 62
    4730:	0f be       	out	0x3f, r0	; 63
    4732:	cd bf       	out	0x3d, r28	; 61
    4734:	cf 91       	pop	r28
    4736:	df 91       	pop	r29
    4738:	1f 91       	pop	r17
    473a:	0f 91       	pop	r16
    473c:	ff 90       	pop	r15
    473e:	ef 90       	pop	r14
    4740:	df 90       	pop	r13
    4742:	cf 90       	pop	r12
    4744:	bf 90       	pop	r11
    4746:	af 90       	pop	r10
    4748:	9f 90       	pop	r9
    474a:	8f 90       	pop	r8
    474c:	08 95       	ret

0000474e <_ZN8AppState3NavEh>:
        movieLength *= 96*64*2;
        movieOffset += _headerLength;
        PlayMovie(_fileName,movieOffset, movieLength);
    }
    
    bool Nav(byte tag)
    474e:	8f 92       	push	r8
    4750:	9f 92       	push	r9
    4752:	af 92       	push	r10
    4754:	bf 92       	push	r11
    4756:	cf 92       	push	r12
    4758:	df 92       	push	r13
    475a:	ef 92       	push	r14
    475c:	ff 92       	push	r15
    475e:	0f 93       	push	r16
    4760:	1f 93       	push	r17
    4762:	cf 93       	push	r28
    4764:	df 93       	push	r29
    4766:	ec 01       	movw	r28, r24
    {
        int i = 0;
        while (i < _nodeSize)
    4768:	8d 81       	ldd	r24, Y+5	; 0x05
    476a:	48 2f       	mov	r20, r24
    476c:	50 e0       	ldi	r21, 0x00	; 0
    476e:	20 e0       	ldi	r18, 0x00	; 0
    4770:	30 e0       	ldi	r19, 0x00	; 0
    4772:	76 c0       	rjmp	.+236    	; 0x4860 <_ZN8AppState3NavEh+0x112>
        {
            if (_node[i] == tag)
    4774:	fe 01       	movw	r30, r28
    4776:	e2 0f       	add	r30, r18
    4778:	f3 1f       	adc	r31, r19
    477a:	86 81       	ldd	r24, Z+6	; 0x06
    477c:	df 01       	movw	r26, r30
    477e:	17 96       	adiw	r26, 0x07	; 7
    4780:	86 17       	cp	r24, r22
    4782:	09 f0       	breq	.+2      	; 0x4786 <_ZN8AppState3NavEh+0x38>
    4784:	68 c0       	rjmp	.+208    	; 0x4856 <_ZN8AppState3NavEh+0x108>
            {
                Play(_node+i+2, _node[i + 1]);
    4786:	f9 01       	movw	r30, r18
    4788:	38 96       	adiw	r30, 0x08	; 8
    478a:	ec 0f       	add	r30, r28
    478c:	fd 1f       	adc	r31, r29
    #define R16(_x) *((short*)(_x))  // ARMfix
    
    //  Decided to play a node
    void Play(const byte* d, int len)
    {
        const byte* end = d + len;
    478e:	8c 91       	ld	r24, X
    4790:	9f 01       	movw	r18, r30
    4792:	28 0f       	add	r18, r24
    4794:	31 1d       	adc	r19, r1
    4796:	4f ef       	ldi	r20, 0xFF	; 255
    4798:	5f ef       	ldi	r21, 0xFF	; 255
    479a:	88 24       	eor	r8, r8
    479c:	8a 94       	dec	r8
    479e:	98 2c       	mov	r9, r8
    47a0:	54 01       	movw	r10, r8
    47a2:	ee 24       	eor	r14, r14
    47a4:	ea 94       	dec	r14
    47a6:	fe 2c       	mov	r15, r14
    47a8:	87 01       	movw	r16, r14
    47aa:	1e c0       	rjmp	.+60     	; 0x47e8 <_ZN8AppState3NavEh+0x9a>
        long movieOffset = -1;
        long movieLength = -1;
        int id = -1;
        while (d < end)
        {
            switch (*d++)
    47ac:	df 01       	movw	r26, r30
    47ae:	11 96       	adiw	r26, 0x01	; 1
    47b0:	80 81       	ld	r24, Z
    47b2:	80 32       	cpi	r24, 0x20	; 32
    47b4:	b1 f0       	breq	.+44     	; 0x47e2 <_ZN8AppState3NavEh+0x94>
    47b6:	80 34       	cpi	r24, 0x40	; 64
    47b8:	09 f0       	breq	.+2      	; 0x47bc <_ZN8AppState3NavEh+0x6e>
    47ba:	4b c0       	rjmp	.+150    	; 0x4852 <_ZN8AppState3NavEh+0x104>
            {
                case LocalMovieRef:
                    movieOffset = R16(d);
    47bc:	8d 91       	ld	r24, X+
    47be:	9c 91       	ld	r25, X
    47c0:	11 97       	sbiw	r26, 0x01	; 1
    47c2:	7c 01       	movw	r14, r24
    47c4:	00 27       	eor	r16, r16
    47c6:	f7 fc       	sbrc	r15, 7
    47c8:	00 95       	com	r16
    47ca:	10 2f       	mov	r17, r16
                    movieLength = R16(d+2);
    47cc:	12 96       	adiw	r26, 0x02	; 2
    47ce:	8d 91       	ld	r24, X+
    47d0:	9c 91       	ld	r25, X
    47d2:	13 97       	sbiw	r26, 0x03	; 3
    47d4:	4c 01       	movw	r8, r24
    47d6:	aa 24       	eor	r10, r10
    47d8:	97 fc       	sbrc	r9, 7
    47da:	a0 94       	com	r10
    47dc:	ba 2c       	mov	r11, r10
                    d += 4;
    47de:	35 96       	adiw	r30, 0x05	; 5
    47e0:	03 c0       	rjmp	.+6      	; 0x47e8 <_ZN8AppState3NavEh+0x9a>
                    break;
                case LocalNodeRef:
                    id = R16(d);
    47e2:	41 81       	ldd	r20, Z+1	; 0x01
    47e4:	52 81       	ldd	r21, Z+2	; 0x02
                    d += 2;
    47e6:	33 96       	adiw	r30, 0x03	; 3
    {
        const byte* end = d + len;
        long movieOffset = -1;
        long movieLength = -1;
        int id = -1;
        while (d < end)
    47e8:	e2 17       	cp	r30, r18
    47ea:	f3 07       	cpc	r31, r19
    47ec:	f8 f2       	brcs	.-66     	; 0x47ac <_ZN8AppState3NavEh+0x5e>
                default:
                    ASSERT("bad node");
                    return;
            }
        }
        Load(_fileName, id);
    47ee:	f6 e8       	ldi	r31, 0x86	; 134
    47f0:	cf 2e       	mov	r12, r31
    47f2:	d1 2c       	mov	r13, r1
    47f4:	cc 0e       	add	r12, r28
    47f6:	dd 1e       	adc	r13, r29
    47f8:	ce 01       	movw	r24, r28
    47fa:	b6 01       	movw	r22, r12
    47fc:	0e 94 b4 22 	call	0x4568	; 0x4568 <_ZN8AppState4LoadEPKci>
        
        //  Movie data in local file
        movieOffset *= 96*64*2; // Frame to byte offsets
    4800:	c8 01       	movw	r24, r16
    4802:	b7 01       	movw	r22, r14
    4804:	20 e0       	ldi	r18, 0x00	; 0
    4806:	30 e3       	ldi	r19, 0x30	; 48
    4808:	40 e0       	ldi	r20, 0x00	; 0
    480a:	50 e0       	ldi	r21, 0x00	; 0
    480c:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__mulsi3>
    4810:	7b 01       	movw	r14, r22
    4812:	8c 01       	movw	r16, r24
        movieLength *= 96*64*2;
        movieOffset += _headerLength;
    4814:	c3 56       	subi	r28, 0x63	; 99
    4816:	df 4f       	sbci	r29, 0xFF	; 255
    4818:	88 81       	ld	r24, Y
    481a:	99 81       	ldd	r25, Y+1	; 0x01
    481c:	aa 27       	eor	r26, r26
    481e:	97 fd       	sbrc	r25, 7
    4820:	a0 95       	com	r26
    4822:	ba 2f       	mov	r27, r26
    4824:	e8 0e       	add	r14, r24
    4826:	f9 1e       	adc	r15, r25
    4828:	0a 1f       	adc	r16, r26
    482a:	1b 1f       	adc	r17, r27
        return false;
    }
        
    void PlayMovie(const char* fileName, long movieOffset, long movieLength)
    {
        _moviePath = fileName;
    482c:	2a 97       	sbiw	r28, 0x0a	; 10
    482e:	c9 92       	st	Y+, r12
    4830:	d9 92       	st	Y+, r13
        _movieOffset = movieOffset;
    4832:	e9 92       	st	Y+, r14
    4834:	f9 92       	st	Y+, r15
    4836:	09 93       	st	Y+, r16
    4838:	19 93       	st	Y+, r17
        _movieEnd = movieOffset + movieLength;
    483a:	c5 01       	movw	r24, r10
    483c:	b4 01       	movw	r22, r8
    483e:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__mulsi3>
    4842:	e6 0e       	add	r14, r22
    4844:	f7 1e       	adc	r15, r23
    4846:	08 1f       	adc	r16, r24
    4848:	19 1f       	adc	r17, r25
    484a:	e8 82       	st	Y, r14
    484c:	f9 82       	std	Y+1, r15	; 0x01
    484e:	0a 83       	std	Y+2, r16	; 0x02
    4850:	1b 83       	std	Y+3, r17	; 0x03
    4852:	81 e0       	ldi	r24, 0x01	; 1
    4854:	0a c0       	rjmp	.+20     	; 0x486a <_ZN8AppState3NavEh+0x11c>
            if (_node[i] == tag)
            {
                Play(_node+i+2, _node[i + 1]);
                return true;
            }
            i += 2 + _node[i + 1];
    4856:	87 81       	ldd	r24, Z+7	; 0x07
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	02 96       	adiw	r24, 0x02	; 2
    485c:	28 0f       	add	r18, r24
    485e:	39 1f       	adc	r19, r25
    }
    
    bool Nav(byte tag)
    {
        int i = 0;
        while (i < _nodeSize)
    4860:	24 17       	cp	r18, r20
    4862:	35 07       	cpc	r19, r21
    4864:	0c f4       	brge	.+2      	; 0x4868 <_ZN8AppState3NavEh+0x11a>
    4866:	86 cf       	rjmp	.-244    	; 0x4774 <_ZN8AppState3NavEh+0x26>
    4868:	80 e0       	ldi	r24, 0x00	; 0
                return true;
            }
            i += 2 + _node[i + 1];
        }
        return false;
    }
    486a:	df 91       	pop	r29
    486c:	cf 91       	pop	r28
    486e:	1f 91       	pop	r17
    4870:	0f 91       	pop	r16
    4872:	ff 90       	pop	r15
    4874:	ef 90       	pop	r14
    4876:	df 90       	pop	r13
    4878:	cf 90       	pop	r12
    487a:	bf 90       	pop	r11
    487c:	af 90       	pop	r10
    487e:	9f 90       	pop	r9
    4880:	8f 90       	pop	r8
    4882:	08 95       	ret

00004884 <_ZN8AppState9CodeEventEv>:
            if (f.Open(_path))
                PlayMovie(_path,512,f.GetFileLength()-512);
        }
    }
    
    void CodeEvent()
    4884:	cf 93       	push	r28
    4886:	df 93       	push	r29
    4888:	ec 01       	movw	r28, r24
    {
        short r = 0;
        switch (_appID)
    488a:	c1 56       	subi	r28, 0x61	; 97
    488c:	df 4f       	sbci	r29, 0xFF	; 255
    488e:	88 81       	ld	r24, Y
    4890:	cf 59       	subi	r28, 0x9F	; 159
    4892:	d0 40       	sbci	r29, 0x00	; 0
    4894:	81 33       	cpi	r24, 0x31	; 49
    4896:	b9 f0       	breq	.+46     	; 0x48c6 <_ZN8AppState9CodeEventEv+0x42>
    4898:	82 33       	cpi	r24, 0x32	; 50
    489a:	20 f4       	brcc	.+8      	; 0x48a4 <_ZN8AppState9CodeEventEv+0x20>
    489c:	80 33       	cpi	r24, 0x30	; 48
    489e:	09 f0       	breq	.+2      	; 0x48a2 <_ZN8AppState9CodeEventEv+0x1e>
    48a0:	52 c0       	rjmp	.+164    	; 0x4946 <_ZN8AppState9CodeEventEv+0xc2>
    48a2:	0d c0       	rjmp	.+26     	; 0x48be <_ZN8AppState9CodeEventEv+0x3a>
    48a4:	8d 34       	cpi	r24, 0x4D	; 77
    48a6:	99 f0       	breq	.+38     	; 0x48ce <_ZN8AppState9CodeEventEv+0x4a>
    48a8:	88 35       	cpi	r24, 0x58	; 88
    48aa:	09 f0       	breq	.+2      	; 0x48ae <_ZN8AppState9CodeEventEv+0x2a>
    48ac:	4c c0       	rjmp	.+152    	; 0x4946 <_ZN8AppState9CodeEventEv+0xc2>
        {
            case 'X':
                shutdown();
    48ae:	0e 94 4e 1e 	call	0x3c9c	; 0x3c9c <_Z8shutdownv>
                r = -1; // Won't get here unless in dev mode
                _path[0] = 0;
    48b2:	c0 56       	subi	r28, 0x60	; 96
    48b4:	df 4f       	sbci	r29, 0xFF	; 255
    48b6:	18 82       	st	Y, r1
    48b8:	c0 5a       	subi	r28, 0xA0	; 160
    48ba:	d0 40       	sbci	r29, 0x00	; 0
    48bc:	3b c0       	rjmp	.+118    	; 0x4934 <_ZN8AppState9CodeEventEv+0xb0>
                break;
            case '0':   r = TunnelEvent(_keyEvent); break;
    48be:	ce 01       	movw	r24, r28
    48c0:	0e 94 8e 28 	call	0x511c	; 0x511c <_Z11TunnelEventR8KeyEvent>
    48c4:	34 c0       	rjmp	.+104    	; 0x492e <_ZN8AppState9CodeEventEv+0xaa>
            case '1':   r = DoomEvent(_keyEvent);   break;
    48c6:	ce 01       	movw	r24, r28
    48c8:	0e 94 ba 29 	call	0x5374	; 0x5374 <_Z9DoomEventR8KeyEvent>
    48cc:	30 c0       	rjmp	.+96     	; 0x492e <_ZN8AppState9CodeEventEv+0xaa>
            case 'M':
                if (_keyEvent.upEvent & (1 << TACT_UP) || _movieOffset == _movieEnd)
    48ce:	8a 81       	ldd	r24, Y+2	; 0x02
    48d0:	84 fd       	sbrc	r24, 4
    48d2:	14 c0       	rjmp	.+40     	; 0x48fc <_ZN8AppState9CodeEventEv+0x78>
    48d4:	fe 01       	movw	r30, r28
    48d6:	eb 56       	subi	r30, 0x6B	; 107
    48d8:	ff 4f       	sbci	r31, 0xFF	; 255
    48da:	c7 56       	subi	r28, 0x67	; 103
    48dc:	df 4f       	sbci	r29, 0xFF	; 255
    48de:	20 81       	ld	r18, Z
    48e0:	31 81       	ldd	r19, Z+1	; 0x01
    48e2:	42 81       	ldd	r20, Z+2	; 0x02
    48e4:	53 81       	ldd	r21, Z+3	; 0x03
    48e6:	88 81       	ld	r24, Y
    48e8:	99 81       	ldd	r25, Y+1	; 0x01
    48ea:	aa 81       	ldd	r26, Y+2	; 0x02
    48ec:	bb 81       	ldd	r27, Y+3	; 0x03
    48ee:	c9 59       	subi	r28, 0x99	; 153
    48f0:	d0 40       	sbci	r29, 0x00	; 0
    48f2:	28 17       	cp	r18, r24
    48f4:	39 07       	cpc	r19, r25
    48f6:	4a 07       	cpc	r20, r26
    48f8:	5b 07       	cpc	r21, r27
    48fa:	a9 f4       	brne	.+42     	; 0x4926 <_ZN8AppState9CodeEventEv+0xa2>
                {
                    _path[0] = 0;
    48fc:	c0 56       	subi	r28, 0x60	; 96
    48fe:	df 4f       	sbci	r29, 0xFF	; 255
    4900:	18 82       	st	Y, r1
    4902:	c0 5a       	subi	r28, 0xA0	; 160
    4904:	d0 40       	sbci	r29, 0x00	; 0
        _movieEnd = movieOffset + movieLength;
    }
    
    void StopMovie()
    {
        _movieOffset = _movieEnd;
    4906:	fe 01       	movw	r30, r28
    4908:	eb 56       	subi	r30, 0x6B	; 107
    490a:	ff 4f       	sbci	r31, 0xFF	; 255
    490c:	c7 56       	subi	r28, 0x67	; 103
    490e:	df 4f       	sbci	r29, 0xFF	; 255
    4910:	88 81       	ld	r24, Y
    4912:	99 81       	ldd	r25, Y+1	; 0x01
    4914:	aa 81       	ldd	r26, Y+2	; 0x02
    4916:	bb 81       	ldd	r27, Y+3	; 0x03
    4918:	c9 59       	subi	r28, 0x99	; 153
    491a:	d0 40       	sbci	r29, 0x00	; 0
    491c:	80 83       	st	Z, r24
    491e:	91 83       	std	Z+1, r25	; 0x01
    4920:	a2 83       	std	Z+2, r26	; 0x02
    4922:	b3 83       	std	Z+3, r27	; 0x03
    4924:	07 c0       	rjmp	.+14     	; 0x4934 <_ZN8AppState9CodeEventEv+0xb0>
                    _path[0] = 0;
                    StopMovie();
                    r = -1;
                }
                else
                    NextFrame();
    4926:	ce 01       	movw	r24, r28
    4928:	0e 94 a6 24 	call	0x494c	; 0x494c <_ZN8AppState9NextFrameEv>
    492c:	0c c0       	rjmp	.+24     	; 0x4946 <_ZN8AppState9CodeEventEv+0xc2>
                break;  // Playing a movie
        }
        if (r == -1)    // quit
    492e:	8f 5f       	subi	r24, 0xFF	; 255
    4930:	9f 4f       	sbci	r25, 0xFF	; 255
    4932:	49 f4       	brne	.+18     	; 0x4946 <_ZN8AppState9CodeEventEv+0xc2>
        {
            _appID = 0;
    4934:	c1 56       	subi	r28, 0x61	; 97
    4936:	df 4f       	sbci	r29, 0xFF	; 255
    4938:	18 82       	st	Y, r1
    493a:	cf 59       	subi	r28, 0x9F	; 159
    493c:	d0 40       	sbci	r29, 0x00	; 0
            Nav(LeftEvent);
    493e:	ce 01       	movw	r24, r28
    4940:	63 e0       	ldi	r22, 0x03	; 3
    4942:	0e 94 a7 23 	call	0x474e	; 0x474e <_ZN8AppState3NavEh>
        }
    }
    4946:	df 91       	pop	r29
    4948:	cf 91       	pop	r28
    494a:	08 95       	ret

0000494c <_ZN8AppState9NextFrameEv>:
                _movieOffset = dst;           
        }
    }
    
    //  Play movie
    void NextFrame()
    494c:	6f 92       	push	r6
    494e:	7f 92       	push	r7
    4950:	8f 92       	push	r8
    4952:	9f 92       	push	r9
    4954:	af 92       	push	r10
    4956:	bf 92       	push	r11
    4958:	cf 92       	push	r12
    495a:	df 92       	push	r13
    495c:	ef 92       	push	r14
    495e:	ff 92       	push	r15
    4960:	0f 93       	push	r16
    4962:	1f 93       	push	r17
    4964:	df 93       	push	r29
    4966:	cf 93       	push	r28
    4968:	cd b7       	in	r28, 0x3d	; 61
    496a:	de b7       	in	r29, 0x3e	; 62
    496c:	c2 52       	subi	r28, 0x22	; 34
    496e:	d4 40       	sbci	r29, 0x04	; 4
    4970:	0f b6       	in	r0, 0x3f	; 63
    4972:	f8 94       	cli
    4974:	de bf       	out	0x3e, r29	; 62
    4976:	0f be       	out	0x3f, r0	; 63
    4978:	cd bf       	out	0x3d, r28	; 61
    497a:	7c 01       	movw	r14, r24
    {
        if (_movieOffset == _movieEnd)
    497c:	05 e9       	ldi	r16, 0x95	; 149
    497e:	a0 2e       	mov	r10, r16
    4980:	b1 2c       	mov	r11, r1
    4982:	a8 0e       	add	r10, r24
    4984:	b9 1e       	adc	r11, r25
    4986:	19 e9       	ldi	r17, 0x99	; 153
    4988:	81 2e       	mov	r8, r17
    498a:	91 2c       	mov	r9, r1
    498c:	88 0e       	add	r8, r24
    498e:	99 1e       	adc	r9, r25
    4990:	d5 01       	movw	r26, r10
    4992:	2d 91       	ld	r18, X+
    4994:	3d 91       	ld	r19, X+
    4996:	4d 91       	ld	r20, X+
    4998:	5c 91       	ld	r21, X
    499a:	f4 01       	movw	r30, r8
    499c:	80 81       	ld	r24, Z
    499e:	91 81       	ldd	r25, Z+1	; 0x01
    49a0:	a2 81       	ldd	r26, Z+2	; 0x02
    49a2:	b3 81       	ldd	r27, Z+3	; 0x03
    49a4:	28 17       	cp	r18, r24
    49a6:	39 07       	cpc	r19, r25
    49a8:	4a 07       	cpc	r20, r26
    49aa:	5b 07       	cpc	r21, r27
    49ac:	09 f0       	breq	.+2      	; 0x49b0 <_ZN8AppState9NextFrameEv+0x64>
    49ae:	54 c0       	rjmp	.+168    	; 0x4a58 <_ZN8AppState9NextFrameEv+0x10c>
        return count;
    }
    
    void CodeInit()
    {
        if (_path[0] == ':')
    49b0:	b0 ea       	ldi	r27, 0xA0	; 160
    49b2:	cb 2e       	mov	r12, r27
    49b4:	d1 2c       	mov	r13, r1
    49b6:	ce 0c       	add	r12, r14
    49b8:	df 1c       	adc	r13, r15
    49ba:	d6 01       	movw	r26, r12
    49bc:	8c 91       	ld	r24, X
    49be:	8a 33       	cpi	r24, 0x3A	; 58
    49c0:	c1 f4       	brne	.+48     	; 0x49f2 <_ZN8AppState9NextFrameEv+0xa6>
        {
            _appID = _path[1];
    49c2:	f7 01       	movw	r30, r14
    49c4:	e1 56       	subi	r30, 0x61	; 97
    49c6:	ff 4f       	sbci	r31, 0xFF	; 255
    49c8:	21 ea       	ldi	r18, 0xA1	; 161
    49ca:	30 e0       	ldi	r19, 0x00	; 0
    49cc:	e2 0e       	add	r14, r18
    49ce:	f3 1e       	adc	r15, r19
    49d0:	d7 01       	movw	r26, r14
    49d2:	8c 91       	ld	r24, X
    49d4:	2f e5       	ldi	r18, 0x5F	; 95
    49d6:	3f ef       	ldi	r19, 0xFF	; 255
    49d8:	e2 0e       	add	r14, r18
    49da:	f3 1e       	adc	r15, r19
    49dc:	80 83       	st	Z, r24
            _keyEvent.msg = 0;
    49de:	d7 01       	movw	r26, r14
    49e0:	13 96       	adiw	r26, 0x03	; 3
    49e2:	1c 92       	st	X, r1
            CodeEvent();
    49e4:	c7 01       	movw	r24, r14
    49e6:	0e 94 42 24 	call	0x4884	; 0x4884 <_ZN8AppState9CodeEventEv>
            _keyEvent.msg = 1;
    49ea:	81 e0       	ldi	r24, 0x01	; 1
    49ec:	f7 01       	movw	r30, r14
    49ee:	83 83       	std	Z+3, r24	; 0x03
    49f0:	b7 c0       	rjmp	.+366    	; 0x4b60 <_ZN8AppState9NextFrameEv+0x214>
        }
        else if (_path[0] && _appID == 0)
    49f2:	88 23       	and	r24, r24
    49f4:	09 f4       	brne	.+2      	; 0x49f8 <_ZN8AppState9NextFrameEv+0xac>
    49f6:	b4 c0       	rjmp	.+360    	; 0x4b60 <_ZN8AppState9NextFrameEv+0x214>
    49f8:	f7 01       	movw	r30, r14
    49fa:	e1 56       	subi	r30, 0x61	; 97
    49fc:	ff 4f       	sbci	r31, 0xFF	; 255
    49fe:	80 81       	ld	r24, Z
    4a00:	88 23       	and	r24, r24
    4a02:	09 f0       	breq	.+2      	; 0x4a06 <_ZN8AppState9NextFrameEv+0xba>
    4a04:	ad c0       	rjmp	.+346    	; 0x4b60 <_ZN8AppState9NextFrameEv+0x214>
        {
            _appID = 'M';   // Playing movie in FILE
    4a06:	8d e4       	ldi	r24, 0x4D	; 77
    4a08:	80 83       	st	Z, r24
            File f;
    4a0a:	8e 01       	movw	r16, r28
    4a0c:	0d 5e       	subi	r16, 0xED	; 237
    4a0e:	1d 4f       	sbci	r17, 0xFD	; 253
    4a10:	c8 01       	movw	r24, r16
    4a12:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <_ZN4FileC1Ev>
            if (f.Open(_path))
    4a16:	c8 01       	movw	r24, r16
    4a18:	b6 01       	movw	r22, r12
    4a1a:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <_ZN4File4OpenEPKc>
    4a1e:	88 23       	and	r24, r24
    4a20:	09 f4       	brne	.+2      	; 0x4a24 <_ZN8AppState9NextFrameEv+0xd8>
    4a22:	9e c0       	rjmp	.+316    	; 0x4b60 <_ZN8AppState9NextFrameEv+0x214>
                PlayMovie(_path,512,f.GetFileLength()-512);
    4a24:	c8 01       	movw	r24, r16
    4a26:	0e 94 6a 26 	call	0x4cd4	; 0x4cd4 <_ZN4File13GetFileLengthEv>
        return false;
    }
        
    void PlayMovie(const char* fileName, long movieOffset, long movieLength)
    {
        _moviePath = fileName;
    4a2a:	23 e9       	ldi	r18, 0x93	; 147
    4a2c:	30 e0       	ldi	r19, 0x00	; 0
    4a2e:	e2 0e       	add	r14, r18
    4a30:	f3 1e       	adc	r15, r19
    4a32:	d7 01       	movw	r26, r14
    4a34:	cd 92       	st	X+, r12
    4a36:	dc 92       	st	X, r13
        _movieOffset = movieOffset;
    4a38:	20 e0       	ldi	r18, 0x00	; 0
    4a3a:	32 e0       	ldi	r19, 0x02	; 2
    4a3c:	40 e0       	ldi	r20, 0x00	; 0
    4a3e:	50 e0       	ldi	r21, 0x00	; 0
    4a40:	f5 01       	movw	r30, r10
    4a42:	20 83       	st	Z, r18
    4a44:	31 83       	std	Z+1, r19	; 0x01
    4a46:	42 83       	std	Z+2, r20	; 0x02
    4a48:	53 83       	std	Z+3, r21	; 0x03
        _movieEnd = movieOffset + movieLength;
    4a4a:	d4 01       	movw	r26, r8
    4a4c:	6d 93       	st	X+, r22
    4a4e:	7d 93       	st	X+, r23
    4a50:	8d 93       	st	X+, r24
    4a52:	9c 93       	st	X, r25
    4a54:	13 97       	sbiw	r26, 0x03	; 3
    4a56:	84 c0       	rjmp	.+264    	; 0x4b60 <_ZN8AppState9NextFrameEv+0x214>
        {
            CodeInit();
            return;
        }
        
        File file;
    4a58:	8e 01       	movw	r16, r28
    4a5a:	0d 5f       	subi	r16, 0xFD	; 253
    4a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a5e:	c8 01       	movw	r24, r16
    4a60:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <_ZN4FileC1Ev>
        file.Open(_moviePath);
    4a64:	e3 e9       	ldi	r30, 0x93	; 147
    4a66:	f0 e0       	ldi	r31, 0x00	; 0
    4a68:	ee 0e       	add	r14, r30
    4a6a:	ff 1e       	adc	r15, r31
    4a6c:	d7 01       	movw	r26, r14
    4a6e:	6d 91       	ld	r22, X+
    4a70:	7c 91       	ld	r23, X
    4a72:	ed e6       	ldi	r30, 0x6D	; 109
    4a74:	ff ef       	ldi	r31, 0xFF	; 255
    4a76:	ee 0e       	add	r14, r30
    4a78:	ff 1e       	adc	r15, r31
    4a7a:	c8 01       	movw	r24, r16
    4a7c:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <_ZN4File4OpenEPKc>
        _movieOffset = _movieEnd;
    }
    
    void ShowFrame(File& file)
    {
        OLED_FrameBegin();
    4a80:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <_Z15OLED_FrameBeginv>
    4a84:	dd 24       	eor	r13, r13
        for (byte i = 0; i < 24; i++)
        {
            int count;
            file.SetPos(_movieOffset);
    4a86:	90 2e       	mov	r9, r16
    4a88:	c1 2e       	mov	r12, r17
    4a8a:	85 01       	movw	r16, r10
            _movieOffset += 512;
            const byte* d = file.GetBuffer(&count);
    4a8c:	3e 01       	movw	r6, r28
    4a8e:	08 94       	sec
    4a90:	61 1c       	adc	r6, r1
    4a92:	71 1c       	adc	r7, r1
    {
        OLED_FrameBegin();
        for (byte i = 0; i < 24; i++)
        {
            int count;
            file.SetPos(_movieOffset);
    4a94:	d8 01       	movw	r26, r16
    4a96:	4d 91       	ld	r20, X+
    4a98:	5d 91       	ld	r21, X+
    4a9a:	6d 91       	ld	r22, X+
    4a9c:	7c 91       	ld	r23, X
    4a9e:	89 2d       	mov	r24, r9
    4aa0:	9c 2d       	mov	r25, r12
    4aa2:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <_ZN4File6SetPosEl>
            _movieOffset += 512;
    4aa6:	f8 01       	movw	r30, r16
    4aa8:	80 81       	ld	r24, Z
    4aaa:	91 81       	ldd	r25, Z+1	; 0x01
    4aac:	a2 81       	ldd	r26, Z+2	; 0x02
    4aae:	b3 81       	ldd	r27, Z+3	; 0x03
    4ab0:	80 50       	subi	r24, 0x00	; 0
    4ab2:	9e 4f       	sbci	r25, 0xFE	; 254
    4ab4:	af 4f       	sbci	r26, 0xFF	; 255
    4ab6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ab8:	80 83       	st	Z, r24
    4aba:	91 83       	std	Z+1, r25	; 0x01
    4abc:	a2 83       	std	Z+2, r26	; 0x02
    4abe:	b3 83       	std	Z+3, r27	; 0x03
            const byte* d = file.GetBuffer(&count);
    4ac0:	89 2d       	mov	r24, r9
    4ac2:	9c 2d       	mov	r25, r12
    4ac4:	b3 01       	movw	r22, r6
    4ac6:	0e 94 f0 26 	call	0x4de0	; 0x4de0 <_ZN4File9GetBufferEPi>
            OLED_Pixels(d,count>>1);
    4aca:	69 81       	ldd	r22, Y+1	; 0x01
    4acc:	7a 81       	ldd	r23, Y+2	; 0x02
    4ace:	75 95       	asr	r23
    4ad0:	67 95       	ror	r22
    4ad2:	0e 94 09 1f 	call	0x3e12	; 0x3e12 <_Z11OLED_PixelsPKhi>
    }
    
    void ShowFrame(File& file)
    {
        OLED_FrameBegin();
        for (byte i = 0; i < 24; i++)
    4ad6:	d3 94       	inc	r13
    4ad8:	f8 e1       	ldi	r31, 0x18	; 24
    4ada:	df 16       	cp	r13, r31
    4adc:	d9 f6       	brne	.-74     	; 0x4a94 <_ZN8AppState9NextFrameEv+0x148>
            const byte* d = file.GetBuffer(&count);
            OLED_Pixels(d,count>>1);
        }
        
        //  trick modes
        if (_appID == 'M')
    4ade:	2f e9       	ldi	r18, 0x9F	; 159
    4ae0:	30 e0       	ldi	r19, 0x00	; 0
    4ae2:	e2 0e       	add	r14, r18
    4ae4:	f3 1e       	adc	r15, r19
    4ae6:	d7 01       	movw	r26, r14
    4ae8:	8c 91       	ld	r24, X
    4aea:	e1 e6       	ldi	r30, 0x61	; 97
    4aec:	ff ef       	ldi	r31, 0xFF	; 255
    4aee:	ee 0e       	add	r14, r30
    4af0:	ff 1e       	adc	r15, r31
    4af2:	8d 34       	cpi	r24, 0x4D	; 77
    4af4:	a9 f5       	brne	.+106    	; 0x4b60 <_ZN8AppState9NextFrameEv+0x214>
        {
            long dst = _movieOffset;
    4af6:	d5 01       	movw	r26, r10
    4af8:	2d 91       	ld	r18, X+
    4afa:	3d 91       	ld	r19, X+
    4afc:	4d 91       	ld	r20, X+
    4afe:	5c 91       	ld	r21, X
            if (_keyEvent.keys & (1 << TACT_LEFT))
    4b00:	f7 01       	movw	r30, r14
    4b02:	80 81       	ld	r24, Z
    4b04:	86 ff       	sbrs	r24, 6
    4b06:	05 c0       	rjmp	.+10     	; 0x4b12 <_ZN8AppState9NextFrameEv+0x1c6>
                dst -= 6L*96*64*2;
    4b08:	20 50       	subi	r18, 0x00	; 0
    4b0a:	30 42       	sbci	r19, 0x20	; 32
    4b0c:	41 40       	sbci	r20, 0x01	; 1
    4b0e:	50 40       	sbci	r21, 0x00	; 0
    4b10:	06 c0       	rjmp	.+12     	; 0x4b1e <_ZN8AppState9NextFrameEv+0x1d2>
            else if (_keyEvent.keys & (1 << TACT_RIGHT))
    4b12:	87 ff       	sbrs	r24, 7
    4b14:	04 c0       	rjmp	.+8      	; 0x4b1e <_ZN8AppState9NextFrameEv+0x1d2>
                dst += 5L*96*64*2;    
    4b16:	20 50       	subi	r18, 0x00	; 0
    4b18:	30 41       	sbci	r19, 0x10	; 16
    4b1a:	4f 4f       	sbci	r20, 0xFF	; 255
    4b1c:	5f 4f       	sbci	r21, 0xFF	; 255
            if (dst > 0 && dst < _movieEnd)
    4b1e:	12 16       	cp	r1, r18
    4b20:	13 06       	cpc	r1, r19
    4b22:	14 06       	cpc	r1, r20
    4b24:	15 06       	cpc	r1, r21
    4b26:	e4 f4       	brge	.+56     	; 0x4b60 <_ZN8AppState9NextFrameEv+0x214>
    4b28:	69 e9       	ldi	r22, 0x99	; 153
    4b2a:	70 e0       	ldi	r23, 0x00	; 0
    4b2c:	e6 0e       	add	r14, r22
    4b2e:	f7 1e       	adc	r15, r23
    4b30:	f7 01       	movw	r30, r14
    4b32:	80 81       	ld	r24, Z
    4b34:	91 81       	ldd	r25, Z+1	; 0x01
    4b36:	a2 81       	ldd	r26, Z+2	; 0x02
    4b38:	b3 81       	ldd	r27, Z+3	; 0x03
    4b3a:	67 e6       	ldi	r22, 0x67	; 103
    4b3c:	7f ef       	ldi	r23, 0xFF	; 255
    4b3e:	e6 0e       	add	r14, r22
    4b40:	f7 1e       	adc	r15, r23
    4b42:	28 17       	cp	r18, r24
    4b44:	39 07       	cpc	r19, r25
    4b46:	4a 07       	cpc	r20, r26
    4b48:	5b 07       	cpc	r21, r27
    4b4a:	54 f4       	brge	.+20     	; 0x4b60 <_ZN8AppState9NextFrameEv+0x214>
                _movieOffset = dst;           
    4b4c:	85 e9       	ldi	r24, 0x95	; 149
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	e8 0e       	add	r14, r24
    4b52:	f9 1e       	adc	r15, r25
    4b54:	d7 01       	movw	r26, r14
    4b56:	2d 93       	st	X+, r18
    4b58:	3d 93       	st	X+, r19
    4b5a:	4d 93       	st	X+, r20
    4b5c:	5c 93       	st	X, r21
    4b5e:	13 97       	sbiw	r26, 0x03	; 3
        }
        
        File file;
        file.Open(_moviePath);
        ShowFrame(file);
    }
    4b60:	ce 5d       	subi	r28, 0xDE	; 222
    4b62:	db 4f       	sbci	r29, 0xFB	; 251
    4b64:	0f b6       	in	r0, 0x3f	; 63
    4b66:	f8 94       	cli
    4b68:	de bf       	out	0x3e, r29	; 62
    4b6a:	0f be       	out	0x3f, r0	; 63
    4b6c:	cd bf       	out	0x3d, r28	; 61
    4b6e:	cf 91       	pop	r28
    4b70:	df 91       	pop	r29
    4b72:	1f 91       	pop	r17
    4b74:	0f 91       	pop	r16
    4b76:	ff 90       	pop	r15
    4b78:	ef 90       	pop	r14
    4b7a:	df 90       	pop	r13
    4b7c:	cf 90       	pop	r12
    4b7e:	bf 90       	pop	r11
    4b80:	af 90       	pop	r10
    4b82:	9f 90       	pop	r9
    4b84:	8f 90       	pop	r8
    4b86:	7f 90       	pop	r7
    4b88:	6f 90       	pop	r6
    4b8a:	08 95       	ret

00004b8c <_ZN11Application4LoopEh>:
    _appState.Init();
    _appState.Load("test.rmv");
    _appState.Splash();
}

void Application::Loop(byte keyMap)
    4b8c:	0f 93       	push	r16
    4b8e:	1f 93       	push	r17
    4b90:	cf 93       	push	r28
    4b92:	df 93       	push	r29
        }
    }
    
    void Loop(byte k)
    {
        byte changed = k ^ _keyEventlast;
    4b94:	20 91 4a 01 	lds	r18, 0x014A
    4b98:	28 27       	eor	r18, r24
        _keyEventlast = k;
    4b9a:	80 93 4a 01 	sts	0x014A, r24
        _keyEvent.keys = k;
    4b9e:	80 93 46 01 	sts	0x0146, r24
        _keyEvent.downEvent = changed & k;
    4ba2:	92 2f       	mov	r25, r18
    4ba4:	98 23       	and	r25, r24
    4ba6:	90 93 47 01 	sts	0x0147, r25
        _keyEvent.upEvent = changed & ~k;
    4baa:	80 95       	com	r24
    4bac:	28 23       	and	r18, r24
    4bae:	20 93 48 01 	sts	0x0148, r18

        //  Handle events to doom, joomp etc
        if (_appID)
    4bb2:	80 91 e5 01 	lds	r24, 0x01E5
    4bb6:	88 23       	and	r24, r24
    4bb8:	29 f0       	breq	.+10     	; 0x4bc4 <_ZN11Application4LoopEh+0x38>
        {
            CodeEvent();
    4bba:	86 e4       	ldi	r24, 0x46	; 70
    4bbc:	91 e0       	ldi	r25, 0x01	; 1
    4bbe:	0e 94 42 24 	call	0x4884	; 0x4884 <_ZN8AppState9CodeEventEv>
    4bc2:	20 c0       	rjmp	.+64     	; 0x4c04 <_ZN11Application4LoopEh+0x78>
            return;
        }
        
        //  Handle framework events       
        NextFrame();
    4bc4:	86 e4       	ldi	r24, 0x46	; 70
    4bc6:	91 e0       	ldi	r25, 0x01	; 1
    4bc8:	0e 94 a6 24 	call	0x494c	; 0x494c <_ZN8AppState9NextFrameEv>
        byte up = _keyEvent.upEvent;
    4bcc:	80 91 48 01 	lds	r24, 0x0148
        if (up)
    4bd0:	88 23       	and	r24, r24
    4bd2:	c1 f0       	breq	.+48     	; 0x4c04 <_ZN11Application4LoopEh+0x78>
    4bd4:	c4 e0       	ldi	r28, 0x04	; 4
    4bd6:	d0 e0       	ldi	r29, 0x00	; 0
        {            
            for (byte i = 0; i < 4; i++)
                if ((1 << (TACT_UP+i)) & up)
    4bd8:	08 2f       	mov	r16, r24
    4bda:	10 e0       	ldi	r17, 0x00	; 0
    4bdc:	c8 01       	movw	r24, r16
    4bde:	0c 2e       	mov	r0, r28
    4be0:	02 c0       	rjmp	.+4      	; 0x4be6 <_ZN11Application4LoopEh+0x5a>
    4be2:	95 95       	asr	r25
    4be4:	87 95       	ror	r24
    4be6:	0a 94       	dec	r0
    4be8:	e2 f7       	brpl	.-8      	; 0x4be2 <_ZN11Application4LoopEh+0x56>
    4bea:	80 ff       	sbrs	r24, 0
    4bec:	07 c0       	rjmp	.+14     	; 0x4bfc <_ZN11Application4LoopEh+0x70>
                    Nav(i + UpEvent);
    4bee:	ce 01       	movw	r24, r28
    4bf0:	83 50       	subi	r24, 0x03	; 3
    4bf2:	68 2f       	mov	r22, r24
    4bf4:	86 e4       	ldi	r24, 0x46	; 70
    4bf6:	91 e0       	ldi	r25, 0x01	; 1
    4bf8:	0e 94 a7 23 	call	0x474e	; 0x474e <_ZN8AppState3NavEh>
    4bfc:	21 96       	adiw	r28, 0x01	; 1
        //  Handle framework events       
        NextFrame();
        byte up = _keyEvent.upEvent;
        if (up)
        {            
            for (byte i = 0; i < 4; i++)
    4bfe:	c8 30       	cpi	r28, 0x08	; 8
    4c00:	d1 05       	cpc	r29, r1
    4c02:	61 f7       	brne	.-40     	; 0x4bdc <_ZN11Application4LoopEh+0x50>
}

void Application::Loop(byte keyMap)
{
    _appState.Loop(keyMap);
    4c04:	df 91       	pop	r29
    4c06:	cf 91       	pop	r28
    4c08:	1f 91       	pop	r17
    4c0a:	0f 91       	pop	r16
    4c0c:	08 95       	ret

00004c0e <_ZN11Application4InitEv>:
//=====================================================

byte reader(byte* buffer, unsigned long sector, byte count);
AppState _appState;

void Application::Init()
    4c0e:	0f 93       	push	r16
    4c10:	1f 93       	push	r17
    4c12:	df 93       	push	r29
    4c14:	cf 93       	push	r28
    4c16:	cd b7       	in	r28, 0x3d	; 61
    4c18:	de b7       	in	r29, 0x3e	; 62
    4c1a:	c0 50       	subi	r28, 0x00	; 0
    4c1c:	d2 40       	sbci	r29, 0x02	; 2
    4c1e:	0f b6       	in	r0, 0x3f	; 63
    4c20:	f8 94       	cli
    4c22:	de bf       	out	0x3e, r29	; 62
    4c24:	0f be       	out	0x3f, r0	; 63
    4c26:	cd bf       	out	0x3d, r28	; 61
{    
        
    #ifndef _WIN32
    mmc::initialize();
    4c28:	0e 94 37 20 	call	0x406e	; 0x406e <_ZN3mmc10initializeEv>
    #endif
    
    {
        byte fatBuffer[512];
        microfat2::initialize(fatBuffer,reader);
    4c2c:	ce 01       	movw	r24, r28
    4c2e:	01 96       	adiw	r24, 0x01	; 1
    4c30:	62 e7       	ldi	r22, 0x72	; 114
    4c32:	76 e2       	ldi	r23, 0x26	; 38
    4c34:	0e 94 21 21 	call	0x4242	; 0x4242 <_ZN9microfat210initializeEPhPFhS0_mhE>
    };

public:    
    void Init()
    {
        _keyEventlast = 0;
    4c38:	10 92 4a 01 	sts	0x014A, r1
        _keyEvent.msg = 0;
    4c3c:	10 92 49 01 	sts	0x0149, r1
        return _nodeSize;
    }
    
    int Load(const char* path)
    {
        _movieOffset = _movieEnd = 0;
    4c40:	10 92 df 01 	sts	0x01DF, r1
    4c44:	10 92 e0 01 	sts	0x01E0, r1
    4c48:	10 92 e1 01 	sts	0x01E1, r1
    4c4c:	10 92 e2 01 	sts	0x01E2, r1
    4c50:	10 92 db 01 	sts	0x01DB, r1
    4c54:	10 92 dc 01 	sts	0x01DC, r1
    4c58:	10 92 dd 01 	sts	0x01DD, r1
    4c5c:	10 92 de 01 	sts	0x01DE, r1
        strcpy(_fileName,path);
    4c60:	00 e0       	ldi	r16, 0x00	; 0
    4c62:	11 e0       	ldi	r17, 0x01	; 1
    4c64:	8c ec       	ldi	r24, 0xCC	; 204
    4c66:	91 e0       	ldi	r25, 0x01	; 1
    4c68:	b8 01       	movw	r22, r16
    4c6a:	0e 94 b4 2d 	call	0x5b68	; 0x5b68 <strcpy>
        return Load(path,1);
    4c6e:	86 e4       	ldi	r24, 0x46	; 70
    4c70:	91 e0       	ldi	r25, 0x01	; 1
    4c72:	b8 01       	movw	r22, r16
    4c74:	41 e0       	ldi	r20, 0x01	; 1
    4c76:	50 e0       	ldi	r21, 0x00	; 0
    4c78:	0e 94 b4 22 	call	0x4568	; 0x4568 <_ZN8AppState4LoadEPKci>
    }
    
    void Splash()
    {
        strcpy(_path,"splash.rmv");
    4c7c:	86 ee       	ldi	r24, 0xE6	; 230
    4c7e:	91 e0       	ldi	r25, 0x01	; 1
    4c80:	69 e0       	ldi	r22, 0x09	; 9
    4c82:	71 e0       	ldi	r23, 0x01	; 1
    4c84:	0e 94 b4 2d 	call	0x5b68	; 0x5b68 <strcpy>
        microfat2::initialize(fatBuffer,reader);
    }
    _appState.Init();
    _appState.Load("test.rmv");
    _appState.Splash();
}
    4c88:	c0 50       	subi	r28, 0x00	; 0
    4c8a:	de 4f       	sbci	r29, 0xFE	; 254
    4c8c:	0f b6       	in	r0, 0x3f	; 63
    4c8e:	f8 94       	cli
    4c90:	de bf       	out	0x3e, r29	; 62
    4c92:	0f be       	out	0x3f, r0	; 63
    4c94:	cd bf       	out	0x3d, r28	; 61
    4c96:	cf 91       	pop	r28
    4c98:	df 91       	pop	r29
    4c9a:	1f 91       	pop	r17
    4c9c:	0f 91       	pop	r16
    4c9e:	08 95       	ret

00004ca0 <_ZN4FileC1Ev>:
  #else
    return reader(dst,sector,1);
  #endif
}

File::File() : _mark(512),_progmem(0),_sector(-1),_origin(0),_fileLength(-1)
    4ca0:	fc 01       	movw	r30, r24
    4ca2:	e0 50       	subi	r30, 0x00	; 0
    4ca4:	fe 4f       	sbci	r31, 0xFE	; 254
    4ca6:	80 e0       	ldi	r24, 0x00	; 0
    4ca8:	92 e0       	ldi	r25, 0x02	; 2
    4caa:	81 93       	st	Z+, r24
    4cac:	91 93       	st	Z+, r25
    4cae:	11 92       	st	Z+, r1
    4cb0:	11 92       	st	Z+, r1
    4cb2:	8f ef       	ldi	r24, 0xFF	; 255
    4cb4:	9f ef       	ldi	r25, 0xFF	; 255
    4cb6:	af ef       	ldi	r26, 0xFF	; 255
    4cb8:	bf ef       	ldi	r27, 0xFF	; 255
    4cba:	81 93       	st	Z+, r24
    4cbc:	91 93       	st	Z+, r25
    4cbe:	a1 93       	st	Z+, r26
    4cc0:	b1 93       	st	Z+, r27
    4cc2:	11 92       	st	Z+, r1
    4cc4:	11 92       	st	Z+, r1
    4cc6:	11 92       	st	Z+, r1
    4cc8:	11 92       	st	Z+, r1
    4cca:	80 83       	st	Z, r24
    4ccc:	91 83       	std	Z+1, r25	; 0x01
    4cce:	a2 83       	std	Z+2, r26	; 0x02
    4cd0:	b3 83       	std	Z+3, r27	; 0x03
{
}
    4cd2:	08 95       	ret

00004cd4 <_ZN4File13GetFileLengthEv>:
    #endif
    return 0;
#endif
}

ulong File::GetFileLength()
    4cd4:	fc 01       	movw	r30, r24
    4cd6:	e4 5f       	subi	r30, 0xF4	; 244
    4cd8:	fd 4f       	sbci	r31, 0xFD	; 253
    4cda:	60 81       	ld	r22, Z
    4cdc:	71 81       	ldd	r23, Z+1	; 0x01
{
    return _fileLength;
}
    4cde:	82 81       	ldd	r24, Z+2	; 0x02
    4ce0:	93 81       	ldd	r25, Z+3	; 0x03
    4ce2:	08 95       	ret

00004ce4 <_Z6readerPhmh>:
byte reader(byte* buffer, unsigned long sector, byte count);
HANDLE _h = INVALID_HANDLE_VALUE;
#else
uint8_t reader(uint8_t* buffer, unsigned long sector, uint8_t count)
{
    return mmc::readSectors(buffer,sector,count);
    4ce4:	0e 94 aa 20 	call	0x4154	; 0x4154 <_ZN3mmc11readSectorsEPhmh>
}
    4ce8:	08 95       	ret

00004cea <_Z10readSectorlPh>:
#endif

byte readSector(long sector, byte* dst)
    4cea:	0f 93       	push	r16
    4cec:	1f 93       	push	r17
    4cee:	8b 01       	movw	r16, r22
    4cf0:	9c 01       	movw	r18, r24
    4cf2:	ca 01       	movw	r24, r20
byte reader(byte* buffer, unsigned long sector, byte count);
HANDLE _h = INVALID_HANDLE_VALUE;
#else
uint8_t reader(uint8_t* buffer, unsigned long sector, uint8_t count)
{
    return mmc::readSectors(buffer,sector,count);
    4cf4:	b9 01       	movw	r22, r18
    4cf6:	a8 01       	movw	r20, r16
    4cf8:	21 e0       	ldi	r18, 0x01	; 1
    4cfa:	0e 94 aa 20 	call	0x4154	; 0x4154 <_ZN3mmc11readSectorsEPhmh>
    ::ReadFile(_h,dst,512,&r,NULL);
    return 0;
  #else
    return reader(dst,sector,1);
  #endif
}
    4cfe:	1f 91       	pop	r17
    4d00:	0f 91       	pop	r16
    4d02:	08 95       	ret

00004d04 <_ZN4File4LoadEl>:
        SetPos(GetPos() + count);
    }
    ASSERT(_mark >= 0 && _mark <= 0x200);
}

void File::Load(long sector)
    4d04:	cf 93       	push	r28
    4d06:	df 93       	push	r29
    4d08:	ec 01       	movw	r28, r24
    4d0a:	9a 01       	movw	r18, r20
    4d0c:	ab 01       	movw	r20, r22
{
    _mark = 0;
    4d0e:	c0 50       	subi	r28, 0x00	; 0
    4d10:	de 4f       	sbci	r29, 0xFE	; 254
    4d12:	19 82       	std	Y+1, r1	; 0x01
    4d14:	18 82       	st	Y, r1
    4d16:	c0 50       	subi	r28, 0x00	; 0
    4d18:	d2 40       	sbci	r29, 0x02	; 2
    if (_sector == sector)
    4d1a:	fe 01       	movw	r30, r28
    4d1c:	ec 5f       	subi	r30, 0xFC	; 252
    4d1e:	fd 4f       	sbci	r31, 0xFD	; 253
    4d20:	80 81       	ld	r24, Z
    4d22:	91 81       	ldd	r25, Z+1	; 0x01
    4d24:	a2 81       	ldd	r26, Z+2	; 0x02
    4d26:	b3 81       	ldd	r27, Z+3	; 0x03
    4d28:	82 17       	cp	r24, r18
    4d2a:	93 07       	cpc	r25, r19
    4d2c:	a4 07       	cpc	r26, r20
    4d2e:	b5 07       	cpc	r27, r21
    4d30:	91 f1       	breq	.+100    	; 0x4d96 <_ZN4File4LoadEl+0x92>
        return;
    _sector = sector;
    4d32:	20 83       	st	Z, r18
    4d34:	31 83       	std	Z+1, r19	; 0x01
    4d36:	42 83       	std	Z+2, r20	; 0x02
    4d38:	53 83       	std	Z+3, r21	; 0x03
    
    if (_progmem)
    4d3a:	ce 5f       	subi	r28, 0xFE	; 254
    4d3c:	dd 4f       	sbci	r29, 0xFD	; 253
    4d3e:	88 81       	ld	r24, Y
    4d40:	99 81       	ldd	r25, Y+1	; 0x01
    4d42:	c2 50       	subi	r28, 0x02	; 2
    4d44:	d2 40       	sbci	r29, 0x02	; 2
    4d46:	00 97       	sbiw	r24, 0x00	; 0
    4d48:	b9 f0       	breq	.+46     	; 0x4d78 <_ZN4File4LoadEl+0x74>
    {
        const byte* p = _progmem + (sector << 9);
    4d4a:	a9 01       	movw	r20, r18
    4d4c:	54 2f       	mov	r21, r20
    4d4e:	44 27       	eor	r20, r20
    4d50:	55 0f       	add	r21, r21
    4d52:	48 0f       	add	r20, r24
    4d54:	59 1f       	adc	r21, r25
    4d56:	20 e0       	ldi	r18, 0x00	; 0
    4d58:	30 e0       	ldi	r19, 0x00	; 0
        for (ushort i = 0; i < 512; i++)
            _buffer[i] = pgm_read_byte(p++); // File system buffer?
    4d5a:	fa 01       	movw	r30, r20
    4d5c:	e2 0f       	add	r30, r18
    4d5e:	f3 1f       	adc	r31, r19
    4d60:	e4 91       	lpm	r30, Z+
    4d62:	de 01       	movw	r26, r28
    4d64:	a2 0f       	add	r26, r18
    4d66:	b3 1f       	adc	r27, r19
    4d68:	ec 93       	st	X, r30
    _sector = sector;
    
    if (_progmem)
    {
        const byte* p = _progmem + (sector << 9);
        for (ushort i = 0; i < 512; i++)
    4d6a:	2f 5f       	subi	r18, 0xFF	; 255
    4d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d6e:	82 e0       	ldi	r24, 0x02	; 2
    4d70:	20 30       	cpi	r18, 0x00	; 0
    4d72:	38 07       	cpc	r19, r24
    4d74:	91 f7       	brne	.-28     	; 0x4d5a <_ZN4File4LoadEl+0x56>
    4d76:	0f c0       	rjmp	.+30     	; 0x4d96 <_ZN4File4LoadEl+0x92>
            _buffer[i] = pgm_read_byte(p++); // File system buffer?
    }
    else
        readSector(_sector + _origin,_buffer);
    4d78:	c8 5f       	subi	r28, 0xF8	; 248
    4d7a:	dd 4f       	sbci	r29, 0xFD	; 253
    4d7c:	68 81       	ld	r22, Y
    4d7e:	79 81       	ldd	r23, Y+1	; 0x01
    4d80:	8a 81       	ldd	r24, Y+2	; 0x02
    4d82:	9b 81       	ldd	r25, Y+3	; 0x03
    4d84:	c8 50       	subi	r28, 0x08	; 8
    4d86:	d2 40       	sbci	r29, 0x02	; 2
    4d88:	62 0f       	add	r22, r18
    4d8a:	73 1f       	adc	r23, r19
    4d8c:	84 1f       	adc	r24, r20
    4d8e:	95 1f       	adc	r25, r21
    4d90:	ae 01       	movw	r20, r28
    4d92:	0e 94 75 26 	call	0x4cea	; 0x4cea <_Z10readSectorlPh>
}
    4d96:	df 91       	pop	r29
    4d98:	cf 91       	pop	r28
    4d9a:	08 95       	ret

00004d9c <_ZN4File6SetPosEl>:
long  File::GetPos()
{
    return (_sector << 9) + _mark;
}

void  File::SetPos(long pos)
    4d9c:	cf 92       	push	r12
    4d9e:	df 92       	push	r13
    4da0:	ef 92       	push	r14
    4da2:	ff 92       	push	r15
    4da4:	0f 93       	push	r16
    4da6:	1f 93       	push	r17
    4da8:	8c 01       	movw	r16, r24
    4daa:	6a 01       	movw	r12, r20
    4dac:	7b 01       	movw	r14, r22
{
    Load(pos >> 9);
    4dae:	e9 e0       	ldi	r30, 0x09	; 9
    4db0:	75 95       	asr	r23
    4db2:	67 95       	ror	r22
    4db4:	57 95       	ror	r21
    4db6:	47 95       	ror	r20
    4db8:	ea 95       	dec	r30
    4dba:	d1 f7       	brne	.-12     	; 0x4db0 <_ZN4File6SetPosEl+0x14>
    4dbc:	0e 94 82 26 	call	0x4d04	; 0x4d04 <_ZN4File4LoadEl>
    _mark = pos & 0x1FF;
    4dc0:	00 50       	subi	r16, 0x00	; 0
    4dc2:	1e 4f       	sbci	r17, 0xFE	; 254
    4dc4:	8f ef       	ldi	r24, 0xFF	; 255
    4dc6:	91 e0       	ldi	r25, 0x01	; 1
    4dc8:	c8 22       	and	r12, r24
    4dca:	d9 22       	and	r13, r25
    4dcc:	f8 01       	movw	r30, r16
    4dce:	d1 82       	std	Z+1, r13	; 0x01
    4dd0:	c0 82       	st	Z, r12
    4dd2:	1f 91       	pop	r17
    4dd4:	0f 91       	pop	r16
    4dd6:	ff 90       	pop	r15
    4dd8:	ef 90       	pop	r14
    4dda:	df 90       	pop	r13
    4ddc:	cf 90       	pop	r12
    4dde:	08 95       	ret

00004de0 <_ZN4File9GetBufferEPi>:
    for (int i = 0; i < len; i++)
        dst[i] = ReadByte();
    return len;
}

const byte* File::GetBuffer(int* count)
    4de0:	0f 93       	push	r16
    4de2:	1f 93       	push	r17
    4de4:	cf 93       	push	r28
    4de6:	df 93       	push	r29
    4de8:	ec 01       	movw	r28, r24
    4dea:	8b 01       	movw	r16, r22
{
    if (_mark == 512)
    4dec:	c0 50       	subi	r28, 0x00	; 0
    4dee:	de 4f       	sbci	r29, 0xFE	; 254
    4df0:	88 81       	ld	r24, Y
    4df2:	99 81       	ldd	r25, Y+1	; 0x01
    4df4:	c0 50       	subi	r28, 0x00	; 0
    4df6:	d2 40       	sbci	r29, 0x02	; 2
    4df8:	80 50       	subi	r24, 0x00	; 0
    4dfa:	92 40       	sbci	r25, 0x02	; 2
    4dfc:	79 f4       	brne	.+30     	; 0x4e1c <_ZN4File9GetBufferEPi+0x3c>
        Load(_sector + 1);
    4dfe:	cc 5f       	subi	r28, 0xFC	; 252
    4e00:	dd 4f       	sbci	r29, 0xFD	; 253
    4e02:	48 81       	ld	r20, Y
    4e04:	59 81       	ldd	r21, Y+1	; 0x01
    4e06:	6a 81       	ldd	r22, Y+2	; 0x02
    4e08:	7b 81       	ldd	r23, Y+3	; 0x03
    4e0a:	c4 50       	subi	r28, 0x04	; 4
    4e0c:	d2 40       	sbci	r29, 0x02	; 2
    4e0e:	4f 5f       	subi	r20, 0xFF	; 255
    4e10:	5f 4f       	sbci	r21, 0xFF	; 255
    4e12:	6f 4f       	sbci	r22, 0xFF	; 255
    4e14:	7f 4f       	sbci	r23, 0xFF	; 255
    4e16:	ce 01       	movw	r24, r28
    4e18:	0e 94 82 26 	call	0x4d04	; 0x4d04 <_ZN4File4LoadEl>
    *count = sizeof(_buffer) - _mark;
    4e1c:	fe 01       	movw	r30, r28
    4e1e:	e0 50       	subi	r30, 0x00	; 0
    4e20:	fe 4f       	sbci	r31, 0xFE	; 254
    4e22:	80 e0       	ldi	r24, 0x00	; 0
    4e24:	92 e0       	ldi	r25, 0x02	; 2
    4e26:	20 81       	ld	r18, Z
    4e28:	31 81       	ldd	r19, Z+1	; 0x01
    4e2a:	82 1b       	sub	r24, r18
    4e2c:	93 0b       	sbc	r25, r19
    4e2e:	d8 01       	movw	r26, r16
    4e30:	8d 93       	st	X+, r24
    4e32:	9c 93       	st	X, r25
    4e34:	20 81       	ld	r18, Z
    4e36:	31 81       	ldd	r19, Z+1	; 0x01
    4e38:	2c 0f       	add	r18, r28
    4e3a:	3d 1f       	adc	r19, r29
    return _buffer + _mark;
}
    4e3c:	c9 01       	movw	r24, r18
    4e3e:	df 91       	pop	r29
    4e40:	cf 91       	pop	r28
    4e42:	1f 91       	pop	r17
    4e44:	0f 91       	pop	r16
    4e46:	08 95       	ret

00004e48 <_ZN4File8ReadByteEv>:
ulong File::GetFileLength()
{
    return _fileLength;
}

byte File::ReadByte()
    4e48:	cf 93       	push	r28
    4e4a:	df 93       	push	r29
    4e4c:	ec 01       	movw	r28, r24
{
    if (_mark == 512)
    4e4e:	c0 50       	subi	r28, 0x00	; 0
    4e50:	de 4f       	sbci	r29, 0xFE	; 254
    4e52:	88 81       	ld	r24, Y
    4e54:	99 81       	ldd	r25, Y+1	; 0x01
    4e56:	c0 50       	subi	r28, 0x00	; 0
    4e58:	d2 40       	sbci	r29, 0x02	; 2
    4e5a:	80 50       	subi	r24, 0x00	; 0
    4e5c:	92 40       	sbci	r25, 0x02	; 2
    4e5e:	79 f4       	brne	.+30     	; 0x4e7e <_ZN4File8ReadByteEv+0x36>
        Load(_sector + 1);
    4e60:	cc 5f       	subi	r28, 0xFC	; 252
    4e62:	dd 4f       	sbci	r29, 0xFD	; 253
    4e64:	48 81       	ld	r20, Y
    4e66:	59 81       	ldd	r21, Y+1	; 0x01
    4e68:	6a 81       	ldd	r22, Y+2	; 0x02
    4e6a:	7b 81       	ldd	r23, Y+3	; 0x03
    4e6c:	c4 50       	subi	r28, 0x04	; 4
    4e6e:	d2 40       	sbci	r29, 0x02	; 2
    4e70:	4f 5f       	subi	r20, 0xFF	; 255
    4e72:	5f 4f       	sbci	r21, 0xFF	; 255
    4e74:	6f 4f       	sbci	r22, 0xFF	; 255
    4e76:	7f 4f       	sbci	r23, 0xFF	; 255
    4e78:	ce 01       	movw	r24, r28
    4e7a:	0e 94 82 26 	call	0x4d04	; 0x4d04 <_ZN4File4LoadEl>
    return _buffer[_mark++];
    4e7e:	fe 01       	movw	r30, r28
    4e80:	e0 50       	subi	r30, 0x00	; 0
    4e82:	fe 4f       	sbci	r31, 0xFE	; 254
    4e84:	20 81       	ld	r18, Z
    4e86:	31 81       	ldd	r19, Z+1	; 0x01
    4e88:	c2 0f       	add	r28, r18
    4e8a:	d3 1f       	adc	r29, r19
    4e8c:	88 81       	ld	r24, Y
    4e8e:	2f 5f       	subi	r18, 0xFF	; 255
    4e90:	3f 4f       	sbci	r19, 0xFF	; 255
    4e92:	31 83       	std	Z+1, r19	; 0x01
    4e94:	20 83       	st	Z, r18
}
    4e96:	df 91       	pop	r29
    4e98:	cf 91       	pop	r28
    4e9a:	08 95       	ret

00004e9c <_ZN4File4ReadEPvi>:
      
int File::Read(void* d, int len)
    4e9c:	cf 92       	push	r12
    4e9e:	df 92       	push	r13
    4ea0:	ef 92       	push	r14
    4ea2:	ff 92       	push	r15
    4ea4:	0f 93       	push	r16
    4ea6:	1f 93       	push	r17
    4ea8:	cf 93       	push	r28
    4eaa:	df 93       	push	r29
    4eac:	6c 01       	movw	r12, r24
    4eae:	7b 01       	movw	r14, r22
    4eb0:	8a 01       	movw	r16, r20
    4eb2:	c0 e0       	ldi	r28, 0x00	; 0
    4eb4:	d0 e0       	ldi	r29, 0x00	; 0
    4eb6:	08 c0       	rjmp	.+16     	; 0x4ec8 <_ZN4File4ReadEPvi+0x2c>
{
    byte* dst = (byte*)d;
    for (int i = 0; i < len; i++)
        dst[i] = ReadByte();
    4eb8:	c6 01       	movw	r24, r12
    4eba:	0e 94 24 27 	call	0x4e48	; 0x4e48 <_ZN4File8ReadByteEv>
    4ebe:	f7 01       	movw	r30, r14
    4ec0:	ec 0f       	add	r30, r28
    4ec2:	fd 1f       	adc	r31, r29
    4ec4:	80 83       	st	Z, r24
}
      
int File::Read(void* d, int len)
{
    byte* dst = (byte*)d;
    for (int i = 0; i < len; i++)
    4ec6:	21 96       	adiw	r28, 0x01	; 1
    4ec8:	c0 17       	cp	r28, r16
    4eca:	d1 07       	cpc	r29, r17
    4ecc:	ac f3       	brlt	.-22     	; 0x4eb8 <_ZN4File4ReadEPvi+0x1c>
        dst[i] = ReadByte();
    return len;
}
    4ece:	c8 01       	movw	r24, r16
    4ed0:	df 91       	pop	r29
    4ed2:	cf 91       	pop	r28
    4ed4:	1f 91       	pop	r17
    4ed6:	0f 91       	pop	r16
    4ed8:	ff 90       	pop	r15
    4eda:	ef 90       	pop	r14
    4edc:	df 90       	pop	r13
    4ede:	cf 90       	pop	r12
    4ee0:	08 95       	ret

00004ee2 <_ZN4File4OpenEPKc>:
}
#endif

void Console(const char* s);

byte File::Open(const char* path)
    4ee2:	cf 93       	push	r28
    4ee4:	df 93       	push	r29
    4ee6:	ec 01       	movw	r28, r24
    4ee8:	cb 01       	movw	r24, r22
    Load(0);
    _fileLength = GetFileSize( _h, NULL );

    return _h == INVALID_HANDLE_VALUE ? 0 : 1;
#else
    if (microfat2::locateFileStart(path,_origin,_fileLength,_buffer))
    4eea:	be 01       	movw	r22, r28
    4eec:	68 5f       	subi	r22, 0xF8	; 248
    4eee:	7d 4f       	sbci	r23, 0xFD	; 253
    4ef0:	ae 01       	movw	r20, r28
    4ef2:	44 5f       	subi	r20, 0xF4	; 244
    4ef4:	5d 4f       	sbci	r21, 0xFD	; 253
    4ef6:	9e 01       	movw	r18, r28
    4ef8:	0e 94 72 22 	call	0x44e4	; 0x44e4 <_ZN9microfat215locateFileStartEPKcRmS2_Ph>
    4efc:	88 23       	and	r24, r24
    4efe:	41 f0       	breq	.+16     	; 0x4f10 <_ZN4File4OpenEPKc+0x2e>
    {
        Load(0);    // load 0?
    4f00:	ce 01       	movw	r24, r28
    4f02:	40 e0       	ldi	r20, 0x00	; 0
    4f04:	50 e0       	ldi	r21, 0x00	; 0
    4f06:	60 e0       	ldi	r22, 0x00	; 0
    4f08:	70 e0       	ldi	r23, 0x00	; 0
    4f0a:	0e 94 82 26 	call	0x4d04	; 0x4d04 <_ZN4File4LoadEl>
    4f0e:	81 e0       	ldi	r24, 0x01	; 1
        print(s);
        Console(s);
    #endif
    return 0;
#endif
}
    4f10:	df 91       	pop	r29
    4f12:	cf 91       	pop	r28
    4f14:	08 95       	ret

00004f16 <_ZN6Tunnel10RenderLineEPKhih>:
    {
        byte line = depth >> 4;                         // block:line:pixel 5:3:4
        return _level[line >> 3] + (line & 0x7)*8;      // Get line 0..7 of tile indexes from depth
    }
    
    void RenderLine(const byte* ad, int bottom, byte y)
    4f16:	2f 92       	push	r2
    4f18:	3f 92       	push	r3
    4f1a:	4f 92       	push	r4
    4f1c:	5f 92       	push	r5
    4f1e:	6f 92       	push	r6
    4f20:	7f 92       	push	r7
    4f22:	8f 92       	push	r8
    4f24:	9f 92       	push	r9
    4f26:	af 92       	push	r10
    4f28:	bf 92       	push	r11
    4f2a:	cf 92       	push	r12
    4f2c:	df 92       	push	r13
    4f2e:	ef 92       	push	r14
    4f30:	ff 92       	push	r15
    4f32:	0f 93       	push	r16
    4f34:	1f 93       	push	r17
    4f36:	df 93       	push	r29
    4f38:	cf 93       	push	r28
    4f3a:	cd b7       	in	r28, 0x3d	; 61
    4f3c:	de b7       	in	r29, 0x3e	; 62
    4f3e:	c2 56       	subi	r28, 0x62	; 98
    4f40:	d0 40       	sbci	r29, 0x00	; 0
    4f42:	0f b6       	in	r0, 0x3f	; 63
    4f44:	f8 94       	cli
    4f46:	de bf       	out	0x3e, r29	; 62
    4f48:	0f be       	out	0x3f, r0	; 63
    4f4a:	cd bf       	out	0x3d, r28	; 61
    4f4c:	7c 01       	movw	r14, r24
    4f4e:	8b 01       	movw	r16, r22
    4f50:	1a 01       	movw	r2, r20
    4f52:	a2 96       	adiw	r28, 0x22	; 34
    4f54:	2f af       	std	Y+63, r18	; 0x3f
    4f56:	a2 97       	sbiw	r28, 0x22	; 34
    {
        int angleOffset = _angleOffset;
    4f58:	fc 01       	movw	r30, r24
    4f5a:	80 80       	ld	r8, Z
    4f5c:	91 80       	ldd	r9, Z+1	; 0x01
        int depthOffset = _depthOffset;
    4f5e:	42 80       	ldd	r4, Z+2	; 0x02
    4f60:	53 80       	ldd	r5, Z+3	; 0x03
    4f62:	dd 24       	eor	r13, r13
        while (x0<x1)
        {
            int angle0 = pgm_read_byte(ad++);
            if (bottom)
                angle0 = -angle0;
            int angle1 = 512-angle0;
    4f64:	61 2c       	mov	r6, r1
    4f66:	42 e0       	ldi	r20, 0x02	; 2
    4f68:	74 2e       	mov	r7, r20
    4f6a:	68 0c       	add	r6, r8
    4f6c:	79 1c       	adc	r7, r9
                if (t0 != 0)
                    p0 = pgm_read_byte(&Cell16x16[t0*256 - 256 + y*16 + (x0 & 0xF)]);
                if (t1 != 0)
                    p1 = pgm_read_byte(&Cell16x16[t1*256 - 256 + y*16 + (x1 & 0xF)]);
            }
            buffer[x0++] = p0;
    4f6e:	5e 01       	movw	r10, r28
    4f70:	08 94       	sec
    4f72:	a1 1c       	adc	r10, r1
    4f74:	b1 1c       	adc	r11, r1
        byte buffer[SCREEN_WIDTH];     // horizontal buffer (could b vertical to save mem)
        byte x0 = 0;
        byte x1 = SCREEN_WIDTH;      // Write from both sides
        while (x0<x1)
        {
            int angle0 = pgm_read_byte(ad++);
    4f76:	f8 01       	movw	r30, r16
    4f78:	84 91       	lpm	r24, Z+
    4f7a:	68 2f       	mov	r22, r24
    4f7c:	70 e0       	ldi	r23, 0x00	; 0
            if (bottom)
    4f7e:	21 14       	cp	r2, r1
    4f80:	31 04       	cpc	r3, r1
    4f82:	19 f0       	breq	.+6      	; 0x4f8a <_ZN6Tunnel10RenderLineEPKhih+0x74>
                angle0 = -angle0;
    4f84:	70 95       	com	r23
    4f86:	61 95       	neg	r22
    4f88:	7f 4f       	sbci	r23, 0xFF	; 255
            int angle1 = 512-angle0;

            int depth = pgm_read_byte(ad++);
    4f8a:	0f 5f       	subi	r16, 0xFF	; 255
    4f8c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f8e:	f8 01       	movw	r30, r16
    4f90:	84 91       	lpm	r24, Z+
    4f92:	01 50       	subi	r16, 0x01	; 1
    4f94:	10 40       	sbci	r17, 0x00	; 0
    4f96:	48 2f       	mov	r20, r24
    4f98:	50 e0       	ldi	r21, 0x00	; 0
            byte p0,p1;
            p0=p1=0;
            if (depth > 200)
    4f9a:	49 3c       	cpi	r20, 0xC9	; 201
    4f9c:	51 05       	cpc	r21, r1
    4f9e:	1c f0       	brlt	.+6      	; 0x4fa6 <_ZN6Tunnel10RenderLineEPKhih+0x90>
    4fa0:	80 e0       	ldi	r24, 0x00	; 0
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	88 c0       	rjmp	.+272    	; 0x50b6 <_ZN6Tunnel10RenderLineEPKhih+0x1a0>
            else
            {
                // Make this faster
                angle0 += angleOffset;
                angle1 += angleOffset;
                depth += depthOffset;   // roll into texture calc?
    4fa6:	44 0d       	add	r20, r4
    4fa8:	55 1d       	adc	r21, r5
    }
    
    inline const byte* GetLine(int depth)
    {
        byte line = depth >> 4;                         // block:line:pixel 5:3:4
        return _level[line >> 3] + (line & 0x7)*8;      // Get line 0..7 of tile indexes from depth
    4faa:	ca 01       	movw	r24, r20
    4fac:	34 e0       	ldi	r19, 0x04	; 4
    4fae:	95 95       	asr	r25
    4fb0:	87 95       	ror	r24
    4fb2:	3a 95       	dec	r19
    4fb4:	e1 f7       	brne	.-8      	; 0x4fae <_ZN6Tunnel10RenderLineEPKhih+0x98>
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	fc 01       	movw	r30, r24
    4fba:	23 e0       	ldi	r18, 0x03	; 3
    4fbc:	f5 95       	asr	r31
    4fbe:	e7 95       	ror	r30
    4fc0:	2a 95       	dec	r18
    4fc2:	e1 f7       	brne	.-8      	; 0x4fbc <_ZN6Tunnel10RenderLineEPKhih+0xa6>
    4fc4:	32 96       	adiw	r30, 0x02	; 2
    4fc6:	ee 0f       	add	r30, r30
    4fc8:	ff 1f       	adc	r31, r31
    4fca:	ee 0d       	add	r30, r14
    4fcc:	ff 1d       	adc	r31, r15
    4fce:	87 70       	andi	r24, 0x07	; 7
    4fd0:	90 70       	andi	r25, 0x00	; 0
    4fd2:	a3 e0       	ldi	r26, 0x03	; 3
    4fd4:	88 0f       	add	r24, r24
    4fd6:	99 1f       	adc	r25, r25
    4fd8:	aa 95       	dec	r26
    4fda:	e1 f7       	brne	.-8      	; 0x4fd4 <_ZN6Tunnel10RenderLineEPKhih+0xbe>
    4fdc:	20 81       	ld	r18, Z
    4fde:	31 81       	ldd	r19, Z+1	; 0x01
    4fe0:	28 0f       	add	r18, r24
    4fe2:	39 1f       	adc	r19, r25
                                
                //  Tiles are 16x16
                const byte* line = GetLine(depth);  // Get the line to display at this depth            
                byte x0 = angle0 >> 3;
                byte x1 = angle1 >> 3;
                byte y = depth & 0xF;   // pixel y
    4fe4:	5f e0       	ldi	r21, 0x0F	; 15
    4fe6:	c5 2e       	mov	r12, r21
    4fe8:	c4 22       	and	r12, r20
                
                byte t0 = pgm_read_byte(&line[(x0 >> 4) & 0x7]);    // tile indexes
    4fea:	cb 01       	movw	r24, r22
    4fec:	88 0d       	add	r24, r8
    4fee:	99 1d       	adc	r25, r9
    4ff0:	43 e0       	ldi	r20, 0x03	; 3
    4ff2:	95 95       	asr	r25
    4ff4:	87 95       	ror	r24
    4ff6:	4a 95       	dec	r20
    4ff8:	e1 f7       	brne	.-8      	; 0x4ff2 <_ZN6Tunnel10RenderLineEPKhih+0xdc>
    4ffa:	a8 2f       	mov	r26, r24
    4ffc:	b0 e0       	ldi	r27, 0x00	; 0
    4ffe:	fd 01       	movw	r30, r26
    5000:	84 e0       	ldi	r24, 0x04	; 4
    5002:	f5 95       	asr	r31
    5004:	e7 95       	ror	r30
    5006:	8a 95       	dec	r24
    5008:	e1 f7       	brne	.-8      	; 0x5002 <_ZN6Tunnel10RenderLineEPKhih+0xec>
    500a:	e7 70       	andi	r30, 0x07	; 7
    500c:	f0 70       	andi	r31, 0x00	; 0
    500e:	e2 0f       	add	r30, r18
    5010:	f3 1f       	adc	r31, r19
    5012:	84 91       	lpm	r24, Z+
    5014:	a3 96       	adiw	r28, 0x23	; 35
    5016:	8f af       	std	Y+63, r24	; 0x3f
    5018:	a3 97       	sbiw	r28, 0x23	; 35
                byte t1 = pgm_read_byte(&line[(x1 >> 4) & 0x7]);    // lines are 8 tiles wide
    501a:	c3 01       	movw	r24, r6
    501c:	86 1b       	sub	r24, r22
    501e:	97 0b       	sbc	r25, r23
    5020:	e3 e0       	ldi	r30, 0x03	; 3
    5022:	95 95       	asr	r25
    5024:	87 95       	ror	r24
    5026:	ea 95       	dec	r30
    5028:	e1 f7       	brne	.-8      	; 0x5022 <_ZN6Tunnel10RenderLineEPKhih+0x10c>
    502a:	48 2f       	mov	r20, r24
    502c:	50 e0       	ldi	r21, 0x00	; 0
    502e:	ca 01       	movw	r24, r20
    5030:	74 e0       	ldi	r23, 0x04	; 4
    5032:	95 95       	asr	r25
    5034:	87 95       	ror	r24
    5036:	7a 95       	dec	r23
    5038:	e1 f7       	brne	.-8      	; 0x5032 <_ZN6Tunnel10RenderLineEPKhih+0x11c>
    503a:	87 70       	andi	r24, 0x07	; 7
    503c:	90 70       	andi	r25, 0x00	; 0
    503e:	28 0f       	add	r18, r24
    5040:	39 1f       	adc	r19, r25
    5042:	f9 01       	movw	r30, r18
    5044:	94 91       	lpm	r25, Z+
                                
                if (t0 != 0)
    5046:	a3 96       	adiw	r28, 0x23	; 35
    5048:	ff ad       	ldd	r31, Y+63	; 0x3f
    504a:	a3 97       	sbiw	r28, 0x23	; 35
    504c:	ff 23       	and	r31, r31
    504e:	11 f4       	brne	.+4      	; 0x5054 <_ZN6Tunnel10RenderLineEPKhih+0x13e>
    5050:	80 e0       	ldi	r24, 0x00	; 0
    5052:	19 c0       	rjmp	.+50     	; 0x5086 <_ZN6Tunnel10RenderLineEPKhih+0x170>
                    p0 = pgm_read_byte(&Cell16x16[t0*256 - 256 + y*16 + (x0 & 0xF)]);
    5054:	a3 96       	adiw	r28, 0x23	; 35
    5056:	8f ad       	ldd	r24, Y+63	; 0x3f
    5058:	a3 97       	sbiw	r28, 0x23	; 35
    505a:	e8 2f       	mov	r30, r24
    505c:	f0 e0       	ldi	r31, 0x00	; 0
    505e:	31 97       	sbiw	r30, 0x01	; 1
    5060:	64 e0       	ldi	r22, 0x04	; 4
    5062:	ee 0f       	add	r30, r30
    5064:	ff 1f       	adc	r31, r31
    5066:	6a 95       	dec	r22
    5068:	e1 f7       	brne	.-8      	; 0x5062 <_ZN6Tunnel10RenderLineEPKhih+0x14c>
    506a:	ec 0d       	add	r30, r12
    506c:	f1 1d       	adc	r31, r1
    506e:	34 e0       	ldi	r19, 0x04	; 4
    5070:	ee 0f       	add	r30, r30
    5072:	ff 1f       	adc	r31, r31
    5074:	3a 95       	dec	r19
    5076:	e1 f7       	brne	.-8      	; 0x5070 <_ZN6Tunnel10RenderLineEPKhih+0x15a>
    5078:	af 70       	andi	r26, 0x0F	; 15
    507a:	b0 70       	andi	r27, 0x00	; 0
    507c:	ea 0f       	add	r30, r26
    507e:	fb 1f       	adc	r31, r27
    5080:	e3 52       	subi	r30, 0x23	; 35
    5082:	f1 4f       	sbci	r31, 0xF1	; 241
    5084:	84 91       	lpm	r24, Z+
                if (t1 != 0)
    5086:	99 23       	and	r25, r25
    5088:	b1 f0       	breq	.+44     	; 0x50b6 <_ZN6Tunnel10RenderLineEPKhih+0x1a0>
                    p1 = pgm_read_byte(&Cell16x16[t1*256 - 256 + y*16 + (x1 & 0xF)]);
    508a:	e9 2f       	mov	r30, r25
    508c:	f0 e0       	ldi	r31, 0x00	; 0
    508e:	31 97       	sbiw	r30, 0x01	; 1
    5090:	24 e0       	ldi	r18, 0x04	; 4
    5092:	ee 0f       	add	r30, r30
    5094:	ff 1f       	adc	r31, r31
    5096:	2a 95       	dec	r18
    5098:	e1 f7       	brne	.-8      	; 0x5092 <_ZN6Tunnel10RenderLineEPKhih+0x17c>
    509a:	ec 0d       	add	r30, r12
    509c:	f1 1d       	adc	r31, r1
    509e:	94 e0       	ldi	r25, 0x04	; 4
    50a0:	ee 0f       	add	r30, r30
    50a2:	ff 1f       	adc	r31, r31
    50a4:	9a 95       	dec	r25
    50a6:	e1 f7       	brne	.-8      	; 0x50a0 <_ZN6Tunnel10RenderLineEPKhih+0x18a>
    50a8:	4f 70       	andi	r20, 0x0F	; 15
    50aa:	50 70       	andi	r21, 0x00	; 0
    50ac:	e4 0f       	add	r30, r20
    50ae:	f5 1f       	adc	r31, r21
    50b0:	e3 52       	subi	r30, 0x23	; 35
    50b2:	f1 4f       	sbci	r31, 0xF1	; 241
    50b4:	94 91       	lpm	r25, Z+
            }
            buffer[x0++] = p0;
    50b6:	f5 01       	movw	r30, r10
    50b8:	ed 0d       	add	r30, r13
    50ba:	f1 1d       	adc	r31, r1
    50bc:	80 83       	st	Z, r24
    50be:	d3 94       	inc	r13
            buffer[--x1] = p1;
    50c0:	80 e6       	ldi	r24, 0x60	; 96
    50c2:	8d 19       	sub	r24, r13
    50c4:	f5 01       	movw	r30, r10
    50c6:	e8 0f       	add	r30, r24
    50c8:	f1 1d       	adc	r31, r1
    50ca:	90 83       	st	Z, r25
        int depthOffset = _depthOffset;
               
        byte buffer[SCREEN_WIDTH];     // horizontal buffer (could b vertical to save mem)
        byte x0 = 0;
        byte x1 = SCREEN_WIDTH;      // Write from both sides
        while (x0<x1)
    50cc:	e0 e3       	ldi	r30, 0x30	; 48
    50ce:	de 16       	cp	r13, r30
    50d0:	19 f0       	breq	.+6      	; 0x50d8 <_ZN6Tunnel10RenderLineEPKhih+0x1c2>
    50d2:	0e 5f       	subi	r16, 0xFE	; 254
    50d4:	1f 4f       	sbci	r17, 0xFF	; 255
    50d6:	4f cf       	rjmp	.-354    	; 0x4f76 <_ZN6Tunnel10RenderLineEPKhih+0x60>
                    p1 = pgm_read_byte(&Cell16x16[t1*256 - 256 + y*16 + (x1 & 0xF)]);
            }
            buffer[x0++] = p0;
            buffer[--x1] = p1;
        }
        OLED_Row(y,buffer,(byte*)_pal);
    50d8:	a2 96       	adiw	r28, 0x22	; 34
    50da:	8f ad       	ldd	r24, Y+63	; 0x3f
    50dc:	a2 97       	sbiw	r28, 0x22	; 34
    50de:	b5 01       	movw	r22, r10
    50e0:	4d ed       	ldi	r20, 0xDD	; 221
    50e2:	5c e0       	ldi	r21, 0x0C	; 12
    50e4:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <_Z8OLED_RowhPhS_>
    }
    50e8:	ce 59       	subi	r28, 0x9E	; 158
    50ea:	df 4f       	sbci	r29, 0xFF	; 255
    50ec:	0f b6       	in	r0, 0x3f	; 63
    50ee:	f8 94       	cli
    50f0:	de bf       	out	0x3e, r29	; 62
    50f2:	0f be       	out	0x3f, r0	; 63
    50f4:	cd bf       	out	0x3d, r28	; 61
    50f6:	cf 91       	pop	r28
    50f8:	df 91       	pop	r29
    50fa:	1f 91       	pop	r17
    50fc:	0f 91       	pop	r16
    50fe:	ff 90       	pop	r15
    5100:	ef 90       	pop	r14
    5102:	df 90       	pop	r13
    5104:	cf 90       	pop	r12
    5106:	bf 90       	pop	r11
    5108:	af 90       	pop	r10
    510a:	9f 90       	pop	r9
    510c:	8f 90       	pop	r8
    510e:	7f 90       	pop	r7
    5110:	6f 90       	pop	r6
    5112:	5f 90       	pop	r5
    5114:	4f 90       	pop	r4
    5116:	3f 90       	pop	r3
    5118:	2f 90       	pop	r2
    511a:	08 95       	ret

0000511c <_Z11TunnelEventR8KeyEvent>:
         return 0;
    }
};

Tunnel _tunnelInstance;
short TunnelEvent(KeyEvent& e)
    511c:	0f 93       	push	r16
    511e:	1f 93       	push	r17
    5120:	cf 93       	push	r28
    5122:	df 93       	push	r29
    5124:	fc 01       	movw	r30, r24
{
    if (e.msg == 0)
    5126:	83 81       	ldd	r24, Z+3	; 0x03
    5128:	88 23       	and	r24, r24
    512a:	21 f5       	brne	.+72     	; 0x5174 <_Z11TunnelEventR8KeyEvent+0x58>
    char _angleDelta;
    
    public:
    short Init()
    {
        _depthOffset = 0;
    512c:	10 92 f6 01 	sts	0x01F6, r1
    5130:	10 92 f5 01 	sts	0x01F5, r1
        _angleOffset = 0;
    5134:	10 92 f4 01 	sts	0x01F4, r1
    5138:	10 92 f3 01 	sts	0x01F3, r1
        _angleDelta = _depthDelta = 0;
    513c:	10 92 37 02 	sts	0x0237, r1
    5140:	10 92 38 02 	sts	0x0238, r1
    5144:	e7 ef       	ldi	r30, 0xF7	; 247
    5146:	f1 e0       	ldi	r31, 0x01	; 1
        
        for (byte i = 0; i < 32; i += 4)
        {
            _level[i] = _pattern1;
    5148:	6d ed       	ldi	r22, 0xDD	; 221
    514a:	76 e1       	ldi	r23, 0x16	; 22
            _level[i+1] = _pattern2;
    514c:	4d e1       	ldi	r20, 0x1D	; 29
    514e:	57 e1       	ldi	r21, 0x17	; 23
            _level[i+2] = _pattern3;
    5150:	2d e5       	ldi	r18, 0x5D	; 93
    5152:	37 e1       	ldi	r19, 0x17	; 23
            _level[i+3] = _pattern4;
    5154:	8d e9       	ldi	r24, 0x9D	; 157
    5156:	97 e1       	ldi	r25, 0x17	; 23
        _angleOffset = 0;
        _angleDelta = _depthDelta = 0;
        
        for (byte i = 0; i < 32; i += 4)
        {
            _level[i] = _pattern1;
    5158:	71 83       	std	Z+1, r23	; 0x01
    515a:	60 83       	st	Z, r22
            _level[i+1] = _pattern2;
    515c:	53 83       	std	Z+3, r21	; 0x03
    515e:	42 83       	std	Z+2, r20	; 0x02
            _level[i+2] = _pattern3;
    5160:	35 83       	std	Z+5, r19	; 0x05
    5162:	24 83       	std	Z+4, r18	; 0x04
            _level[i+3] = _pattern4;
    5164:	97 83       	std	Z+7, r25	; 0x07
    5166:	86 83       	std	Z+6, r24	; 0x06
    5168:	38 96       	adiw	r30, 0x08	; 8
    {
        _depthOffset = 0;
        _angleOffset = 0;
        _angleDelta = _depthDelta = 0;
        
        for (byte i = 0; i < 32; i += 4)
    516a:	a2 e0       	ldi	r26, 0x02	; 2
    516c:	e7 33       	cpi	r30, 0x37	; 55
    516e:	fa 07       	cpc	r31, r26
    5170:	99 f7       	brne	.-26     	; 0x5158 <_Z11TunnelEventR8KeyEvent+0x3c>
    5172:	7c c0       	rjmp	.+248    	; 0x526c <_Z11TunnelEventR8KeyEvent+0x150>
        OLED_Row(y,buffer,(byte*)_pal);
    }
    
    short Loop(KeyEvent& e)
    {
        if (e.upEvent & 0x10)
    5174:	82 81       	ldd	r24, Z+2	; 0x02
    5176:	84 ff       	sbrs	r24, 4
    5178:	03 c0       	rjmp	.+6      	; 0x5180 <_Z11TunnelEventR8KeyEvent+0x64>
    517a:	2f ef       	ldi	r18, 0xFF	; 255
    517c:	3f ef       	ldi	r19, 0xFF	; 255
    517e:	78 c0       	rjmp	.+240    	; 0x5270 <_Z11TunnelEventR8KeyEvent+0x154>
        return 0;
    }
    
    void move(KeyEvent& e)
    {        
        if (e.keys & 0x40)
    5180:	80 81       	ld	r24, Z
    5182:	86 ff       	sbrs	r24, 6
    5184:	0b c0       	rjmp	.+22     	; 0x519c <_Z11TunnelEventR8KeyEvent+0x80>
        {
            if (_angleDelta < 0)
    5186:	80 91 38 02 	lds	r24, 0x0238
    518a:	87 ff       	sbrs	r24, 7
    518c:	02 c0       	rjmp	.+4      	; 0x5192 <_Z11TunnelEventR8KeyEvent+0x76>
            _angleDelta = 0;
    518e:	10 92 38 02 	sts	0x0238, r1
            if (_angleDelta < 16)
    5192:	80 91 38 02 	lds	r24, 0x0238
    5196:	80 31       	cpi	r24, 0x10	; 16
    5198:	cc f4       	brge	.+50     	; 0x51cc <_Z11TunnelEventR8KeyEvent+0xb0>
    519a:	15 c0       	rjmp	.+42     	; 0x51c6 <_Z11TunnelEventR8KeyEvent+0xaa>
                _angleDelta++;
        }
        else if (e.keys & 0x80)
    519c:	87 ff       	sbrs	r24, 7
    519e:	0b c0       	rjmp	.+22     	; 0x51b6 <_Z11TunnelEventR8KeyEvent+0x9a>
        {
            if (_angleDelta > 0)
    51a0:	80 91 38 02 	lds	r24, 0x0238
    51a4:	18 16       	cp	r1, r24
    51a6:	14 f4       	brge	.+4      	; 0x51ac <_Z11TunnelEventR8KeyEvent+0x90>
            _angleDelta = 0;
    51a8:	10 92 38 02 	sts	0x0238, r1
            if (_angleDelta > -16)
    51ac:	80 91 38 02 	lds	r24, 0x0238
    51b0:	81 3f       	cpi	r24, 0xF1	; 241
    51b2:	64 f0       	brlt	.+24     	; 0x51cc <_Z11TunnelEventR8KeyEvent+0xb0>
    51b4:	04 c0       	rjmp	.+8      	; 0x51be <_Z11TunnelEventR8KeyEvent+0xa2>
                _angleDelta--;
        }
        else if (_angleDelta > 0)
    51b6:	80 91 38 02 	lds	r24, 0x0238
    51ba:	18 16       	cp	r1, r24
    51bc:	14 f4       	brge	.+4      	; 0x51c2 <_Z11TunnelEventR8KeyEvent+0xa6>
        {
            _angleDelta--;
    51be:	81 50       	subi	r24, 0x01	; 1
    51c0:	03 c0       	rjmp	.+6      	; 0x51c8 <_Z11TunnelEventR8KeyEvent+0xac>
        }
        else if (_angleDelta < 0)
    51c2:	88 23       	and	r24, r24
    51c4:	19 f0       	breq	.+6      	; 0x51cc <_Z11TunnelEventR8KeyEvent+0xb0>
        {
            _angleDelta++;
    51c6:	8f 5f       	subi	r24, 0xFF	; 255
    51c8:	80 93 38 02 	sts	0x0238, r24
        }
        
        if (e.keys & 0x20)
    51cc:	80 81       	ld	r24, Z
    51ce:	85 ff       	sbrs	r24, 5
    51d0:	06 c0       	rjmp	.+12     	; 0x51de <_Z11TunnelEventR8KeyEvent+0xc2>
        {
            if (_depthDelta < 8)
    51d2:	80 91 37 02 	lds	r24, 0x0237
    51d6:	88 30       	cpi	r24, 0x08	; 8
    51d8:	48 f4       	brcc	.+18     	; 0x51ec <_Z11TunnelEventR8KeyEvent+0xd0>
                _depthDelta++;
    51da:	8f 5f       	subi	r24, 0xFF	; 255
    51dc:	05 c0       	rjmp	.+10     	; 0x51e8 <_Z11TunnelEventR8KeyEvent+0xcc>
        }
        else if (_depthDelta > 0)
    51de:	80 91 37 02 	lds	r24, 0x0237
    51e2:	88 23       	and	r24, r24
    51e4:	19 f0       	breq	.+6      	; 0x51ec <_Z11TunnelEventR8KeyEvent+0xd0>
        {
            _depthDelta--;
    51e6:	81 50       	subi	r24, 0x01	; 1
    51e8:	80 93 37 02 	sts	0x0237, r24
        }
                 
        _angleOffset += _angleDelta;
    51ec:	80 91 38 02 	lds	r24, 0x0238
    51f0:	99 27       	eor	r25, r25
    51f2:	87 fd       	sbrc	r24, 7
    51f4:	90 95       	com	r25
    51f6:	20 91 f3 01 	lds	r18, 0x01F3
    51fa:	30 91 f4 01 	lds	r19, 0x01F4
    51fe:	82 0f       	add	r24, r18
    5200:	93 1f       	adc	r25, r19
    5202:	90 93 f4 01 	sts	0x01F4, r25
    5206:	80 93 f3 01 	sts	0x01F3, r24
        _depthOffset += _depthDelta+1;
    520a:	80 91 f5 01 	lds	r24, 0x01F5
    520e:	90 91 f6 01 	lds	r25, 0x01F6
    5212:	01 96       	adiw	r24, 0x01	; 1
    5214:	20 91 37 02 	lds	r18, 0x0237
    5218:	82 0f       	add	r24, r18
    521a:	91 1d       	adc	r25, r1
    521c:	90 93 f6 01 	sts	0x01F6, r25
    5220:	80 93 f5 01 	sts	0x01F5, r24
    5224:	20 e0       	ldi	r18, 0x00	; 0
    5226:	cd ed       	ldi	r28, 0xDD	; 221
    5228:	d0 e0       	ldi	r29, 0x00	; 0
                    
         byte y=0;
         const byte* ad = _tunnel;      // angle/depth data        
         while (y < SCREEN_HEIGHT/2)
         {
            RenderLine(ad,0,y++);
    522a:	12 2f       	mov	r17, r18
    522c:	1f 5f       	subi	r17, 0xFF	; 255
    522e:	83 ef       	ldi	r24, 0xF3	; 243
    5230:	91 e0       	ldi	r25, 0x01	; 1
    5232:	be 01       	movw	r22, r28
    5234:	40 e0       	ldi	r20, 0x00	; 0
    5236:	50 e0       	ldi	r21, 0x00	; 0
    5238:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <_ZN6Tunnel10RenderLineEPKhih>
            ad += SCREEN_WIDTH;
    523c:	c0 5a       	subi	r28, 0xA0	; 160
    523e:	df 4f       	sbci	r29, 0xFF	; 255
            return -1;
        move(e);
                    
         byte y=0;
         const byte* ad = _tunnel;      // angle/depth data        
         while (y < SCREEN_HEIGHT/2)
    5240:	10 32       	cpi	r17, 0x20	; 32
    5242:	11 f0       	breq	.+4      	; 0x5248 <_Z11TunnelEventR8KeyEvent+0x12c>
    5244:	21 2f       	mov	r18, r17
    5246:	f1 cf       	rjmp	.-30     	; 0x522a <_Z11TunnelEventR8KeyEvent+0x10e>
    5248:	cd ed       	ldi	r28, 0xDD	; 221
    524a:	dc e0       	ldi	r29, 0x0C	; 12
            RenderLine(ad,0,y++);
            ad += SCREEN_WIDTH;
         }
         while (y < SCREEN_HEIGHT)
         {
            ad -= SCREEN_WIDTH;
    524c:	c0 56       	subi	r28, 0x60	; 96
    524e:	d0 40       	sbci	r29, 0x00	; 0
            RenderLine(ad,1,y++);
    5250:	01 2f       	mov	r16, r17
    5252:	0f 5f       	subi	r16, 0xFF	; 255
    5254:	83 ef       	ldi	r24, 0xF3	; 243
    5256:	91 e0       	ldi	r25, 0x01	; 1
    5258:	be 01       	movw	r22, r28
    525a:	41 e0       	ldi	r20, 0x01	; 1
    525c:	50 e0       	ldi	r21, 0x00	; 0
    525e:	21 2f       	mov	r18, r17
    5260:	0e 94 8b 27 	call	0x4f16	; 0x4f16 <_ZN6Tunnel10RenderLineEPKhih>
         while (y < SCREEN_HEIGHT/2)
         {
            RenderLine(ad,0,y++);
            ad += SCREEN_WIDTH;
         }
         while (y < SCREEN_HEIGHT)
    5264:	00 34       	cpi	r16, 0x40	; 64
    5266:	11 f0       	breq	.+4      	; 0x526c <_Z11TunnelEventR8KeyEvent+0x150>
    5268:	10 2f       	mov	r17, r16
    526a:	f0 cf       	rjmp	.-32     	; 0x524c <_Z11TunnelEventR8KeyEvent+0x130>
    526c:	20 e0       	ldi	r18, 0x00	; 0
    526e:	30 e0       	ldi	r19, 0x00	; 0
short TunnelEvent(KeyEvent& e)
{
    if (e.msg == 0)
        return _tunnelInstance.Init();
    return _tunnelInstance.Loop(e);
}
    5270:	c9 01       	movw	r24, r18
    5272:	df 91       	pop	r29
    5274:	cf 91       	pop	r28
    5276:	1f 91       	pop	r17
    5278:	0f 91       	pop	r16
    527a:	08 95       	ret

0000527c <_Z3SINh>:
    212,215,219,222,225,228,231,233,
    236,238,240,242,244,246,247,249,
    250,251,252,253,254,254,255,255
};

short SIN(byte angle)
    527c:	48 2f       	mov	r20, r24
{
    if ((angle & 0x7F) == 0)
    527e:	28 2f       	mov	r18, r24
    5280:	30 e0       	ldi	r19, 0x00	; 0
    5282:	c9 01       	movw	r24, r18
    5284:	8f 77       	andi	r24, 0x7F	; 127
    5286:	90 70       	andi	r25, 0x00	; 0
    5288:	89 2b       	or	r24, r25
    528a:	19 f4       	brne	.+6      	; 0x5292 <_Z3SINh+0x16>
    528c:	e0 e0       	ldi	r30, 0x00	; 0
    528e:	f0 e0       	ldi	r31, 0x00	; 0
    5290:	12 c0       	rjmp	.+36     	; 0x52b6 <_Z3SINh+0x3a>
        return 0;
    byte b = angle & 0x3F;
    5292:	e4 2f       	mov	r30, r20
    5294:	ef 73       	andi	r30, 0x3F	; 63
    if (angle & 0x40)
    5296:	46 ff       	sbrs	r20, 6
    5298:	03 c0       	rjmp	.+6      	; 0x52a0 <_Z3SINh+0x24>
        b = 0x3F - b;
    529a:	8f e3       	ldi	r24, 0x3F	; 63
    529c:	8e 1b       	sub	r24, r30
    529e:	e8 2f       	mov	r30, r24
    short i = pgm_read_byte(_trig+b) + 1;
    52a0:	f0 e0       	ldi	r31, 0x00	; 0
    52a2:	e3 52       	subi	r30, 0x23	; 35
    52a4:	f4 4c       	sbci	r31, 0xC4	; 196
    52a6:	e4 91       	lpm	r30, Z+
    52a8:	f0 e0       	ldi	r31, 0x00	; 0
    52aa:	31 96       	adiw	r30, 0x01	; 1
    if (angle & 0x80)
    52ac:	47 ff       	sbrs	r20, 7
    52ae:	03 c0       	rjmp	.+6      	; 0x52b6 <_Z3SINh+0x3a>
        return -i;
    52b0:	f0 95       	com	r31
    52b2:	e1 95       	neg	r30
    52b4:	ff 4f       	sbci	r31, 0xFF	; 255
    return i;
}
    52b6:	cf 01       	movw	r24, r30
    52b8:	08 95       	ret

000052ba <_Z3COSh>:

short COS(byte angle)
{
    return SIN(angle + 64);
    52ba:	80 5c       	subi	r24, 0xC0	; 192
    52bc:	0e 94 3e 29 	call	0x527c	; 0x527c <_Z3SINh>
}
    52c0:	08 95       	ret

000052c2 <_Z5RECIPs>:

//  Range if uv is 0..2 in 16:16
//  Always positive
long RECIP(short uv)
{
    uv >>= 1;   // 0..1;
    52c2:	95 95       	asr	r25
    52c4:	87 95       	ror	r24
    if (uv < 4)
    52c6:	84 30       	cpi	r24, 0x04	; 4
    52c8:	91 05       	cpc	r25, r1
    52ca:	2c f4       	brge	.+10     	; 0x52d6 <_Z5RECIPs+0x14>
    52cc:	2f ef       	ldi	r18, 0xFF	; 255
    52ce:	3f ef       	ldi	r19, 0xFF	; 255
    52d0:	4f ef       	ldi	r20, 0xFF	; 255
    52d2:	5f e7       	ldi	r21, 0x7F	; 127
    52d4:	0f c0       	rjmp	.+30     	; 0x52f4 <_Z5RECIPs+0x32>
        return 0x7FFFFFFF;
    if (uv == 0x10000)      // 2 really
        return 0x8000;      // 1/2 = 0.5
    return 0x80000000/uv;   // Long divide to provide 16:16 result
    52d6:	9c 01       	movw	r18, r24
    52d8:	44 27       	eor	r20, r20
    52da:	37 fd       	sbrc	r19, 7
    52dc:	40 95       	com	r20
    52de:	54 2f       	mov	r21, r20
    52e0:	60 e0       	ldi	r22, 0x00	; 0
    52e2:	70 e0       	ldi	r23, 0x00	; 0
    52e4:	80 e0       	ldi	r24, 0x00	; 0
    52e6:	90 e8       	ldi	r25, 0x80	; 128
    52e8:	0e 94 63 2d 	call	0x5ac6	; 0x5ac6 <__udivmodsi4>
    52ec:	c9 01       	movw	r24, r18
    52ee:	da 01       	movw	r26, r20
    52f0:	9c 01       	movw	r18, r24
    52f2:	ad 01       	movw	r20, r26
}
    52f4:	b9 01       	movw	r22, r18
    52f6:	ca 01       	movw	r24, r20
    52f8:	08 95       	ret

000052fa <_ZN6Doomed6InWallEss>:
        _playerPosY = 0x400;
        return 0;
    }
    
    #define PLAYERWIDTH 0x20
    bool InWall(short dx, short dy)
    52fa:	fc 01       	movw	r30, r24
    {
        dx += _playerPosX;
    52fc:	80 81       	ld	r24, Z
    52fe:	91 81       	ldd	r25, Z+1	; 0x01
    5300:	68 0f       	add	r22, r24
    5302:	79 1f       	adc	r23, r25
        dy += _playerPosY;
    5304:	82 81       	ldd	r24, Z+2	; 0x02
    5306:	93 81       	ldd	r25, Z+3	; 0x03
    5308:	48 0f       	add	r20, r24
    530a:	59 1f       	adc	r21, r25
        byte x0 = (dx-PLAYERWIDTH)>>8;
    530c:	60 52       	subi	r22, 0x20	; 32
    530e:	70 40       	sbci	r23, 0x00	; 0
    5310:	87 2f       	mov	r24, r23
    5312:	99 27       	eor	r25, r25
    5314:	87 fd       	sbrc	r24, 7
    5316:	9a 95       	dec	r25
    5318:	38 2f       	mov	r19, r24
        byte y0 = (dy-PLAYERWIDTH)>>8;
    531a:	40 52       	subi	r20, 0x20	; 32
    531c:	50 40       	sbci	r21, 0x00	; 0
    531e:	85 2f       	mov	r24, r21
    5320:	99 27       	eor	r25, r25
    5322:	87 fd       	sbrc	r24, 7
    5324:	9a 95       	dec	r25
        byte x1 = (dx+PLAYERWIDTH)>>8;
    5326:	60 5c       	subi	r22, 0xC0	; 192
    5328:	7f 4f       	sbci	r23, 0xFF	; 255
    532a:	67 2f       	mov	r22, r23
    532c:	77 0f       	add	r23, r23
    532e:	77 0b       	sbc	r23, r23
        byte y1 = (dy+PLAYERWIDTH)>>8;
    5330:	40 5c       	subi	r20, 0xC0	; 192
    5332:	5f 4f       	sbci	r21, 0xFF	; 255
    5334:	45 2f       	mov	r20, r21
    5336:	55 0f       	add	r21, r21
    5338:	55 0b       	sbc	r21, r21
    533a:	12 c0       	rjmp	.+36     	; 0x5360 <_ZN6Doomed6InWallEss+0x66>
        while (x0 <= x1)
        {
            for (byte y = y0; y <= y1; y++)
                if (pgm_read_byte(&_map[y * 8 + x0]))
    533c:	e2 2f       	mov	r30, r18
    533e:	f0 e0       	ldi	r31, 0x00	; 0
    5340:	53 e0       	ldi	r21, 0x03	; 3
    5342:	ee 0f       	add	r30, r30
    5344:	ff 1f       	adc	r31, r31
    5346:	5a 95       	dec	r21
    5348:	e1 f7       	brne	.-8      	; 0x5342 <_ZN6Doomed6InWallEss+0x48>
    534a:	ea 0f       	add	r30, r26
    534c:	fb 1f       	adc	r31, r27
    534e:	e3 5e       	subi	r30, 0xE3	; 227
    5350:	f3 4c       	sbci	r31, 0xC3	; 195
    5352:	e4 91       	lpm	r30, Z+
    5354:	ee 23       	and	r30, r30
    5356:	61 f4       	brne	.+24     	; 0x5370 <_ZN6Doomed6InWallEss+0x76>
        byte y0 = (dy-PLAYERWIDTH)>>8;
        byte x1 = (dx+PLAYERWIDTH)>>8;
        byte y1 = (dy+PLAYERWIDTH)>>8;
        while (x0 <= x1)
        {
            for (byte y = y0; y <= y1; y++)
    5358:	2f 5f       	subi	r18, 0xFF	; 255
    535a:	42 17       	cp	r20, r18
    535c:	78 f7       	brcc	.-34     	; 0x533c <_ZN6Doomed6InWallEss+0x42>
                if (pgm_read_byte(&_map[y * 8 + x0]))
                    return true;
            x0++;
    535e:	3f 5f       	subi	r19, 0xFF	; 255
        dy += _playerPosY;
        byte x0 = (dx-PLAYERWIDTH)>>8;
        byte y0 = (dy-PLAYERWIDTH)>>8;
        byte x1 = (dx+PLAYERWIDTH)>>8;
        byte y1 = (dy+PLAYERWIDTH)>>8;
        while (x0 <= x1)
    5360:	63 17       	cp	r22, r19
    5362:	10 f4       	brcc	.+4      	; 0x5368 <_ZN6Doomed6InWallEss+0x6e>
    5364:	80 e0       	ldi	r24, 0x00	; 0
    5366:	08 95       	ret
    5368:	28 2f       	mov	r18, r24
        {
            for (byte y = y0; y <= y1; y++)
                if (pgm_read_byte(&_map[y * 8 + x0]))
    536a:	a3 2f       	mov	r26, r19
    536c:	b0 e0       	ldi	r27, 0x00	; 0
    536e:	f5 cf       	rjmp	.-22     	; 0x535a <_ZN6Doomed6InWallEss+0x60>
        dy += _playerPosY;
        byte x0 = (dx-PLAYERWIDTH)>>8;
        byte y0 = (dy-PLAYERWIDTH)>>8;
        byte x1 = (dx+PLAYERWIDTH)>>8;
        byte y1 = (dy+PLAYERWIDTH)>>8;
        while (x0 <= x1)
    5370:	81 e0       	ldi	r24, 0x01	; 1
                if (pgm_read_byte(&_map[y * 8 + x0]))
                    return true;
            x0++;
        }
        return false;
    }
    5372:	08 95       	ret

00005374 <_Z9DoomEventR8KeyEvent>:
    }
};


Doomed _doomedInstance;
short DoomEvent(KeyEvent& e)
    5374:	2f 92       	push	r2
    5376:	3f 92       	push	r3
    5378:	4f 92       	push	r4
    537a:	5f 92       	push	r5
    537c:	6f 92       	push	r6
    537e:	7f 92       	push	r7
    5380:	8f 92       	push	r8
    5382:	9f 92       	push	r9
    5384:	af 92       	push	r10
    5386:	bf 92       	push	r11
    5388:	cf 92       	push	r12
    538a:	df 92       	push	r13
    538c:	ef 92       	push	r14
    538e:	ff 92       	push	r15
    5390:	0f 93       	push	r16
    5392:	1f 93       	push	r17
    5394:	df 93       	push	r29
    5396:	cf 93       	push	r28
    5398:	cd b7       	in	r28, 0x3d	; 61
    539a:	de b7       	in	r29, 0x3e	; 62
    539c:	c9 55       	subi	r28, 0x59	; 89
    539e:	d0 40       	sbci	r29, 0x00	; 0
    53a0:	0f b6       	in	r0, 0x3f	; 63
    53a2:	f8 94       	cli
    53a4:	de bf       	out	0x3e, r29	; 62
    53a6:	0f be       	out	0x3f, r0	; 63
    53a8:	cd bf       	out	0x3d, r28	; 61
    53aa:	fc 01       	movw	r30, r24
{
    if (e.msg == 0)
    53ac:	83 81       	ldd	r24, Z+3	; 0x03
    53ae:	88 23       	and	r24, r24
    53b0:	b9 f4       	brne	.+46     	; 0x53e0 <_Z9DoomEventR8KeyEvent+0x6c>
    char _arate;
            
    public:
    short Init()
    {
        _angle16 = 0;
    53b2:	10 92 40 02 	sts	0x0240, r1
    53b6:	10 92 3f 02 	sts	0x023F, r1
        _angle = 0;
    53ba:	10 92 3d 02 	sts	0x023D, r1
        _rate = _arate = 0;
    53be:	10 92 41 02 	sts	0x0241, r1
    53c2:	10 92 3e 02 	sts	0x023E, r1
        _playerPosX = 0x380;
    53c6:	80 e8       	ldi	r24, 0x80	; 128
    53c8:	93 e0       	ldi	r25, 0x03	; 3
    53ca:	90 93 3a 02 	sts	0x023A, r25
    53ce:	80 93 39 02 	sts	0x0239, r24
        _playerPosY = 0x400;
    53d2:	80 e0       	ldi	r24, 0x00	; 0
    53d4:	94 e0       	ldi	r25, 0x04	; 4
    53d6:	90 93 3c 02 	sts	0x023C, r25
    53da:	80 93 3b 02 	sts	0x023B, r24
    53de:	1f c3       	rjmp	.+1598   	; 0x5a1e <_Z9DoomEventR8KeyEvent+0x6aa>
        return o*a/b;
    }
 
    short Loop(KeyEvent& e)
    {        
        if (e.upEvent & 0x10)
    53e0:	82 81       	ldd	r24, Z+2	; 0x02
    53e2:	84 ff       	sbrs	r24, 4
    53e4:	03 c0       	rjmp	.+6      	; 0x53ec <_Z9DoomEventR8KeyEvent+0x78>
    53e6:	2f ef       	ldi	r18, 0xFF	; 255
    53e8:	3f ef       	ldi	r19, 0xFF	; 255
    53ea:	1b c3       	rjmp	.+1590   	; 0x5a22 <_Z9DoomEventR8KeyEvent+0x6ae>
            return -1;
            
        move(e.keys);
    53ec:	80 81       	ld	r24, Z
    }

    // Add a little acceleration to movement
    void move(byte key)
    {
        if ((key & 0x40))   
    53ee:	48 2f       	mov	r20, r24
    53f0:	86 ff       	sbrs	r24, 6
    53f2:	0b c0       	rjmp	.+22     	; 0x540a <_Z9DoomEventR8KeyEvent+0x96>
        {
            if (_arate < 0)
    53f4:	80 91 41 02 	lds	r24, 0x0241
    53f8:	87 ff       	sbrs	r24, 7
    53fa:	02 c0       	rjmp	.+4      	; 0x5400 <_Z9DoomEventR8KeyEvent+0x8c>
                _arate = 0;
    53fc:	10 92 41 02 	sts	0x0241, r1
            if (_arate < 32)
    5400:	80 91 41 02 	lds	r24, 0x0241
    5404:	80 32       	cpi	r24, 0x20	; 32
    5406:	cc f4       	brge	.+50     	; 0x543a <_Z9DoomEventR8KeyEvent+0xc6>
    5408:	15 c0       	rjmp	.+42     	; 0x5434 <_Z9DoomEventR8KeyEvent+0xc0>
                _arate++;
        }
        else if ((key & 0x80))
    540a:	87 ff       	sbrs	r24, 7
    540c:	0b c0       	rjmp	.+22     	; 0x5424 <_Z9DoomEventR8KeyEvent+0xb0>
        {
            if (_arate > 0)
    540e:	80 91 41 02 	lds	r24, 0x0241
    5412:	18 16       	cp	r1, r24
    5414:	14 f4       	brge	.+4      	; 0x541a <_Z9DoomEventR8KeyEvent+0xa6>
                _arate = 0;
    5416:	10 92 41 02 	sts	0x0241, r1
            if (_arate > -32)
    541a:	80 91 41 02 	lds	r24, 0x0241
    541e:	81 3e       	cpi	r24, 0xE1	; 225
    5420:	64 f0       	brlt	.+24     	; 0x543a <_Z9DoomEventR8KeyEvent+0xc6>
    5422:	04 c0       	rjmp	.+8      	; 0x542c <_Z9DoomEventR8KeyEvent+0xb8>
                --_arate;
        }   
        else if (_arate > 0)
    5424:	80 91 41 02 	lds	r24, 0x0241
    5428:	18 16       	cp	r1, r24
    542a:	14 f4       	brge	.+4      	; 0x5430 <_Z9DoomEventR8KeyEvent+0xbc>
            _arate--;
    542c:	81 50       	subi	r24, 0x01	; 1
    542e:	03 c0       	rjmp	.+6      	; 0x5436 <_Z9DoomEventR8KeyEvent+0xc2>
        else if (_arate < 0)
    5430:	88 23       	and	r24, r24
    5432:	19 f0       	breq	.+6      	; 0x543a <_Z9DoomEventR8KeyEvent+0xc6>
            _arate++;
    5434:	8f 5f       	subi	r24, 0xFF	; 255
    5436:	80 93 41 02 	sts	0x0241, r24
        
        if (_arate)
    543a:	80 91 41 02 	lds	r24, 0x0241
    543e:	88 23       	and	r24, r24
    5440:	a1 f0       	breq	.+40     	; 0x546a <_Z9DoomEventR8KeyEvent+0xf6>
        {
            _angle16 += _arate;
    5442:	99 27       	eor	r25, r25
    5444:	87 fd       	sbrc	r24, 7
    5446:	90 95       	com	r25
    5448:	20 91 3f 02 	lds	r18, 0x023F
    544c:	30 91 40 02 	lds	r19, 0x0240
    5450:	82 0f       	add	r24, r18
    5452:	93 1f       	adc	r25, r19
    5454:	90 93 40 02 	sts	0x0240, r25
    5458:	80 93 3f 02 	sts	0x023F, r24
            _angle = _angle16 >> 4;
    545c:	b4 e0       	ldi	r27, 0x04	; 4
    545e:	96 95       	lsr	r25
    5460:	87 95       	ror	r24
    5462:	ba 95       	dec	r27
    5464:	e1 f7       	brne	.-8      	; 0x545e <_Z9DoomEventR8KeyEvent+0xea>
    5466:	80 93 3d 02 	sts	0x023D, r24
        }
            
        if ((key & 0x20))
    546a:	45 ff       	sbrs	r20, 5
    546c:	07 c0       	rjmp	.+14     	; 0x547c <_Z9DoomEventR8KeyEvent+0x108>
        {
            if (_rate < 32)
    546e:	80 91 3e 02 	lds	r24, 0x023E
    5472:	80 32       	cpi	r24, 0x20	; 32
    5474:	08 f0       	brcs	.+2      	; 0x5478 <_Z9DoomEventR8KeyEvent+0x104>
    5476:	6c c0       	rjmp	.+216    	; 0x5550 <_Z9DoomEventR8KeyEvent+0x1dc>
                _rate++;
    5478:	8f 5f       	subi	r24, 0xFF	; 255
    547a:	68 c0       	rjmp	.+208    	; 0x554c <_Z9DoomEventR8KeyEvent+0x1d8>
        } else if (_rate > 0)
    547c:	80 91 3e 02 	lds	r24, 0x023E
    5480:	88 23       	and	r24, r24
    5482:	09 f4       	brne	.+2      	; 0x5486 <_Z9DoomEventR8KeyEvent+0x112>
    5484:	65 c0       	rjmp	.+202    	; 0x5550 <_Z9DoomEventR8KeyEvent+0x1dc>
    5486:	61 c0       	rjmp	.+194    	; 0x554a <_Z9DoomEventR8KeyEvent+0x1d6>
            _rate--;
        
        //  Rather dumb wall avoidance
        while (_rate)
        {
            short dx = ((COS(_angle) >> 1)*_rate) >> 7;
    5488:	f0 90 3d 02 	lds	r15, 0x023D
    548c:	8f 2d       	mov	r24, r15
    548e:	0e 94 5d 29 	call	0x52ba	; 0x52ba <_Z3COSh>
    5492:	10 e0       	ldi	r17, 0x00	; 0
    5494:	95 95       	asr	r25
    5496:	87 95       	ror	r24
    5498:	08 9f       	mul	r16, r24
    549a:	60 01       	movw	r12, r0
    549c:	09 9f       	mul	r16, r25
    549e:	d0 0c       	add	r13, r0
    54a0:	18 9f       	mul	r17, r24
    54a2:	d0 0c       	add	r13, r0
    54a4:	11 24       	eor	r1, r1
    54a6:	cc 0c       	add	r12, r12
    54a8:	cd 2c       	mov	r12, r13
    54aa:	cc 1c       	adc	r12, r12
    54ac:	dd 08       	sbc	r13, r13
            short dy = ((SIN(_angle) >> 1)*_rate) >> 7;
    54ae:	8f 2d       	mov	r24, r15
    54b0:	0e 94 3e 29 	call	0x527c	; 0x527c <_Z3SINh>
    54b4:	95 95       	asr	r25
    54b6:	87 95       	ror	r24
    54b8:	80 9f       	mul	r24, r16
    54ba:	70 01       	movw	r14, r0
    54bc:	81 9f       	mul	r24, r17
    54be:	f0 0c       	add	r15, r0
    54c0:	90 9f       	mul	r25, r16
    54c2:	f0 0c       	add	r15, r0
    54c4:	11 24       	eor	r1, r1
    54c6:	ee 0c       	add	r14, r14
    54c8:	ef 2c       	mov	r14, r15
    54ca:	ee 1c       	adc	r14, r14
    54cc:	ff 08       	sbc	r15, r15
            if (InWall(dx,dy))
    54ce:	89 e3       	ldi	r24, 0x39	; 57
    54d0:	92 e0       	ldi	r25, 0x02	; 2
    54d2:	b6 01       	movw	r22, r12
    54d4:	a7 01       	movw	r20, r14
    54d6:	0e 94 7d 29 	call	0x52fa	; 0x52fa <_ZN6Doomed6InWallEss>
    54da:	88 23       	and	r24, r24
    54dc:	b9 f0       	breq	.+46     	; 0x550c <_Z9DoomEventR8KeyEvent+0x198>
            {
                if (!InWall(0,dy))
    54de:	89 e3       	ldi	r24, 0x39	; 57
    54e0:	92 e0       	ldi	r25, 0x02	; 2
    54e2:	60 e0       	ldi	r22, 0x00	; 0
    54e4:	70 e0       	ldi	r23, 0x00	; 0
    54e6:	a7 01       	movw	r20, r14
    54e8:	0e 94 7d 29 	call	0x52fa	; 0x52fa <_ZN6Doomed6InWallEss>
    54ec:	88 23       	and	r24, r24
    54ee:	19 f4       	brne	.+6      	; 0x54f6 <_Z9DoomEventR8KeyEvent+0x182>
    54f0:	cc 24       	eor	r12, r12
    54f2:	dd 24       	eor	r13, r13
    54f4:	0b c0       	rjmp	.+22     	; 0x550c <_Z9DoomEventR8KeyEvent+0x198>
                    dx = 0;
                else if (!InWall(dx,0))
    54f6:	89 e3       	ldi	r24, 0x39	; 57
    54f8:	92 e0       	ldi	r25, 0x02	; 2
    54fa:	b6 01       	movw	r22, r12
    54fc:	40 e0       	ldi	r20, 0x00	; 0
    54fe:	50 e0       	ldi	r21, 0x00	; 0
    5500:	0e 94 7d 29 	call	0x52fa	; 0x52fa <_ZN6Doomed6InWallEss>
    5504:	88 23       	and	r24, r24
    5506:	11 f4       	brne	.+4      	; 0x550c <_Z9DoomEventR8KeyEvent+0x198>
    5508:	ee 24       	eor	r14, r14
    550a:	ff 24       	eor	r15, r15
                    dy = 0;
            }               
            if (!InWall(dx,dy))
    550c:	89 e3       	ldi	r24, 0x39	; 57
    550e:	92 e0       	ldi	r25, 0x02	; 2
    5510:	b6 01       	movw	r22, r12
    5512:	a7 01       	movw	r20, r14
    5514:	0e 94 7d 29 	call	0x52fa	; 0x52fa <_ZN6Doomed6InWallEss>
    5518:	88 23       	and	r24, r24
    551a:	a9 f4       	brne	.+42     	; 0x5546 <_Z9DoomEventR8KeyEvent+0x1d2>
            {
                _playerPosX += dx;
    551c:	80 91 39 02 	lds	r24, 0x0239
    5520:	90 91 3a 02 	lds	r25, 0x023A
    5524:	c8 0e       	add	r12, r24
    5526:	d9 1e       	adc	r13, r25
    5528:	d0 92 3a 02 	sts	0x023A, r13
    552c:	c0 92 39 02 	sts	0x0239, r12
                _playerPosY += dy;           
    5530:	80 91 3b 02 	lds	r24, 0x023B
    5534:	90 91 3c 02 	lds	r25, 0x023C
    5538:	e8 0e       	add	r14, r24
    553a:	f9 1e       	adc	r15, r25
    553c:	f0 92 3c 02 	sts	0x023C, r15
    5540:	e0 92 3b 02 	sts	0x023B, r14
    5544:	0a c0       	rjmp	.+20     	; 0x555a <_Z9DoomEventR8KeyEvent+0x1e6>
                break;
            }
            _rate--;
    5546:	80 91 3e 02 	lds	r24, 0x023E
    554a:	81 50       	subi	r24, 0x01	; 1
    554c:	80 93 3e 02 	sts	0x023E, r24
                _rate++;
        } else if (_rate > 0)
            _rate--;
        
        //  Rather dumb wall avoidance
        while (_rate)
    5550:	00 91 3e 02 	lds	r16, 0x023E
    5554:	00 23       	and	r16, r16
    5556:	09 f0       	breq	.+2      	; 0x555a <_Z9DoomEventR8KeyEvent+0x1e6>
    5558:	97 cf       	rjmp	.-210    	; 0x5488 <_Z9DoomEventR8KeyEvent+0x114>
            return -1;
            
        move(e.keys);
         
        // cast all rays here
        short sina = SIN(_angle) << 6;
    555a:	f0 90 3d 02 	lds	r15, 0x023D
    555e:	8f 2d       	mov	r24, r15
    5560:	0e 94 3e 29 	call	0x527c	; 0x527c <_Z3SINh>
    5564:	8c 01       	movw	r16, r24
    5566:	66 e0       	ldi	r22, 0x06	; 6
    5568:	00 0f       	add	r16, r16
    556a:	11 1f       	adc	r17, r17
    556c:	6a 95       	dec	r22
    556e:	e1 f7       	brne	.-8      	; 0x5568 <_Z9DoomEventR8KeyEvent+0x1f4>
        short cosa = COS(_angle) << 6;
    5570:	8f 2d       	mov	r24, r15
    5572:	0e 94 5d 29 	call	0x52ba	; 0x52ba <_Z3COSh>
    5576:	9c 01       	movw	r18, r24
    5578:	56 e0       	ldi	r21, 0x06	; 6
    557a:	22 0f       	add	r18, r18
    557c:	33 1f       	adc	r19, r19
    557e:	5a 95       	dec	r21
    5580:	e1 f7       	brne	.-8      	; 0x557a <_Z9DoomEventR8KeyEvent+0x206>
        short u = cosa - sina;          // Range of u/v is +- 2 TODO: Fit in 16 bit
    5582:	29 01       	movw	r4, r18
    5584:	40 1a       	sub	r4, r16
    5586:	51 0a       	sbc	r5, r17
    5588:	28 96       	adiw	r28, 0x08	; 8
    558a:	5f ae       	std	Y+63, r5	; 0x3f
    558c:	4e ae       	std	Y+62, r4	; 0x3e
    558e:	28 97       	sbiw	r28, 0x08	; 8
        short v = sina + cosa;
    5590:	39 01       	movw	r6, r18
    5592:	60 0e       	add	r6, r16
    5594:	71 1e       	adc	r7, r17
    5596:	2a 96       	adiw	r28, 0x0a	; 10
    5598:	7f ae       	std	Y+63, r7	; 0x3f
    559a:	6e ae       	std	Y+62, r6	; 0x3e
    559c:	2a 97       	sbiw	r28, 0x0a	; 10
        short du = sina / (SCREEN_WIDTH>>1);     // Range is +- 1/24 - 16:16
    559e:	c8 01       	movw	r24, r16
    55a0:	60 e3       	ldi	r22, 0x30	; 48
    55a2:	70 e0       	ldi	r23, 0x00	; 0
    55a4:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <__divmodhi4>
    55a8:	65 96       	adiw	r28, 0x15	; 21
    55aa:	6f af       	std	Y+63, r22	; 0x3f
    55ac:	65 97       	sbiw	r28, 0x15	; 21
    55ae:	66 96       	adiw	r28, 0x16	; 22
    55b0:	7f af       	std	Y+63, r23	; 0x3f
    55b2:	66 97       	sbiw	r28, 0x16	; 22
        short dv = -cosa / (SCREEN_WIDTH>>1);
    55b4:	c9 01       	movw	r24, r18
    55b6:	60 ed       	ldi	r22, 0xD0	; 208
    55b8:	7f ef       	ldi	r23, 0xFF	; 255
    55ba:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <__divmodhi4>
    55be:	67 96       	adiw	r28, 0x17	; 23
    55c0:	6f af       	std	Y+63, r22	; 0x3f
    55c2:	67 97       	sbiw	r28, 0x17	; 23
    55c4:	68 96       	adiw	r28, 0x18	; 24
    55c6:	7f af       	std	Y+63, r23	; 0x3f
    55c8:	68 97       	sbiw	r28, 0x18	; 24
    55ca:	2b 96       	adiw	r28, 0x0b	; 11
    55cc:	1f ae       	std	Y+63, r1	; 0x3f
    55ce:	2b 97       	sbiw	r28, 0x0b	; 11
    55d0:	20 e6       	ldi	r18, 0x60	; 96
    55d2:	26 96       	adiw	r28, 0x06	; 6
    55d4:	2f af       	std	Y+63, r18	; 0x3f
    55d6:	26 97       	sbiw	r28, 0x06	; 6
            // y1 will go up (decrease), y2 will go down (increase)
            byte y1 = SCREEN_HEIGHT / 2;
            byte y2 = y1 + 1;
        
            // texture
            memset(buffer,0,sizeof(buffer));
    55d8:	ae 01       	movw	r20, r28
    55da:	4f 5f       	subi	r20, 0xFF	; 255
    55dc:	5f 4f       	sbci	r21, 0xFF	; 255
    55de:	6a 96       	adiw	r28, 0x1a	; 26
    55e0:	5f af       	std	Y+63, r21	; 0x3f
    55e2:	4e af       	std	Y+62, r20	; 0x3e
    55e4:	6a 97       	sbiw	r28, 0x1a	; 26
        byte buffer[SCREEN_HEIGHT];    // vertical buffer
        for (byte ray = 0; ray < SCREEN_WIDTH; ++ray, u += du, v += dv)
        {           
            short uu = (u < 0) ? -u : u;
            short vv = (v < 0) ? -v : v;
            long duu = RECIP(uu);
    55e6:	28 96       	adiw	r28, 0x08	; 8
    55e8:	8e ad       	ldd	r24, Y+62	; 0x3e
    55ea:	9f ad       	ldd	r25, Y+63	; 0x3f
    55ec:	28 97       	sbiw	r28, 0x08	; 8
    55ee:	97 ff       	sbrs	r25, 7
    55f0:	03 c0       	rjmp	.+6      	; 0x55f8 <_Z9DoomEventR8KeyEvent+0x284>
    55f2:	90 95       	com	r25
    55f4:	81 95       	neg	r24
    55f6:	9f 4f       	sbci	r25, 0xFF	; 255
    55f8:	0e 94 61 29 	call	0x52c2	; 0x52c2 <_Z5RECIPs>
    55fc:	2f 96       	adiw	r28, 0x0f	; 15
    55fe:	6c af       	std	Y+60, r22	; 0x3c
    5600:	7d af       	std	Y+61, r23	; 0x3d
    5602:	8e af       	std	Y+62, r24	; 0x3e
    5604:	9f af       	std	Y+63, r25	; 0x3f
    5606:	2f 97       	sbiw	r28, 0x0f	; 15
            long dvv = RECIP(vv);
    5608:	2a 96       	adiw	r28, 0x0a	; 10
    560a:	8e ad       	ldd	r24, Y+62	; 0x3e
    560c:	9f ad       	ldd	r25, Y+63	; 0x3f
    560e:	2a 97       	sbiw	r28, 0x0a	; 10
    5610:	97 ff       	sbrs	r25, 7
    5612:	03 c0       	rjmp	.+6      	; 0x561a <_Z9DoomEventR8KeyEvent+0x2a6>
    5614:	90 95       	com	r25
    5616:	81 95       	neg	r24
    5618:	9f 4f       	sbci	r25, 0xFF	; 255
    561a:	0e 94 61 29 	call	0x52c2	; 0x52c2 <_Z5RECIPs>
    561e:	4b 01       	movw	r8, r22
    5620:	5c 01       	movw	r10, r24
            char stepx = (u < 0) ? -1 : 1;
    5622:	28 96       	adiw	r28, 0x08	; 8
    5624:	8e ad       	ldd	r24, Y+62	; 0x3e
    5626:	9f ad       	ldd	r25, Y+63	; 0x3f
    5628:	28 97       	sbiw	r28, 0x08	; 8
    562a:	97 fd       	sbrc	r25, 7
    562c:	05 c0       	rjmp	.+10     	; 0x5638 <_Z9DoomEventR8KeyEvent+0x2c4>
    562e:	91 e0       	ldi	r25, 0x01	; 1
    5630:	60 96       	adiw	r28, 0x10	; 16
    5632:	9f af       	std	Y+63, r25	; 0x3f
    5634:	60 97       	sbiw	r28, 0x10	; 16
    5636:	04 c0       	rjmp	.+8      	; 0x5640 <_Z9DoomEventR8KeyEvent+0x2cc>
    5638:	af ef       	ldi	r26, 0xFF	; 255
    563a:	60 96       	adiw	r28, 0x10	; 16
    563c:	af af       	std	Y+63, r26	; 0x3f
    563e:	60 97       	sbiw	r28, 0x10	; 16
            char stepy = (v < 0) ? -1 : 1;
    5640:	2a 96       	adiw	r28, 0x0a	; 10
    5642:	ee ad       	ldd	r30, Y+62	; 0x3e
    5644:	ff ad       	ldd	r31, Y+63	; 0x3f
    5646:	2a 97       	sbiw	r28, 0x0a	; 10
    5648:	f7 fd       	sbrc	r31, 7
    564a:	05 c0       	rjmp	.+10     	; 0x5656 <_Z9DoomEventR8KeyEvent+0x2e2>
    564c:	f1 e0       	ldi	r31, 0x01	; 1
    564e:	61 96       	adiw	r28, 0x11	; 17
    5650:	ff af       	std	Y+63, r31	; 0x3f
    5652:	61 97       	sbiw	r28, 0x11	; 17
    5654:	04 c0       	rjmp	.+8      	; 0x565e <_Z9DoomEventR8KeyEvent+0x2ea>
    5656:	2f ef       	ldi	r18, 0xFF	; 255
    5658:	61 96       	adiw	r28, 0x11	; 17
    565a:	2f af       	std	Y+63, r18	; 0x3f
    565c:	61 97       	sbiw	r28, 0x11	; 17

            // Initial position
            byte mapx = _playerPosX >> 8;
    565e:	00 91 39 02 	lds	r16, 0x0239
    5662:	10 91 3a 02 	lds	r17, 0x023A
            byte mapy = _playerPosY >> 8;      
    5666:	20 90 3b 02 	lds	r2, 0x023B
    566a:	30 90 3c 02 	lds	r3, 0x023C
            byte mx = _playerPosX;
    566e:	62 96       	adiw	r28, 0x12	; 18
    5670:	0f af       	std	Y+63, r16	; 0x3f
    5672:	62 97       	sbiw	r28, 0x12	; 18
            byte my = _playerPosY;
    5674:	63 96       	adiw	r28, 0x13	; 19
    5676:	2f ae       	std	Y+63, r2	; 0x3f
    5678:	63 97       	sbiw	r28, 0x13	; 19
            if (u > 0)
    567a:	28 96       	adiw	r28, 0x08	; 8
    567c:	4e ad       	ldd	r20, Y+62	; 0x3e
    567e:	5f ad       	ldd	r21, Y+63	; 0x3f
    5680:	28 97       	sbiw	r28, 0x08	; 8
    5682:	14 16       	cp	r1, r20
    5684:	15 06       	cpc	r1, r21
    5686:	14 f0       	brlt	.+4      	; 0x568c <_Z9DoomEventR8KeyEvent+0x318>
    5688:	60 2f       	mov	r22, r16
    568a:	04 c0       	rjmp	.+8      	; 0x5694 <_Z9DoomEventR8KeyEvent+0x320>
                mx = 0xFF-mx;
    568c:	62 96       	adiw	r28, 0x12	; 18
    568e:	6f ad       	ldd	r22, Y+63	; 0x3f
    5690:	62 97       	sbiw	r28, 0x12	; 18
    5692:	60 95       	com	r22
            if (v > 0)
    5694:	2a 96       	adiw	r28, 0x0a	; 10
    5696:	8e ad       	ldd	r24, Y+62	; 0x3e
    5698:	9f ad       	ldd	r25, Y+63	; 0x3f
    569a:	2a 97       	sbiw	r28, 0x0a	; 10
    569c:	18 16       	cp	r1, r24
    569e:	19 06       	cpc	r1, r25
    56a0:	24 f0       	brlt	.+8      	; 0x56aa <_Z9DoomEventR8KeyEvent+0x336>
    56a2:	63 96       	adiw	r28, 0x13	; 19
    56a4:	df ac       	ldd	r13, Y+63	; 0x3f
    56a6:	63 97       	sbiw	r28, 0x13	; 19
    56a8:	04 c0       	rjmp	.+8      	; 0x56b2 <_Z9DoomEventR8KeyEvent+0x33e>
                my = 0xFF-my;
    56aa:	63 96       	adiw	r28, 0x13	; 19
    56ac:	df ac       	ldd	r13, Y+63	; 0x3f
    56ae:	63 97       	sbiw	r28, 0x13	; 19
    56b0:	d0 94       	com	r13
            long dvv = RECIP(vv);
            char stepx = (u < 0) ? -1 : 1;
            char stepy = (v < 0) ? -1 : 1;

            // Initial position
            byte mapx = _playerPosX >> 8;
    56b2:	81 2f       	mov	r24, r17
    56b4:	99 27       	eor	r25, r25
    56b6:	87 fd       	sbrc	r24, 7
    56b8:	9a 95       	dec	r25
    56ba:	e8 2e       	mov	r14, r24
            byte mapy = _playerPosY >> 8;      
    56bc:	83 2d       	mov	r24, r3
    56be:	99 27       	eor	r25, r25
    56c0:	87 fd       	sbrc	r24, 7
    56c2:	9a 95       	dec	r25
    56c4:	f8 2e       	mov	r15, r24

//  a is +- 256 representing a 8:8 numver
//  dduv is always positive 16:16 number may be very large, might resonably be trimmed
long MUL8(short a, long dduv)
{
    return a*(dduv >> 8);
    56c6:	70 e0       	ldi	r23, 0x00	; 0
    56c8:	88 27       	eor	r24, r24
    56ca:	77 fd       	sbrc	r23, 7
    56cc:	80 95       	com	r24
    56ce:	98 2f       	mov	r25, r24
    56d0:	2f 96       	adiw	r28, 0x0f	; 15
    56d2:	4c ac       	ldd	r4, Y+60	; 0x3c
    56d4:	5d ac       	ldd	r5, Y+61	; 0x3d
    56d6:	6e ac       	ldd	r6, Y+62	; 0x3e
    56d8:	7f ac       	ldd	r7, Y+63	; 0x3f
    56da:	2f 97       	sbiw	r28, 0x0f	; 15
    56dc:	55 27       	eor	r21, r21
    56de:	77 fc       	sbrc	r7, 7
    56e0:	5a 95       	dec	r21
    56e2:	47 2d       	mov	r20, r7
    56e4:	36 2d       	mov	r19, r6
    56e6:	25 2d       	mov	r18, r5
    56e8:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__mulsi3>
    56ec:	25 96       	adiw	r28, 0x05	; 5
    56ee:	6c af       	std	Y+60, r22	; 0x3c
    56f0:	7d af       	std	Y+61, r23	; 0x3d
    56f2:	8e af       	std	Y+62, r24	; 0x3e
    56f4:	9f af       	std	Y+63, r25	; 0x3f
    56f6:	25 97       	sbiw	r28, 0x05	; 5
            byte t;
                
            // loop until we hit something
            while (texture <= 0)
            {
                if (distx > disty) {
    56f8:	6d 2d       	mov	r22, r13
    56fa:	70 e0       	ldi	r23, 0x00	; 0
    56fc:	88 27       	eor	r24, r24
    56fe:	77 fd       	sbrc	r23, 7
    5700:	80 95       	com	r24
    5702:	98 2f       	mov	r25, r24
    5704:	55 27       	eor	r21, r21
    5706:	b7 fc       	sbrc	r11, 7
    5708:	5a 95       	dec	r21
    570a:	4b 2d       	mov	r20, r11
    570c:	3a 2d       	mov	r19, r10
    570e:	29 2d       	mov	r18, r9
    5710:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__mulsi3>
    5714:	2b 01       	movw	r4, r22
    5716:	3c 01       	movw	r6, r24
    5718:	25 96       	adiw	r28, 0x05	; 5
    571a:	2c ad       	ldd	r18, Y+60	; 0x3c
    571c:	3d ad       	ldd	r19, Y+61	; 0x3d
    571e:	4e ad       	ldd	r20, Y+62	; 0x3e
    5720:	5f ad       	ldd	r21, Y+63	; 0x3f
    5722:	25 97       	sbiw	r28, 0x05	; 5
    5724:	42 16       	cp	r4, r18
    5726:	53 06       	cpc	r5, r19
    5728:	64 06       	cpc	r6, r20
    572a:	75 06       	cpc	r7, r21
    572c:	0c f0       	brlt	.+2      	; 0x5730 <_Z9DoomEventR8KeyEvent+0x3bc>
    572e:	61 c0       	rjmp	.+194    	; 0x57f2 <_Z9DoomEventR8KeyEvent+0x47e>
                    // shorter distance to a hit in constant y line
                    hitdist = disty;
                    disty += dvv;
                    mapy += stepy;
    5730:	61 96       	adiw	r28, 0x11	; 17
    5732:	3f ad       	ldd	r19, Y+63	; 0x3f
    5734:	61 97       	sbiw	r28, 0x11	; 17
    5736:	f3 0e       	add	r15, r19
                    texture = pgm_read_byte(&_map[mapy * 8 + mapx]);
    5738:	6f 2d       	mov	r22, r15
    573a:	70 e0       	ldi	r23, 0x00	; 0
    573c:	fb 01       	movw	r30, r22
    573e:	a3 e0       	ldi	r26, 0x03	; 3
    5740:	ee 0f       	add	r30, r30
    5742:	ff 1f       	adc	r31, r31
    5744:	aa 95       	dec	r26
    5746:	e1 f7       	brne	.-8      	; 0x5740 <_Z9DoomEventR8KeyEvent+0x3cc>
    5748:	ee 0d       	add	r30, r14
    574a:	f1 1d       	adc	r31, r1
    574c:	e3 5e       	subi	r30, 0xE3	; 227
    574e:	f3 4c       	sbci	r31, 0xC3	; 195
    5750:	44 91       	lpm	r20, Z+
    5752:	64 96       	adiw	r28, 0x14	; 20
    5754:	4f af       	std	Y+63, r20	; 0x3f
    5756:	64 97       	sbiw	r28, 0x14	; 20
                    if (texture > 0) {
    5758:	44 23       	and	r20, r20
    575a:	09 f4       	brne	.+2      	; 0x575e <_Z9DoomEventR8KeyEvent+0x3ea>
    575c:	7d c1       	rjmp	.+762    	; 0x5a58 <_Z9DoomEventR8KeyEvent+0x6e4>
    575e:	28 96       	adiw	r28, 0x08	; 8
    5760:	8e ad       	ldd	r24, Y+62	; 0x3e
    5762:	9f ad       	ldd	r25, Y+63	; 0x3f
    5764:	28 97       	sbiw	r28, 0x08	; 8
    5766:	4c 01       	movw	r8, r24
    5768:	aa 24       	eor	r10, r10
    576a:	97 fc       	sbrc	r9, 7
    576c:	a0 94       	com	r10
    576e:	ba 2c       	mov	r11, r10
    5770:	2a 96       	adiw	r28, 0x0a	; 10
    5772:	ae ad       	ldd	r26, Y+62	; 0x3e
    5774:	bf ad       	ldd	r27, Y+63	; 0x3f
    5776:	2a 97       	sbiw	r28, 0x0a	; 10
    5778:	6d 01       	movw	r12, r26
    577a:	ee 24       	eor	r14, r14
    577c:	d7 fc       	sbrc	r13, 7
    577e:	e0 94       	com	r14
    5780:	fe 2c       	mov	r15, r14
                        dark = true;
                        if (stepy > 0)
    5782:	31 30       	cpi	r19, 0x01	; 1
    5784:	b1 f4       	brne	.+44     	; 0x57b2 <_Z9DoomEventR8KeyEvent+0x43e>
                            t = _playerPosX + TEXTURE(u,v,mapy,_playerPosY);
    5786:	76 2f       	mov	r23, r22
    5788:	66 27       	eor	r22, r22
    578a:	62 19       	sub	r22, r2
    578c:	73 09       	sbc	r23, r3
    578e:	88 27       	eor	r24, r24
    5790:	77 fd       	sbrc	r23, 7
    5792:	80 95       	com	r24
    5794:	98 2f       	mov	r25, r24
    5796:	a5 01       	movw	r20, r10
    5798:	94 01       	movw	r18, r8
    579a:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__mulsi3>
    579e:	a7 01       	movw	r20, r14
    57a0:	96 01       	movw	r18, r12
    57a2:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__divmodsi4>
    57a6:	02 2f       	mov	r16, r18
    57a8:	62 96       	adiw	r28, 0x12	; 18
    57aa:	bf ad       	ldd	r27, Y+63	; 0x3f
    57ac:	62 97       	sbiw	r28, 0x12	; 18
    57ae:	0b 0f       	add	r16, r27
    57b0:	18 c0       	rjmp	.+48     	; 0x57e2 <_Z9DoomEventR8KeyEvent+0x46e>
                        else
                            t = -(_playerPosX + TEXTURE(u,v,mapy+1,_playerPosY));
    57b2:	6f 5f       	subi	r22, 0xFF	; 255
    57b4:	7f 4f       	sbci	r23, 0xFF	; 255
    57b6:	76 2f       	mov	r23, r22
    57b8:	66 27       	eor	r22, r22
    57ba:	62 19       	sub	r22, r2
    57bc:	73 09       	sbc	r23, r3
    57be:	88 27       	eor	r24, r24
    57c0:	77 fd       	sbrc	r23, 7
    57c2:	80 95       	com	r24
    57c4:	98 2f       	mov	r25, r24
    57c6:	a5 01       	movw	r20, r10
    57c8:	94 01       	movw	r18, r8
    57ca:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__mulsi3>
    57ce:	a7 01       	movw	r20, r14
    57d0:	96 01       	movw	r18, r12
    57d2:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__divmodsi4>
    57d6:	02 2f       	mov	r16, r18
    57d8:	62 96       	adiw	r28, 0x12	; 18
    57da:	ef ad       	ldd	r30, Y+63	; 0x3f
    57dc:	62 97       	sbiw	r28, 0x12	; 18
    57de:	0e 0f       	add	r16, r30
    57e0:	01 95       	neg	r16
    57e2:	25 96       	adiw	r28, 0x05	; 5
    57e4:	4c ae       	std	Y+60, r4	; 0x3c
    57e6:	5d ae       	std	Y+61, r5	; 0x3d
    57e8:	6e ae       	std	Y+62, r6	; 0x3e
    57ea:	7f ae       	std	Y+63, r7	; 0x3f
    57ec:	25 97       	sbiw	r28, 0x05	; 5
    57ee:	11 e0       	ldi	r17, 0x01	; 1
    57f0:	74 c0       	rjmp	.+232    	; 0x58da <_Z9DoomEventR8KeyEvent+0x566>
                    }
                } else {
                    // shorter distance to a hit in constant x line
                    hitdist = distx;
                    distx += duu;
                    mapx += stepx;
    57f2:	60 96       	adiw	r28, 0x10	; 16
    57f4:	ff ad       	ldd	r31, Y+63	; 0x3f
    57f6:	60 97       	sbiw	r28, 0x10	; 16
    57f8:	ef 0e       	add	r14, r31
                    texture = pgm_read_byte(&_map[mapy * 8 + mapx]);
    57fa:	6e 2d       	mov	r22, r14
    57fc:	70 e0       	ldi	r23, 0x00	; 0
    57fe:	ef 2d       	mov	r30, r15
    5800:	f0 e0       	ldi	r31, 0x00	; 0
    5802:	43 e0       	ldi	r20, 0x03	; 3
    5804:	ee 0f       	add	r30, r30
    5806:	ff 1f       	adc	r31, r31
    5808:	4a 95       	dec	r20
    580a:	e1 f7       	brne	.-8      	; 0x5804 <_Z9DoomEventR8KeyEvent+0x490>
    580c:	e6 0f       	add	r30, r22
    580e:	f7 1f       	adc	r31, r23
    5810:	e3 5e       	subi	r30, 0xE3	; 227
    5812:	f3 4c       	sbci	r31, 0xC3	; 195
    5814:	24 91       	lpm	r18, Z+
    5816:	64 96       	adiw	r28, 0x14	; 20
    5818:	2f af       	std	Y+63, r18	; 0x3f
    581a:	64 97       	sbiw	r28, 0x14	; 20
                    if (texture > 0) {
    581c:	22 23       	and	r18, r18
    581e:	b9 f4       	brne	.+46     	; 0x584e <_Z9DoomEventR8KeyEvent+0x4da>
                            t = -(_playerPosX + TEXTURE(u,v,mapy+1,_playerPosY));
                    }
                } else {
                    // shorter distance to a hit in constant x line
                    hitdist = distx;
                    distx += duu;
    5820:	25 96       	adiw	r28, 0x05	; 5
    5822:	8c ad       	ldd	r24, Y+60	; 0x3c
    5824:	9d ad       	ldd	r25, Y+61	; 0x3d
    5826:	ae ad       	ldd	r26, Y+62	; 0x3e
    5828:	bf ad       	ldd	r27, Y+63	; 0x3f
    582a:	25 97       	sbiw	r28, 0x05	; 5
    582c:	2f 96       	adiw	r28, 0x0f	; 15
    582e:	2c ad       	ldd	r18, Y+60	; 0x3c
    5830:	3d ad       	ldd	r19, Y+61	; 0x3d
    5832:	4e ad       	ldd	r20, Y+62	; 0x3e
    5834:	5f ad       	ldd	r21, Y+63	; 0x3f
    5836:	2f 97       	sbiw	r28, 0x0f	; 15
    5838:	82 0f       	add	r24, r18
    583a:	93 1f       	adc	r25, r19
    583c:	a4 1f       	adc	r26, r20
    583e:	b5 1f       	adc	r27, r21
    5840:	25 96       	adiw	r28, 0x05	; 5
    5842:	8c af       	std	Y+60, r24	; 0x3c
    5844:	9d af       	std	Y+61, r25	; 0x3d
    5846:	ae af       	std	Y+62, r26	; 0x3e
    5848:	bf af       	std	Y+63, r27	; 0x3f
    584a:	25 97       	sbiw	r28, 0x05	; 5
    584c:	65 cf       	rjmp	.-310    	; 0x5718 <_Z9DoomEventR8KeyEvent+0x3a4>
    584e:	28 96       	adiw	r28, 0x08	; 8
    5850:	4e ad       	ldd	r20, Y+62	; 0x3e
    5852:	5f ad       	ldd	r21, Y+63	; 0x3f
    5854:	28 97       	sbiw	r28, 0x08	; 8
    5856:	4a 01       	movw	r8, r20
    5858:	aa 24       	eor	r10, r10
    585a:	97 fc       	sbrc	r9, 7
    585c:	a0 94       	com	r10
    585e:	ba 2c       	mov	r11, r10
    5860:	2a 96       	adiw	r28, 0x0a	; 10
    5862:	8e ad       	ldd	r24, Y+62	; 0x3e
    5864:	9f ad       	ldd	r25, Y+63	; 0x3f
    5866:	2a 97       	sbiw	r28, 0x0a	; 10
    5868:	6c 01       	movw	r12, r24
    586a:	ee 24       	eor	r14, r14
    586c:	d7 fc       	sbrc	r13, 7
    586e:	e0 94       	com	r14
    5870:	fe 2c       	mov	r15, r14
                    mapx += stepx;
                    texture = pgm_read_byte(&_map[mapy * 8 + mapx]);
                    if (texture > 0) {
                        if (stepx > 0)
    5872:	60 96       	adiw	r28, 0x10	; 16
    5874:	9f ad       	ldd	r25, Y+63	; 0x3f
    5876:	60 97       	sbiw	r28, 0x10	; 16
    5878:	91 30       	cpi	r25, 0x01	; 1
    587a:	b1 f4       	brne	.+44     	; 0x58a8 <_Z9DoomEventR8KeyEvent+0x534>
                            t = _playerPosY + TEXTURE(v,u,mapx,_playerPosX);
    587c:	76 2f       	mov	r23, r22
    587e:	66 27       	eor	r22, r22
    5880:	60 1b       	sub	r22, r16
    5882:	71 0b       	sbc	r23, r17
    5884:	88 27       	eor	r24, r24
    5886:	77 fd       	sbrc	r23, 7
    5888:	80 95       	com	r24
    588a:	98 2f       	mov	r25, r24
    588c:	a7 01       	movw	r20, r14
    588e:	96 01       	movw	r18, r12
    5890:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__mulsi3>
    5894:	a5 01       	movw	r20, r10
    5896:	94 01       	movw	r18, r8
    5898:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__divmodsi4>
    589c:	02 2f       	mov	r16, r18
    589e:	63 96       	adiw	r28, 0x13	; 19
    58a0:	af ad       	ldd	r26, Y+63	; 0x3f
    58a2:	63 97       	sbiw	r28, 0x13	; 19
    58a4:	0a 0f       	add	r16, r26
    58a6:	18 c0       	rjmp	.+48     	; 0x58d8 <_Z9DoomEventR8KeyEvent+0x564>
                        else
                            t = -(_playerPosY + TEXTURE(v,u,mapx+1,_playerPosX));
    58a8:	6f 5f       	subi	r22, 0xFF	; 255
    58aa:	7f 4f       	sbci	r23, 0xFF	; 255
    58ac:	76 2f       	mov	r23, r22
    58ae:	66 27       	eor	r22, r22
    58b0:	60 1b       	sub	r22, r16
    58b2:	71 0b       	sbc	r23, r17
    58b4:	88 27       	eor	r24, r24
    58b6:	77 fd       	sbrc	r23, 7
    58b8:	80 95       	com	r24
    58ba:	98 2f       	mov	r25, r24
    58bc:	a7 01       	movw	r20, r14
    58be:	96 01       	movw	r18, r12
    58c0:	0e 94 31 2d 	call	0x5a62	; 0x5a62 <__mulsi3>
    58c4:	a5 01       	movw	r20, r10
    58c6:	94 01       	movw	r18, r8
    58c8:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__divmodsi4>
    58cc:	02 2f       	mov	r16, r18
    58ce:	63 96       	adiw	r28, 0x13	; 19
    58d0:	bf ad       	ldd	r27, Y+63	; 0x3f
    58d2:	63 97       	sbiw	r28, 0x13	; 19
    58d4:	0b 0f       	add	r16, r27
    58d6:	01 95       	neg	r16
    58d8:	10 e0       	ldi	r17, 0x00	; 0
                }
            }

            
            // start from the texture center (horizontally)
            short dy = hitdist / (((SCREEN_WIDTH >> 1) * ((256<<2)/TEXTURE_SIZE)));
    58da:	25 96       	adiw	r28, 0x05	; 5
    58dc:	6c ad       	ldd	r22, Y+60	; 0x3c
    58de:	7d ad       	ldd	r23, Y+61	; 0x3d
    58e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    58e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    58e4:	25 97       	sbiw	r28, 0x05	; 5
    58e6:	20 e0       	ldi	r18, 0x00	; 0
    58e8:	36 e0       	ldi	r19, 0x06	; 6
    58ea:	40 e0       	ldi	r20, 0x00	; 0
    58ec:	50 e0       	ldi	r21, 0x00	; 0
    58ee:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__divmodsi4>
            short p1 = ((TEXTURE_SIZE / 2) << 8) - dy;

            //  when dy <= 128, use smaller texture (mipmap)
            const byte* tex;
            const byte* palette = dark ? textures32_pal_dark : textures32_pal;
    58f2:	11 23       	and	r17, r17
    58f4:	29 f4       	brne	.+10     	; 0x5900 <_Z9DoomEventR8KeyEvent+0x58c>
    58f6:	9d ed       	ldi	r25, 0xDD	; 221
    58f8:	a9 2e       	mov	r10, r25
    58fa:	97 e3       	ldi	r25, 0x37	; 55
    58fc:	b9 2e       	mov	r11, r25
    58fe:	04 c0       	rjmp	.+8      	; 0x5908 <_Z9DoomEventR8KeyEvent+0x594>
    5900:	8d ed       	ldi	r24, 0xDD	; 221
    5902:	a8 2e       	mov	r10, r24
    5904:	89 e3       	ldi	r24, 0x39	; 57
    5906:	b8 2e       	mov	r11, r24
                tex = textures16 + tt*(TEXTURE_SIZE>>1);
                p1 = TEXTURE_SIZE >> 2;
                dy >>= 1;
            } else {
            #endif
                tt = tt*TEXTURE_SIZE + (t>>3);
    5908:	64 96       	adiw	r28, 0x14	; 20
    590a:	ef ad       	ldd	r30, Y+63	; 0x3f
    590c:	64 97       	sbiw	r28, 0x14	; 20
    590e:	e1 50       	subi	r30, 0x01	; 1
    5910:	6e 2f       	mov	r22, r30
    5912:	70 e0       	ldi	r23, 0x00	; 0
    5914:	15 e0       	ldi	r17, 0x05	; 5
    5916:	66 0f       	add	r22, r22
    5918:	77 1f       	adc	r23, r23
    591a:	1a 95       	dec	r17
    591c:	e1 f7       	brne	.-8      	; 0x5916 <_Z9DoomEventR8KeyEvent+0x5a2>
    591e:	80 2f       	mov	r24, r16
    5920:	90 e0       	ldi	r25, 0x00	; 0
    5922:	b3 e0       	ldi	r27, 0x03	; 3
    5924:	95 95       	asr	r25
    5926:	87 95       	ror	r24
    5928:	ba 95       	dec	r27
    592a:	e1 f7       	brne	.-8      	; 0x5924 <_Z9DoomEventR8KeyEvent+0x5b0>
    592c:	68 0f       	add	r22, r24
    592e:	79 1f       	adc	r23, r25
                tex = textures32 + tt*TEXTURE_SIZE;
    5930:	a5 e0       	ldi	r26, 0x05	; 5
    5932:	66 0f       	add	r22, r22
    5934:	77 1f       	adc	r23, r23
    5936:	aa 95       	dec	r26
    5938:	e1 f7       	brne	.-8      	; 0x5932 <_Z9DoomEventR8KeyEvent+0x5be>
    593a:	63 52       	subi	r22, 0x23	; 35
    593c:	78 4e       	sbci	r23, 0xE8	; 232
                p1 = TEXTURE_SIZE >> 1;
           // }
            p1 = (p1 << 8) - dy;
    593e:	80 e0       	ldi	r24, 0x00	; 0
    5940:	90 e1       	ldi	r25, 0x10	; 16
    5942:	82 1b       	sub	r24, r18
    5944:	93 0b       	sbc	r25, r19
            // y1 will go up (decrease), y2 will go down (increase)
            byte y1 = SCREEN_HEIGHT / 2;
            byte y2 = y1 + 1;
        
            // texture
            memset(buffer,0,sizeof(buffer));
    5946:	6a 96       	adiw	r28, 0x1a	; 26
    5948:	ae ad       	ldd	r26, Y+62	; 0x3e
    594a:	bf ad       	ldd	r27, Y+63	; 0x3f
    594c:	6a 97       	sbiw	r28, 0x1a	; 26
    594e:	e0 e4       	ldi	r30, 0x40	; 64
    5950:	1d 92       	st	X+, r1
    5952:	ea 95       	dec	r30
    5954:	e9 f7       	brne	.-6      	; 0x5950 <_Z9DoomEventR8KeyEvent+0x5dc>
    5956:	8e 01       	movw	r16, r28
    5958:	0f 5d       	subi	r16, 0xDF	; 223
    595a:	1f 4f       	sbci	r17, 0xFF	; 255
    595c:	f2 e2       	ldi	r31, 0x22	; 34
    595e:	ef 2e       	mov	r14, r31
    5960:	f1 2c       	mov	r15, r1
    5962:	ec 0e       	add	r14, r28
    5964:	fd 1e       	adc	r15, r29
    5966:	40 e2       	ldi	r20, 0x20	; 32
    5968:	a0 e0       	ldi	r26, 0x00	; 0
    596a:	b0 e1       	ldi	r27, 0x10	; 16
    }
};


Doomed _doomedInstance;
short DoomEvent(KeyEvent& e)
    596c:	cc 24       	eor	r12, r12
    596e:	dd 24       	eor	r13, r13
    5970:	c2 1a       	sub	r12, r18
    5972:	d3 0a       	sbc	r13, r19
    5974:	1c c0       	rjmp	.+56     	; 0x59ae <_Z9DoomEventR8KeyEvent+0x63a>
            // texture
            memset(buffer,0,sizeof(buffer));
            
            while (y1 >= 0 && y2 < SCREEN_HEIGHT && p1 >= 0)
            {
                buffer[y1] = pgm_read_byte(&tex[p1 >> 8]);
    5976:	e9 2f       	mov	r30, r25
    5978:	ff 27       	eor	r31, r31
    597a:	e7 fd       	sbrc	r30, 7
    597c:	fa 95       	dec	r31
    597e:	e6 0f       	add	r30, r22
    5980:	f7 1f       	adc	r31, r23
    5982:	94 90       	lpm	r9, Z+
    5984:	f8 01       	movw	r30, r16
    5986:	90 82       	st	Z, r9
                buffer[y2] = pgm_read_byte(&tex[p2 >> 8]);
    5988:	eb 2f       	mov	r30, r27
    598a:	ff 27       	eor	r31, r31
    598c:	e7 fd       	sbrc	r30, 7
    598e:	fa 95       	dec	r31
    5990:	e6 0f       	add	r30, r22
    5992:	f7 1f       	adc	r31, r23
    5994:	94 90       	lpm	r9, Z+
    5996:	f7 01       	movw	r30, r14
    5998:	91 92       	st	Z+, r9
    599a:	7f 01       	movw	r14, r30
    599c:	01 50       	subi	r16, 0x01	; 1
    599e:	10 40       	sbci	r17, 0x00	; 0
            byte y2 = y1 + 1;
        
            // texture
            memset(buffer,0,sizeof(buffer));
            
            while (y1 >= 0 && y2 < SCREEN_HEIGHT && p1 >= 0)
    59a0:	42 30       	cpi	r20, 0x02	; 2
    59a2:	39 f0       	breq	.+14     	; 0x59b2 <_Z9DoomEventR8KeyEvent+0x63e>
    }
};


Doomed _doomedInstance;
short DoomEvent(KeyEvent& e)
    59a4:	8c 0d       	add	r24, r12
    59a6:	9d 1d       	adc	r25, r13
    59a8:	a2 0f       	add	r26, r18
    59aa:	b3 1f       	adc	r27, r19
            {
                buffer[y1] = pgm_read_byte(&tex[p1 >> 8]);
                buffer[y2] = pgm_read_byte(&tex[p2 >> 8]);
                p1 -= dy;
                p2 += dy;
                --y1;
    59ac:	41 50       	subi	r20, 0x01	; 1
            byte y2 = y1 + 1;
        
            // texture
            memset(buffer,0,sizeof(buffer));
            
            while (y1 >= 0 && y2 < SCREEN_HEIGHT && p1 >= 0)
    59ae:	97 ff       	sbrs	r25, 7
    59b0:	e2 cf       	rjmp	.-60     	; 0x5976 <_Z9DoomEventR8KeyEvent+0x602>
                --y1;
                ++y2;
            }
                
            // ceiling and floor
            OLED_Slice(ray,buffer,(byte*)palette);
    59b2:	2b 96       	adiw	r28, 0x0b	; 11
    59b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    59b6:	2b 97       	sbiw	r28, 0x0b	; 11
    59b8:	be 01       	movw	r22, r28
    59ba:	6f 5f       	subi	r22, 0xFF	; 255
    59bc:	7f 4f       	sbci	r23, 0xFF	; 255
    59be:	a5 01       	movw	r20, r10
    59c0:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <_Z10OLED_SlicehPhS_>
        short v = sina + cosa;
        short du = sina / (SCREEN_WIDTH>>1);     // Range is +- 1/24 - 16:16
        short dv = -cosa / (SCREEN_WIDTH>>1);
                        
        byte buffer[SCREEN_HEIGHT];    // vertical buffer
        for (byte ray = 0; ray < SCREEN_WIDTH; ++ray, u += du, v += dv)
    59c4:	2b 96       	adiw	r28, 0x0b	; 11
    59c6:	ff ad       	ldd	r31, Y+63	; 0x3f
    59c8:	2b 97       	sbiw	r28, 0x0b	; 11
    59ca:	ff 5f       	subi	r31, 0xFF	; 255
    59cc:	2b 96       	adiw	r28, 0x0b	; 11
    59ce:	ff af       	std	Y+63, r31	; 0x3f
    59d0:	2b 97       	sbiw	r28, 0x0b	; 11
    59d2:	26 96       	adiw	r28, 0x06	; 6
    59d4:	2f ad       	ldd	r18, Y+63	; 0x3f
    59d6:	26 97       	sbiw	r28, 0x06	; 6
    59d8:	21 50       	subi	r18, 0x01	; 1
    59da:	26 96       	adiw	r28, 0x06	; 6
    59dc:	2f af       	std	Y+63, r18	; 0x3f
    59de:	26 97       	sbiw	r28, 0x06	; 6
    59e0:	22 23       	and	r18, r18
    59e2:	e9 f0       	breq	.+58     	; 0x5a1e <_Z9DoomEventR8KeyEvent+0x6aa>
    59e4:	28 96       	adiw	r28, 0x08	; 8
    59e6:	4e ad       	ldd	r20, Y+62	; 0x3e
    59e8:	5f ad       	ldd	r21, Y+63	; 0x3f
    59ea:	28 97       	sbiw	r28, 0x08	; 8
    59ec:	66 96       	adiw	r28, 0x16	; 22
    59ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    59f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    59f2:	66 97       	sbiw	r28, 0x16	; 22
    59f4:	48 0f       	add	r20, r24
    59f6:	59 1f       	adc	r21, r25
    59f8:	28 96       	adiw	r28, 0x08	; 8
    59fa:	5f af       	std	Y+63, r21	; 0x3f
    59fc:	4e af       	std	Y+62, r20	; 0x3e
    59fe:	28 97       	sbiw	r28, 0x08	; 8
    5a00:	2a 96       	adiw	r28, 0x0a	; 10
    5a02:	ae ad       	ldd	r26, Y+62	; 0x3e
    5a04:	bf ad       	ldd	r27, Y+63	; 0x3f
    5a06:	2a 97       	sbiw	r28, 0x0a	; 10
    5a08:	68 96       	adiw	r28, 0x18	; 24
    5a0a:	ee ad       	ldd	r30, Y+62	; 0x3e
    5a0c:	ff ad       	ldd	r31, Y+63	; 0x3f
    5a0e:	68 97       	sbiw	r28, 0x18	; 24
    5a10:	ae 0f       	add	r26, r30
    5a12:	bf 1f       	adc	r27, r31
    5a14:	2a 96       	adiw	r28, 0x0a	; 10
    5a16:	bf af       	std	Y+63, r27	; 0x3f
    5a18:	ae af       	std	Y+62, r26	; 0x3e
    5a1a:	2a 97       	sbiw	r28, 0x0a	; 10
    5a1c:	e4 cd       	rjmp	.-1080   	; 0x55e6 <_Z9DoomEventR8KeyEvent+0x272>
    5a1e:	20 e0       	ldi	r18, 0x00	; 0
    5a20:	30 e0       	ldi	r19, 0x00	; 0
short DoomEvent(KeyEvent& e)
{
    if (e.msg == 0)
        return _doomedInstance.Init();    
    return _doomedInstance.Loop(e);
}
    5a22:	c9 01       	movw	r24, r18
    5a24:	c7 5a       	subi	r28, 0xA7	; 167
    5a26:	df 4f       	sbci	r29, 0xFF	; 255
    5a28:	0f b6       	in	r0, 0x3f	; 63
    5a2a:	f8 94       	cli
    5a2c:	de bf       	out	0x3e, r29	; 62
    5a2e:	0f be       	out	0x3f, r0	; 63
    5a30:	cd bf       	out	0x3d, r28	; 61
    5a32:	cf 91       	pop	r28
    5a34:	df 91       	pop	r29
    5a36:	1f 91       	pop	r17
    5a38:	0f 91       	pop	r16
    5a3a:	ff 90       	pop	r15
    5a3c:	ef 90       	pop	r14
    5a3e:	df 90       	pop	r13
    5a40:	cf 90       	pop	r12
    5a42:	bf 90       	pop	r11
    5a44:	af 90       	pop	r10
    5a46:	9f 90       	pop	r9
    5a48:	8f 90       	pop	r8
    5a4a:	7f 90       	pop	r7
    5a4c:	6f 90       	pop	r6
    5a4e:	5f 90       	pop	r5
    5a50:	4f 90       	pop	r4
    5a52:	3f 90       	pop	r3
    5a54:	2f 90       	pop	r2
    5a56:	08 95       	ret
            while (texture <= 0)
            {
                if (distx > disty) {
                    // shorter distance to a hit in constant y line
                    hitdist = disty;
                    disty += dvv;
    5a58:	48 0c       	add	r4, r8
    5a5a:	59 1c       	adc	r5, r9
    5a5c:	6a 1c       	adc	r6, r10
    5a5e:	7b 1c       	adc	r7, r11
    5a60:	5b ce       	rjmp	.-842    	; 0x5718 <_Z9DoomEventR8KeyEvent+0x3a4>

00005a62 <__mulsi3>:
    5a62:	62 9f       	mul	r22, r18
    5a64:	d0 01       	movw	r26, r0
    5a66:	73 9f       	mul	r23, r19
    5a68:	f0 01       	movw	r30, r0
    5a6a:	82 9f       	mul	r24, r18
    5a6c:	e0 0d       	add	r30, r0
    5a6e:	f1 1d       	adc	r31, r1
    5a70:	64 9f       	mul	r22, r20
    5a72:	e0 0d       	add	r30, r0
    5a74:	f1 1d       	adc	r31, r1
    5a76:	92 9f       	mul	r25, r18
    5a78:	f0 0d       	add	r31, r0
    5a7a:	83 9f       	mul	r24, r19
    5a7c:	f0 0d       	add	r31, r0
    5a7e:	74 9f       	mul	r23, r20
    5a80:	f0 0d       	add	r31, r0
    5a82:	65 9f       	mul	r22, r21
    5a84:	f0 0d       	add	r31, r0
    5a86:	99 27       	eor	r25, r25
    5a88:	72 9f       	mul	r23, r18
    5a8a:	b0 0d       	add	r27, r0
    5a8c:	e1 1d       	adc	r30, r1
    5a8e:	f9 1f       	adc	r31, r25
    5a90:	63 9f       	mul	r22, r19
    5a92:	b0 0d       	add	r27, r0
    5a94:	e1 1d       	adc	r30, r1
    5a96:	f9 1f       	adc	r31, r25
    5a98:	bd 01       	movw	r22, r26
    5a9a:	cf 01       	movw	r24, r30
    5a9c:	11 24       	eor	r1, r1
    5a9e:	08 95       	ret

00005aa0 <__divmodhi4>:
    5aa0:	97 fb       	bst	r25, 7
    5aa2:	09 2e       	mov	r0, r25
    5aa4:	07 26       	eor	r0, r23
    5aa6:	0a d0       	rcall	.+20     	; 0x5abc <__divmodhi4_neg1>
    5aa8:	77 fd       	sbrc	r23, 7
    5aaa:	04 d0       	rcall	.+8      	; 0x5ab4 <__divmodhi4_neg2>
    5aac:	49 d0       	rcall	.+146    	; 0x5b40 <__udivmodhi4>
    5aae:	06 d0       	rcall	.+12     	; 0x5abc <__divmodhi4_neg1>
    5ab0:	00 20       	and	r0, r0
    5ab2:	1a f4       	brpl	.+6      	; 0x5aba <__divmodhi4_exit>

00005ab4 <__divmodhi4_neg2>:
    5ab4:	70 95       	com	r23
    5ab6:	61 95       	neg	r22
    5ab8:	7f 4f       	sbci	r23, 0xFF	; 255

00005aba <__divmodhi4_exit>:
    5aba:	08 95       	ret

00005abc <__divmodhi4_neg1>:
    5abc:	f6 f7       	brtc	.-4      	; 0x5aba <__divmodhi4_exit>
    5abe:	90 95       	com	r25
    5ac0:	81 95       	neg	r24
    5ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ac4:	08 95       	ret

00005ac6 <__udivmodsi4>:
    5ac6:	a1 e2       	ldi	r26, 0x21	; 33
    5ac8:	1a 2e       	mov	r1, r26
    5aca:	aa 1b       	sub	r26, r26
    5acc:	bb 1b       	sub	r27, r27
    5ace:	fd 01       	movw	r30, r26
    5ad0:	0d c0       	rjmp	.+26     	; 0x5aec <__udivmodsi4_ep>

00005ad2 <__udivmodsi4_loop>:
    5ad2:	aa 1f       	adc	r26, r26
    5ad4:	bb 1f       	adc	r27, r27
    5ad6:	ee 1f       	adc	r30, r30
    5ad8:	ff 1f       	adc	r31, r31
    5ada:	a2 17       	cp	r26, r18
    5adc:	b3 07       	cpc	r27, r19
    5ade:	e4 07       	cpc	r30, r20
    5ae0:	f5 07       	cpc	r31, r21
    5ae2:	20 f0       	brcs	.+8      	; 0x5aec <__udivmodsi4_ep>
    5ae4:	a2 1b       	sub	r26, r18
    5ae6:	b3 0b       	sbc	r27, r19
    5ae8:	e4 0b       	sbc	r30, r20
    5aea:	f5 0b       	sbc	r31, r21

00005aec <__udivmodsi4_ep>:
    5aec:	66 1f       	adc	r22, r22
    5aee:	77 1f       	adc	r23, r23
    5af0:	88 1f       	adc	r24, r24
    5af2:	99 1f       	adc	r25, r25
    5af4:	1a 94       	dec	r1
    5af6:	69 f7       	brne	.-38     	; 0x5ad2 <__udivmodsi4_loop>
    5af8:	60 95       	com	r22
    5afa:	70 95       	com	r23
    5afc:	80 95       	com	r24
    5afe:	90 95       	com	r25
    5b00:	9b 01       	movw	r18, r22
    5b02:	ac 01       	movw	r20, r24
    5b04:	bd 01       	movw	r22, r26
    5b06:	cf 01       	movw	r24, r30
    5b08:	08 95       	ret

00005b0a <__divmodsi4>:
    5b0a:	97 fb       	bst	r25, 7
    5b0c:	09 2e       	mov	r0, r25
    5b0e:	05 26       	eor	r0, r21
    5b10:	0e d0       	rcall	.+28     	; 0x5b2e <__divmodsi4_neg1>
    5b12:	57 fd       	sbrc	r21, 7
    5b14:	04 d0       	rcall	.+8      	; 0x5b1e <__divmodsi4_neg2>
    5b16:	d7 df       	rcall	.-82     	; 0x5ac6 <__udivmodsi4>
    5b18:	0a d0       	rcall	.+20     	; 0x5b2e <__divmodsi4_neg1>
    5b1a:	00 1c       	adc	r0, r0
    5b1c:	38 f4       	brcc	.+14     	; 0x5b2c <__divmodsi4_exit>

00005b1e <__divmodsi4_neg2>:
    5b1e:	50 95       	com	r21
    5b20:	40 95       	com	r20
    5b22:	30 95       	com	r19
    5b24:	21 95       	neg	r18
    5b26:	3f 4f       	sbci	r19, 0xFF	; 255
    5b28:	4f 4f       	sbci	r20, 0xFF	; 255
    5b2a:	5f 4f       	sbci	r21, 0xFF	; 255

00005b2c <__divmodsi4_exit>:
    5b2c:	08 95       	ret

00005b2e <__divmodsi4_neg1>:
    5b2e:	f6 f7       	brtc	.-4      	; 0x5b2c <__divmodsi4_exit>
    5b30:	90 95       	com	r25
    5b32:	80 95       	com	r24
    5b34:	70 95       	com	r23
    5b36:	61 95       	neg	r22
    5b38:	7f 4f       	sbci	r23, 0xFF	; 255
    5b3a:	8f 4f       	sbci	r24, 0xFF	; 255
    5b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b3e:	08 95       	ret

00005b40 <__udivmodhi4>:
    5b40:	aa 1b       	sub	r26, r26
    5b42:	bb 1b       	sub	r27, r27
    5b44:	51 e1       	ldi	r21, 0x11	; 17
    5b46:	07 c0       	rjmp	.+14     	; 0x5b56 <__udivmodhi4_ep>

00005b48 <__udivmodhi4_loop>:
    5b48:	aa 1f       	adc	r26, r26
    5b4a:	bb 1f       	adc	r27, r27
    5b4c:	a6 17       	cp	r26, r22
    5b4e:	b7 07       	cpc	r27, r23
    5b50:	10 f0       	brcs	.+4      	; 0x5b56 <__udivmodhi4_ep>
    5b52:	a6 1b       	sub	r26, r22
    5b54:	b7 0b       	sbc	r27, r23

00005b56 <__udivmodhi4_ep>:
    5b56:	88 1f       	adc	r24, r24
    5b58:	99 1f       	adc	r25, r25
    5b5a:	5a 95       	dec	r21
    5b5c:	a9 f7       	brne	.-22     	; 0x5b48 <__udivmodhi4_loop>
    5b5e:	80 95       	com	r24
    5b60:	90 95       	com	r25
    5b62:	bc 01       	movw	r22, r24
    5b64:	cd 01       	movw	r24, r26
    5b66:	08 95       	ret

00005b68 <strcpy>:
    5b68:	fb 01       	movw	r30, r22
    5b6a:	dc 01       	movw	r26, r24
    5b6c:	01 90       	ld	r0, Z+
    5b6e:	0d 92       	st	X+, r0
    5b70:	00 20       	and	r0, r0
    5b72:	e1 f7       	brne	.-8      	; 0x5b6c <strcpy+0x4>
    5b74:	08 95       	ret

00005b76 <strncpy>:
    5b76:	fb 01       	movw	r30, r22
    5b78:	dc 01       	movw	r26, r24
    5b7a:	41 50       	subi	r20, 0x01	; 1
    5b7c:	50 40       	sbci	r21, 0x00	; 0
    5b7e:	48 f0       	brcs	.+18     	; 0x5b92 <strncpy+0x1c>
    5b80:	01 90       	ld	r0, Z+
    5b82:	0d 92       	st	X+, r0
    5b84:	00 20       	and	r0, r0
    5b86:	c9 f7       	brne	.-14     	; 0x5b7a <strncpy+0x4>
    5b88:	01 c0       	rjmp	.+2      	; 0x5b8c <strncpy+0x16>
    5b8a:	1d 92       	st	X+, r1
    5b8c:	41 50       	subi	r20, 0x01	; 1
    5b8e:	50 40       	sbci	r21, 0x00	; 0
    5b90:	e0 f7       	brcc	.-8      	; 0x5b8a <strncpy+0x14>
    5b92:	08 95       	ret

00005b94 <_exit>:
    5b94:	f8 94       	cli

00005b96 <__stop_program>:
    5b96:	ff cf       	rjmp	.-2      	; 0x5b96 <__stop_program>
